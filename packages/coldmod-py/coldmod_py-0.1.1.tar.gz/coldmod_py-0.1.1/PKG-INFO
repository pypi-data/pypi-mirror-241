Metadata-Version: 2.1
Name: coldmod-py
Version: 0.1.1
Summary: find cold code
Author: Sam Taylor
Author-email: sjltaylor@gmail.com
Requires-Python: >=3.11,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: backoff (>=2.2.1,<3.0.0)
Requires-Dist: coldmod-msg (>=0.1.0,<0.2.0)
Requires-Dist: fire (>=0.5.0,<0.6.0)
Requires-Dist: grpcio (>=1.54.0,<2.0.0)
Requires-Dist: grpcio-tools (>=1.54.0,<2.0.0)
Requires-Dist: jedi (>=0.19.0,<0.20.0)
Requires-Dist: libcst (>=1.0.1,<2.0.0)
Requires-Dist: protobuf (>=4.22.4,<5.0.0)
Requires-Dist: tomli (>=2.0.1,<3.0.0)
Requires-Dist: tomli-w (>=1.0.0,<2.0.0)
Description-Content-Type: text/markdown

# README

Coldmod-py is a tracing library for collecting runtime data from python code, and a CLI for configuration and codemods.

It's implemented with, and test against, the Python version found in `.python-version`.

Tracing is implemented using  ["sys.settrace"](https://docs.python.org/3/library/sys.html?highlight=settrace#sys.settrace) - built into CPython.


The CLI, which is implemented with [Python Fire](https://github.com/google/python-fire), can be used to inspect configuration and apply code mods.

## Installation

`pip install coldmod-py`


## Setup

The CLI and tracing require these environment variables to be set

```
COLDMOD_GRPC_HOST
COLDMOD_TLS_CA
COLDMOD_WEB_HOST
COLDMOD_API_KEY
COLDMOD_INSECURE
```

See Env.md for details on how these environment variables are used.

## Tracing

* toml file

(two threads)

## CLI

--------------------------------------
## Cacheing

* parsing is expensive so trace srcs are cached per file, key by a digest of the relative path+contents
* if the file changes you get a cache miss
* the cache can be cleared with the cli
*


* Get into the poetry env: `poetry shell`
* Run a sample: `python -m coldmod_py.samples.trace_target_1`
* Test command: `pytest[-watch]`
* Run the cli: `python -m coldmod <tracefile> <sourcepath>`
* to debug just add `breakpoint()`

## Development

### ENV

```
COLDMOD_GRPC_HOST
COLDMOD_WEB_HOST
COLDMOD_CA
COLDMOD_API_KEY
```


### Editable install


## CLI

The CLI is used to apply code mods and check trace configuration.

## Installation

### Man page:
```
insert generated man page here
```

## pyright

run it with brew install, it uses node... so I don't want to make every install it as a dep

* vendors coldmod-msg
* coldmod-msg dependencies are a subset of coldmod-py dependencies


## setting up in an app via editable install of local checkout

* checkout the __coldmod branch (has a pyproject.toml which has coldmod-py as an editable install)
* activate an env for the app (see __coldmod branch)
* in that shell, go to the root of the app
* poetry install
* pip install -r requirements.txt
* add a line to the entrypoint `import coldmod_py; coldmod_py.tracing.start()`
* add a coldmod.toml
* start the app
* if coldmod-d isn't running the app should carry on and start but with no tracing
* start coldmod-d
* restart the app



TODO:

- sender architecture
- caching
    - commands
- connect <optional key>
- ignoring
- about coldmod.rootmarker
- what happens in the web UI we the heatmap is truncated because of ignore.
- limitations of Remove (references)
- strategies of tracing (settrace vs modding, version drift)

