# coding: utf-8

"""
    NewsCatcher-V3 Production API

    <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a> <br> <p style=\"color: red\"><b><em> This is a Testing Phase API. Please use it for testing purposes only. </em></b></p> <br>

    The version of the OpenAPI document: Beta-3.0.0
    Contact: maksym@newscatcherapi.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal
from pydantic import BaseModel, Field, RootModel


class AuthorSearchRequest(BaseModel):
    author_name: str = Field(alias='author_name')

    sources: str = Field(None, alias='sources')

    predefined_sources: str = Field(None, alias='predefined_sources')

    not_sources: str = Field(None, alias='not_sources')

    lang: str = Field(None, alias='lang')

    not_lang: str = Field(None, alias='not_lang')

    countries: str = Field(None, alias='countries')

    not_countries: str = Field(None, alias='not_countries')

    from_: typing.Union[str, datetime] = Field(None, alias='from_')

    to_: typing.Union[str, datetime] = Field(None, alias='to_')

    published_date_precision: str = Field(None, alias='published_date_precision')

    by_parse_date: bool = Field(None, alias='by_parse_date')

    sort_by: str = Field(None, alias='sort_by')

    ranked_only: str = Field(None, alias='ranked_only')

    from_rank: int = Field(None, alias='from_rank')

    to_rank: int = Field(None, alias='to_rank')

    is_headline: bool = Field(None, alias='is_headline')

    is_paid_content: bool = Field(None, alias='is_paid_content')

    parent_url: str = Field(None, alias='parent_url')

    all_links: str = Field(None, alias='all_links')

    all_domain_links: str = Field(None, alias='all_domain_links')

    word_count_min: int = Field(None, alias='word_count_min')

    word_count_max: int = Field(None, alias='word_count_max')

    page: int = Field(None, alias='page')

    page_size: int = Field(None, alias='page_size')

    include_nlp_data: bool = Field(None, alias='include_nlp_data')

    has_nlp: bool = Field(None, alias='has_nlp')

    theme: str = Field(None, alias='theme')

    ner_name: str = Field(None, alias='ner_name')

    title_sentiment_min: typing.Union[int, float] = Field(None, alias='title_sentiment_min')

    title_sentiment_max: typing.Union[int, float] = Field(None, alias='title_sentiment_max')

    content_sentiment_min: typing.Union[int, float] = Field(None, alias='content_sentiment_min')

    content_sentiment_max: typing.Union[int, float] = Field(None, alias='content_sentiment_max')
