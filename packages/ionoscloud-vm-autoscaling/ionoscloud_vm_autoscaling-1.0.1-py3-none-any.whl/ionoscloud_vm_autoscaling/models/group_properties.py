# coding: utf-8

"""
    VM Auto Scaling API

    The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.  # noqa: E501

    The version of the OpenAPI document: 1-SDK.1
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_vm_autoscaling.configuration import Configuration


class GroupProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'datacenter': 'GroupPropertiesDatacenter',

        'location': 'str',

        'max_replica_count': 'int',

        'min_replica_count': 'int',

        'name': 'str',

        'policy': 'GroupPolicy',

        'replica_configuration': 'ReplicaPropertiesPost',
    }

    attribute_map = {

        'datacenter': 'datacenter',

        'location': 'location',

        'max_replica_count': 'maxReplicaCount',

        'min_replica_count': 'minReplicaCount',

        'name': 'name',

        'policy': 'policy',

        'replica_configuration': 'replicaConfiguration',
    }

    def __init__(self, datacenter=None, location=None, max_replica_count=None, min_replica_count=None, name=None, policy=None, replica_configuration=None, local_vars_configuration=None):  # noqa: E501
        """GroupProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._datacenter = None
        self._location = None
        self._max_replica_count = None
        self._min_replica_count = None
        self._name = None
        self._policy = None
        self._replica_configuration = None
        self.discriminator = None

        if datacenter is not None:
            self.datacenter = datacenter
        self.location = location
        if max_replica_count is not None:
            self.max_replica_count = max_replica_count
        if min_replica_count is not None:
            self.min_replica_count = min_replica_count
        if name is not None:
            self.name = name
        if policy is not None:
            self.policy = policy
        if replica_configuration is not None:
            self.replica_configuration = replica_configuration


    @property
    def datacenter(self):
        """Gets the datacenter of this GroupProperties.  # noqa: E501


        :return: The datacenter of this GroupProperties.  # noqa: E501
        :rtype: GroupPropertiesDatacenter
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this GroupProperties.


        :param datacenter: The datacenter of this GroupProperties.  # noqa: E501
        :type datacenter: GroupPropertiesDatacenter
        """

        self._datacenter = datacenter

    @property
    def location(self):
        """Gets the location of this GroupProperties.  # noqa: E501

        The data center location.  # noqa: E501

        :return: The location of this GroupProperties.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GroupProperties.

        The data center location.  # noqa: E501

        :param location: The location of this GroupProperties.  # noqa: E501
        :type location: str
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def max_replica_count(self):
        """Gets the max_replica_count of this GroupProperties.  # noqa: E501

        The maximum value for the number of replicas. Must be >= 0 and <= 100. Will be enforced for both automatic and manual changes.  # noqa: E501

        :return: The max_replica_count of this GroupProperties.  # noqa: E501
        :rtype: int
        """
        return self._max_replica_count

    @max_replica_count.setter
    def max_replica_count(self, max_replica_count):
        """Sets the max_replica_count of this GroupProperties.

        The maximum value for the number of replicas. Must be >= 0 and <= 100. Will be enforced for both automatic and manual changes.  # noqa: E501

        :param max_replica_count: The max_replica_count of this GroupProperties.  # noqa: E501
        :type max_replica_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_replica_count is not None and max_replica_count > 100):  # noqa: E501
            raise ValueError("Invalid value for `max_replica_count`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_replica_count is not None and max_replica_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_replica_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_replica_count = max_replica_count

    @property
    def min_replica_count(self):
        """Gets the min_replica_count of this GroupProperties.  # noqa: E501

        The minimum value for the number of replicas. Must be >= 0 and <= 100. Will be enforced for both automatic and manual changes  # noqa: E501

        :return: The min_replica_count of this GroupProperties.  # noqa: E501
        :rtype: int
        """
        return self._min_replica_count

    @min_replica_count.setter
    def min_replica_count(self, min_replica_count):
        """Sets the min_replica_count of this GroupProperties.

        The minimum value for the number of replicas. Must be >= 0 and <= 100. Will be enforced for both automatic and manual changes  # noqa: E501

        :param min_replica_count: The min_replica_count of this GroupProperties.  # noqa: E501
        :type min_replica_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                min_replica_count is not None and min_replica_count > 100):  # noqa: E501
            raise ValueError("Invalid value for `min_replica_count`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                min_replica_count is not None and min_replica_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `min_replica_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_replica_count = min_replica_count

    @property
    def name(self):
        """Gets the name of this GroupProperties.  # noqa: E501

        The name of the VM Auto Scaling Group. This field must not be null or blank.  # noqa: E501

        :return: The name of this GroupProperties.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupProperties.

        The name of the VM Auto Scaling Group. This field must not be null or blank.  # noqa: E501

        :param name: The name of this GroupProperties.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this GroupProperties.  # noqa: E501


        :return: The policy of this GroupProperties.  # noqa: E501
        :rtype: GroupPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this GroupProperties.


        :param policy: The policy of this GroupProperties.  # noqa: E501
        :type policy: GroupPolicy
        """

        self._policy = policy

    @property
    def replica_configuration(self):
        """Gets the replica_configuration of this GroupProperties.  # noqa: E501


        :return: The replica_configuration of this GroupProperties.  # noqa: E501
        :rtype: ReplicaPropertiesPost
        """
        return self._replica_configuration

    @replica_configuration.setter
    def replica_configuration(self, replica_configuration):
        """Sets the replica_configuration of this GroupProperties.


        :param replica_configuration: The replica_configuration of this GroupProperties.  # noqa: E501
        :type replica_configuration: ReplicaPropertiesPost
        """

        self._replica_configuration = replica_configuration
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupProperties):
            return True

        return self.to_dict() != other.to_dict()
