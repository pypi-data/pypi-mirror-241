# coding: utf-8

"""
    VM Auto Scaling service (CloudAPI)

    VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_vm_autoscaling.configuration import Configuration


class GroupUpdatableProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'max_replica_count': 'int',

        'min_replica_count': 'int',

        'target_replica_count': 'int',

        'name': 'str',

        'policy': 'GroupPolicy',

        'replica_configuration': 'ReplicaPropertiesPost',

        'datacenter': 'Resource',
    }

    attribute_map = {

        'max_replica_count': 'maxReplicaCount',

        'min_replica_count': 'minReplicaCount',

        'target_replica_count': 'targetReplicaCount',

        'name': 'name',

        'policy': 'policy',

        'replica_configuration': 'replicaConfiguration',

        'datacenter': 'datacenter',
    }

    def __init__(self, max_replica_count=None, min_replica_count=None, target_replica_count=None, name=None, policy=None, replica_configuration=None, datacenter=None, local_vars_configuration=None):  # noqa: E501
        """GroupUpdatableProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._max_replica_count = None
        self._min_replica_count = None
        self._target_replica_count = None
        self._name = None
        self._policy = None
        self._replica_configuration = None
        self._datacenter = None
        self.discriminator = None

        if max_replica_count is not None:
            self.max_replica_count = max_replica_count
        if min_replica_count is not None:
            self.min_replica_count = min_replica_count
        if target_replica_count is not None:
            self.target_replica_count = target_replica_count
        if name is not None:
            self.name = name
        if policy is not None:
            self.policy = policy
        if replica_configuration is not None:
            self.replica_configuration = replica_configuration
        if datacenter is not None:
            self.datacenter = datacenter


    @property
    def max_replica_count(self):
        """Gets the max_replica_count of this GroupUpdatableProperties.  # noqa: E501

        Maximum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.  # noqa: E501

        :return: The max_replica_count of this GroupUpdatableProperties.  # noqa: E501
        :rtype: int
        """
        return self._max_replica_count

    @max_replica_count.setter
    def max_replica_count(self, max_replica_count):
        """Sets the max_replica_count of this GroupUpdatableProperties.

        Maximum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.  # noqa: E501

        :param max_replica_count: The max_replica_count of this GroupUpdatableProperties.  # noqa: E501
        :type max_replica_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_replica_count is not None and max_replica_count > 200):  # noqa: E501
            raise ValueError("Invalid value for `max_replica_count`, must be a value less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_replica_count is not None and max_replica_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_replica_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_replica_count = max_replica_count

    @property
    def min_replica_count(self):
        """Gets the min_replica_count of this GroupUpdatableProperties.  # noqa: E501

        Minimum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.  # noqa: E501

        :return: The min_replica_count of this GroupUpdatableProperties.  # noqa: E501
        :rtype: int
        """
        return self._min_replica_count

    @min_replica_count.setter
    def min_replica_count(self, min_replica_count):
        """Sets the min_replica_count of this GroupUpdatableProperties.

        Minimum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.  # noqa: E501

        :param min_replica_count: The min_replica_count of this GroupUpdatableProperties.  # noqa: E501
        :type min_replica_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                min_replica_count is not None and min_replica_count > 200):  # noqa: E501
            raise ValueError("Invalid value for `min_replica_count`, must be a value less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                min_replica_count is not None and min_replica_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `min_replica_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_replica_count = min_replica_count

    @property
    def target_replica_count(self):
        """Gets the target_replica_count of this GroupUpdatableProperties.  # noqa: E501

        The target number of VMs in this Group. Depending on the scaling policy, this number will be adjusted automatically. VMs will be created or destroyed automatically in order to adjust the actual number of VMs to this number. If targetReplicaCount is given in the request body then it must be >= minReplicaCount and <= maxReplicaCount.  # noqa: E501

        :return: The target_replica_count of this GroupUpdatableProperties.  # noqa: E501
        :rtype: int
        """
        return self._target_replica_count

    @target_replica_count.setter
    def target_replica_count(self, target_replica_count):
        """Sets the target_replica_count of this GroupUpdatableProperties.

        The target number of VMs in this Group. Depending on the scaling policy, this number will be adjusted automatically. VMs will be created or destroyed automatically in order to adjust the actual number of VMs to this number. If targetReplicaCount is given in the request body then it must be >= minReplicaCount and <= maxReplicaCount.  # noqa: E501

        :param target_replica_count: The target_replica_count of this GroupUpdatableProperties.  # noqa: E501
        :type target_replica_count: int
        """
        if (self.local_vars_configuration.client_side_validation and
                target_replica_count is not None and target_replica_count > 200):  # noqa: E501
            raise ValueError("Invalid value for `target_replica_count`, must be a value less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_replica_count is not None and target_replica_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `target_replica_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._target_replica_count = target_replica_count

    @property
    def name(self):
        """Gets the name of this GroupUpdatableProperties.  # noqa: E501

        User-defined name for the autoscaling group.  # noqa: E501

        :return: The name of this GroupUpdatableProperties.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupUpdatableProperties.

        User-defined name for the autoscaling group.  # noqa: E501

        :param name: The name of this GroupUpdatableProperties.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this GroupUpdatableProperties.  # noqa: E501


        :return: The policy of this GroupUpdatableProperties.  # noqa: E501
        :rtype: GroupPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this GroupUpdatableProperties.


        :param policy: The policy of this GroupUpdatableProperties.  # noqa: E501
        :type policy: GroupPolicy
        """

        self._policy = policy

    @property
    def replica_configuration(self):
        """Gets the replica_configuration of this GroupUpdatableProperties.  # noqa: E501


        :return: The replica_configuration of this GroupUpdatableProperties.  # noqa: E501
        :rtype: ReplicaPropertiesPost
        """
        return self._replica_configuration

    @replica_configuration.setter
    def replica_configuration(self, replica_configuration):
        """Sets the replica_configuration of this GroupUpdatableProperties.


        :param replica_configuration: The replica_configuration of this GroupUpdatableProperties.  # noqa: E501
        :type replica_configuration: ReplicaPropertiesPost
        """

        self._replica_configuration = replica_configuration

    @property
    def datacenter(self):
        """Gets the datacenter of this GroupUpdatableProperties.  # noqa: E501


        :return: The datacenter of this GroupUpdatableProperties.  # noqa: E501
        :rtype: Resource
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this GroupUpdatableProperties.


        :param datacenter: The datacenter of this GroupUpdatableProperties.  # noqa: E501
        :type datacenter: Resource
        """

        self._datacenter = datacenter
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupUpdatableProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupUpdatableProperties):
            return True

        return self.to_dict() != other.to_dict()
