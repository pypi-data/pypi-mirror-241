# coding: utf-8

"""
    VM Auto Scaling API

    The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.  # noqa: E501

    The version of the OpenAPI document: 1-SDK.1
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_vm_autoscaling.configuration import Configuration


class GroupPolicyScaleInAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'amount': 'float',

        'amount_type': 'ActionAmount',

        'cooldown_period': 'str',

        'termination_policy': 'TerminationPolicyType',

        'delete_volumes': 'bool',
    }

    attribute_map = {

        'amount': 'amount',

        'amount_type': 'amountType',

        'cooldown_period': 'cooldownPeriod',

        'termination_policy': 'terminationPolicy',

        'delete_volumes': 'deleteVolumes',
    }

    def __init__(self, amount=None, amount_type=None, cooldown_period='5m', termination_policy=None, delete_volumes=None, local_vars_configuration=None):  # noqa: E501
        """GroupPolicyScaleInAction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._amount_type = None
        self._cooldown_period = None
        self._termination_policy = None
        self._delete_volumes = None
        self.discriminator = None

        self.amount = amount
        self.amount_type = amount_type
        self.cooldown_period = cooldown_period
        self.termination_policy = termination_policy
        self.delete_volumes = delete_volumes


    @property
    def amount(self):
        """Gets the amount of this GroupPolicyScaleInAction.  # noqa: E501

        'amountType=ABSOLUTE' specifies the absolute number of VMs that are added or removed. The value must be between 1 to 10.   'amountType=PERCENTAGE' specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200.   At least one VM is always added or removed.   Note that for 'SCALE_IN' operations, volumes are not deleted after the server is deleted.  # noqa: E501

        :return: The amount of this GroupPolicyScaleInAction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GroupPolicyScaleInAction.

        'amountType=ABSOLUTE' specifies the absolute number of VMs that are added or removed. The value must be between 1 to 10.   'amountType=PERCENTAGE' specifies the percentage value that is applied to the current number of replicas of the VM Auto Scaling Group. The value must be between 1 to 200.   At least one VM is always added or removed.   Note that for 'SCALE_IN' operations, volumes are not deleted after the server is deleted.  # noqa: E501

        :param amount: The amount of this GroupPolicyScaleInAction.  # noqa: E501
        :type amount: float
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def amount_type(self):
        """Gets the amount_type of this GroupPolicyScaleInAction.  # noqa: E501


        :return: The amount_type of this GroupPolicyScaleInAction.  # noqa: E501
        :rtype: ActionAmount
        """
        return self._amount_type

    @amount_type.setter
    def amount_type(self, amount_type):
        """Sets the amount_type of this GroupPolicyScaleInAction.


        :param amount_type: The amount_type of this GroupPolicyScaleInAction.  # noqa: E501
        :type amount_type: ActionAmount
        """
        if self.local_vars_configuration.client_side_validation and amount_type is None:  # noqa: E501
            raise ValueError("Invalid value for `amount_type`, must not be `None`")  # noqa: E501

        self._amount_type = amount_type

    @property
    def cooldown_period(self):
        """Gets the cooldown_period of this GroupPolicyScaleInAction.  # noqa: E501

        The minimum time that elapses after the start of this scaling action until the next scaling action is started. With a scaling action in progress, no second scaling action is started for the same VM Auto Scaling Group. Instead, the metric is re-evaluated after the current scaling action completes (either successfully or with errors). This is currently validated with a minimum value of 2 minutes and a maximum value of 24 hours. The default value is 5 minutes if not specified.  # noqa: E501

        :return: The cooldown_period of this GroupPolicyScaleInAction.  # noqa: E501
        :rtype: str
        """
        return self._cooldown_period

    @cooldown_period.setter
    def cooldown_period(self, cooldown_period):
        """Sets the cooldown_period of this GroupPolicyScaleInAction.

        The minimum time that elapses after the start of this scaling action until the next scaling action is started. With a scaling action in progress, no second scaling action is started for the same VM Auto Scaling Group. Instead, the metric is re-evaluated after the current scaling action completes (either successfully or with errors). This is currently validated with a minimum value of 2 minutes and a maximum value of 24 hours. The default value is 5 minutes if not specified.  # noqa: E501

        :param cooldown_period: The cooldown_period of this GroupPolicyScaleInAction.  # noqa: E501
        :type cooldown_period: str
        """

        self._cooldown_period = cooldown_period

    @property
    def termination_policy(self):
        """Gets the termination_policy of this GroupPolicyScaleInAction.  # noqa: E501


        :return: The termination_policy of this GroupPolicyScaleInAction.  # noqa: E501
        :rtype: TerminationPolicyType
        """
        return self._termination_policy

    @termination_policy.setter
    def termination_policy(self, termination_policy):
        """Sets the termination_policy of this GroupPolicyScaleInAction.


        :param termination_policy: The termination_policy of this GroupPolicyScaleInAction.  # noqa: E501
        :type termination_policy: TerminationPolicyType
        """

        self._termination_policy = termination_policy

    @property
    def delete_volumes(self):
        """Gets the delete_volumes of this GroupPolicyScaleInAction.  # noqa: E501

        If set to `true`, when deleting an replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually.  **Note**, that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.  # noqa: E501

        :return: The delete_volumes of this GroupPolicyScaleInAction.  # noqa: E501
        :rtype: bool
        """
        return self._delete_volumes

    @delete_volumes.setter
    def delete_volumes(self, delete_volumes):
        """Sets the delete_volumes of this GroupPolicyScaleInAction.

        If set to `true`, when deleting an replica during scale in, any attached volume will also be deleted. When set to `false`, all volumes remain in the datacenter and must be deleted manually.  **Note**, that every scale-out creates new volumes. When they are not deleted, they will eventually use all of your contracts resource limits. At this point, scaling out would not be possible anymore.  # noqa: E501

        :param delete_volumes: The delete_volumes of this GroupPolicyScaleInAction.  # noqa: E501
        :type delete_volumes: bool
        """
        if self.local_vars_configuration.client_side_validation and delete_volumes is None:  # noqa: E501
            raise ValueError("Invalid value for `delete_volumes`, must not be `None`")  # noqa: E501

        self._delete_volumes = delete_volumes
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupPolicyScaleInAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupPolicyScaleInAction):
            return True

        return self.to_dict() != other.to_dict()
