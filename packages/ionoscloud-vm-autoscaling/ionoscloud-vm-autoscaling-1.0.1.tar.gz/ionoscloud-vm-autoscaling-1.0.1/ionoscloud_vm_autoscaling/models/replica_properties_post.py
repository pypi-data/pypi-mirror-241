# coding: utf-8

"""
    VM Auto Scaling API

    The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.  # noqa: E501

    The version of the OpenAPI document: 1-SDK.1
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_vm_autoscaling.configuration import Configuration


class ReplicaPropertiesPost(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'availability_zone': 'AvailabilityZone',

        'cores': 'int',

        'cpu_family': 'CpuFamily',

        'nics': 'list[ReplicaNic]',

        'ram': 'int',

        'volumes': 'list[ReplicaVolumePost]',
    }

    attribute_map = {

        'availability_zone': 'availabilityZone',

        'cores': 'cores',

        'cpu_family': 'cpuFamily',

        'nics': 'nics',

        'ram': 'ram',

        'volumes': 'volumes',
    }

    def __init__(self, availability_zone=None, cores=None, cpu_family=None, nics=None, ram=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """ReplicaPropertiesPost - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._availability_zone = None
        self._cores = None
        self._cpu_family = None
        self._nics = None
        self._ram = None
        self._volumes = None
        self.discriminator = None

        self.availability_zone = availability_zone
        self.cores = cores
        if cpu_family is not None:
            self.cpu_family = cpu_family
        if nics is not None:
            self.nics = nics
        self.ram = ram
        if volumes is not None:
            self.volumes = volumes


    @property
    def availability_zone(self):
        """Gets the availability_zone of this ReplicaPropertiesPost.  # noqa: E501


        :return: The availability_zone of this ReplicaPropertiesPost.  # noqa: E501
        :rtype: AvailabilityZone
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this ReplicaPropertiesPost.


        :param availability_zone: The availability_zone of this ReplicaPropertiesPost.  # noqa: E501
        :type availability_zone: AvailabilityZone
        """

        self._availability_zone = availability_zone

    @property
    def cores(self):
        """Gets the cores of this ReplicaPropertiesPost.  # noqa: E501

        The total number of cores for the VMs.  # noqa: E501

        :return: The cores of this ReplicaPropertiesPost.  # noqa: E501
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this ReplicaPropertiesPost.

        The total number of cores for the VMs.  # noqa: E501

        :param cores: The cores of this ReplicaPropertiesPost.  # noqa: E501
        :type cores: int
        """
        if self.local_vars_configuration.client_side_validation and cores is None:  # noqa: E501
            raise ValueError("Invalid value for `cores`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cores is not None and cores < 1):  # noqa: E501
            raise ValueError("Invalid value for `cores`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cores = cores

    @property
    def cpu_family(self):
        """Gets the cpu_family of this ReplicaPropertiesPost.  # noqa: E501


        :return: The cpu_family of this ReplicaPropertiesPost.  # noqa: E501
        :rtype: CpuFamily
        """
        return self._cpu_family

    @cpu_family.setter
    def cpu_family(self, cpu_family):
        """Sets the cpu_family of this ReplicaPropertiesPost.


        :param cpu_family: The cpu_family of this ReplicaPropertiesPost.  # noqa: E501
        :type cpu_family: CpuFamily
        """

        self._cpu_family = cpu_family

    @property
    def nics(self):
        """Gets the nics of this ReplicaPropertiesPost.  # noqa: E501

        The list of NICs associated with this replica.  # noqa: E501

        :return: The nics of this ReplicaPropertiesPost.  # noqa: E501
        :rtype: list[ReplicaNic]
        """
        return self._nics

    @nics.setter
    def nics(self, nics):
        """Sets the nics of this ReplicaPropertiesPost.

        The list of NICs associated with this replica.  # noqa: E501

        :param nics: The nics of this ReplicaPropertiesPost.  # noqa: E501
        :type nics: list[ReplicaNic]
        """

        self._nics = nics

    @property
    def ram(self):
        """Gets the ram of this ReplicaPropertiesPost.  # noqa: E501

        The size of the memory for the VMs in MB. The size must be in multiples of 256 MB, with a minimum of 256 MB; if you set 'ramHotPlug=TRUE', you must use at least 1024 MB. If you set the RAM size to more than 240 GB, 'ramHotPlug=FALSE' is fixed.  # noqa: E501

        :return: The ram of this ReplicaPropertiesPost.  # noqa: E501
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this ReplicaPropertiesPost.

        The size of the memory for the VMs in MB. The size must be in multiples of 256 MB, with a minimum of 256 MB; if you set 'ramHotPlug=TRUE', you must use at least 1024 MB. If you set the RAM size to more than 240 GB, 'ramHotPlug=FALSE' is fixed.  # noqa: E501

        :param ram: The ram of this ReplicaPropertiesPost.  # noqa: E501
        :type ram: int
        """
        if self.local_vars_configuration.client_side_validation and ram is None:  # noqa: E501
            raise ValueError("Invalid value for `ram`, must not be `None`")  # noqa: E501

        self._ram = ram

    @property
    def volumes(self):
        """Gets the volumes of this ReplicaPropertiesPost.  # noqa: E501

        List of volumes associated with this Replica.  # noqa: E501

        :return: The volumes of this ReplicaPropertiesPost.  # noqa: E501
        :rtype: list[ReplicaVolumePost]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ReplicaPropertiesPost.

        List of volumes associated with this Replica.  # noqa: E501

        :param volumes: The volumes of this ReplicaPropertiesPost.  # noqa: E501
        :type volumes: list[ReplicaVolumePost]
        """

        self._volumes = volumes
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicaPropertiesPost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicaPropertiesPost):
            return True

        return self.to_dict() != other.to_dict()
