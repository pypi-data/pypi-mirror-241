# coding: utf-8

"""
    VM Auto Scaling API

    The VM Auto Scaling Service enables IONOS clients to horizontally scale the number of VM replicas based on configured rules. You can use VM Auto Scaling to ensure that you have a sufficient number of replicas to handle your application loads at all times.  For this purpose, create a VM Auto Scaling Group that contains the server replicas. The VM Auto Scaling Service ensures that the number of replicas in the group is always within the defined limits.   When scaling policies are set, VM Auto Scaling creates or deletes replicas according to the requirements of your applications. For each policy, specified 'scale-in' and 'scale-out' actions are performed when the corresponding thresholds are reached.  # noqa: E501

    The version of the OpenAPI document: 1-SDK.1
    Contact: support@cloud.ionos.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_vm_autoscaling.configuration import Configuration


class ReplicaNic(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'lan': 'int',

        'name': 'str',

        'dhcp': 'bool',

        'firewall_active': 'bool',

        'firewall_type': 'str',

        'flow_logs': 'list[NicFlowLog]',

        'firewall_rules': 'list[NicFirewallRule]',

        'target_group': 'TargetGroup',
    }

    attribute_map = {

        'lan': 'lan',

        'name': 'name',

        'dhcp': 'dhcp',

        'firewall_active': 'firewallActive',

        'firewall_type': 'firewallType',

        'flow_logs': 'flowLogs',

        'firewall_rules': 'firewallRules',

        'target_group': 'targetGroup',
    }

    def __init__(self, lan=None, name=None, dhcp=None, firewall_active=None, firewall_type=None, flow_logs=None, firewall_rules=None, target_group=None, local_vars_configuration=None):  # noqa: E501
        """ReplicaNic - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lan = None
        self._name = None
        self._dhcp = None
        self._firewall_active = None
        self._firewall_type = None
        self._flow_logs = None
        self._firewall_rules = None
        self._target_group = None
        self.discriminator = None

        self.lan = lan
        self.name = name
        self.dhcp = dhcp
        self.firewall_active = firewall_active
        self.firewall_type = firewall_type
        self.flow_logs = flow_logs
        self.firewall_rules = firewall_rules
        if target_group is not None:
            self.target_group = target_group


    @property
    def lan(self):
        """Gets the lan of this ReplicaNic.  # noqa: E501

        The LAN ID of this replica NIC.  # noqa: E501

        :return: The lan of this ReplicaNic.  # noqa: E501
        :rtype: int
        """
        return self._lan

    @lan.setter
    def lan(self, lan):
        """Sets the lan of this ReplicaNic.

        The LAN ID of this replica NIC.  # noqa: E501

        :param lan: The lan of this ReplicaNic.  # noqa: E501
        :type lan: int
        """
        if self.local_vars_configuration.client_side_validation and lan is None:  # noqa: E501
            raise ValueError("Invalid value for `lan`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                lan is not None and lan < 1):  # noqa: E501
            raise ValueError("Invalid value for `lan`, must be a value greater than or equal to `1`")  # noqa: E501

        self._lan = lan

    @property
    def name(self):
        """Gets the name of this ReplicaNic.  # noqa: E501

        The replica NIC name.  # noqa: E501

        :return: The name of this ReplicaNic.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReplicaNic.

        The replica NIC name.  # noqa: E501

        :param name: The name of this ReplicaNic.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def dhcp(self):
        """Gets the dhcp of this ReplicaNic.  # noqa: E501

        DHCP for this replica NIC. This is an optional attribute with the default value 'TRUE' if not specified in the request payload or as null.  # noqa: E501

        :return: The dhcp of this ReplicaNic.  # noqa: E501
        :rtype: bool
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """Sets the dhcp of this ReplicaNic.

        DHCP for this replica NIC. This is an optional attribute with the default value 'TRUE' if not specified in the request payload or as null.  # noqa: E501

        :param dhcp: The dhcp of this ReplicaNic.  # noqa: E501
        :type dhcp: bool
        """

        self._dhcp = dhcp

    @property
    def firewall_active(self):
        """Gets the firewall_active of this ReplicaNic.  # noqa: E501

        Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.  # noqa: E501

        :return: The firewall_active of this ReplicaNic.  # noqa: E501
        :rtype: bool
        """
        return self._firewall_active

    @firewall_active.setter
    def firewall_active(self, firewall_active):
        """Sets the firewall_active of this ReplicaNic.

        Activate or deactivate the firewall. By default, an active firewall without any defined rules will block all incoming network traffic except for the firewall rules that explicitly allows certain protocols, IP addresses and ports.  # noqa: E501

        :param firewall_active: The firewall_active of this ReplicaNic.  # noqa: E501
        :type firewall_active: bool
        """

        self._firewall_active = firewall_active

    @property
    def firewall_type(self):
        """Gets the firewall_type of this ReplicaNic.  # noqa: E501

        The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.  # noqa: E501

        :return: The firewall_type of this ReplicaNic.  # noqa: E501
        :rtype: str
        """
        return self._firewall_type

    @firewall_type.setter
    def firewall_type(self, firewall_type):
        """Sets the firewall_type of this ReplicaNic.

        The type of firewall rules that will be allowed on the NIC. If not specified, the default INGRESS value is used.  # noqa: E501

        :param firewall_type: The firewall_type of this ReplicaNic.  # noqa: E501
        :type firewall_type: str
        """
        allowed_values = [None,"INGRESS", "EGRESS", "BIDIRECTIONAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and firewall_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `firewall_type` ({0}), must be one of {1}"  # noqa: E501
                .format(firewall_type, allowed_values)
            )

        self._firewall_type = firewall_type

    @property
    def flow_logs(self):
        """Gets the flow_logs of this ReplicaNic.  # noqa: E501

        List of all flow logs for the specified NIC.  # noqa: E501

        :return: The flow_logs of this ReplicaNic.  # noqa: E501
        :rtype: list[NicFlowLog]
        """
        return self._flow_logs

    @flow_logs.setter
    def flow_logs(self, flow_logs):
        """Sets the flow_logs of this ReplicaNic.

        List of all flow logs for the specified NIC.  # noqa: E501

        :param flow_logs: The flow_logs of this ReplicaNic.  # noqa: E501
        :type flow_logs: list[NicFlowLog]
        """

        self._flow_logs = flow_logs

    @property
    def firewall_rules(self):
        """Gets the firewall_rules of this ReplicaNic.  # noqa: E501

        List of all firewall rules for the specified NIC.  # noqa: E501

        :return: The firewall_rules of this ReplicaNic.  # noqa: E501
        :rtype: list[NicFirewallRule]
        """
        return self._firewall_rules

    @firewall_rules.setter
    def firewall_rules(self, firewall_rules):
        """Sets the firewall_rules of this ReplicaNic.

        List of all firewall rules for the specified NIC.  # noqa: E501

        :param firewall_rules: The firewall_rules of this ReplicaNic.  # noqa: E501
        :type firewall_rules: list[NicFirewallRule]
        """

        self._firewall_rules = firewall_rules

    @property
    def target_group(self):
        """Gets the target_group of this ReplicaNic.  # noqa: E501


        :return: The target_group of this ReplicaNic.  # noqa: E501
        :rtype: TargetGroup
        """
        return self._target_group

    @target_group.setter
    def target_group(self, target_group):
        """Sets the target_group of this ReplicaNic.


        :param target_group: The target_group of this ReplicaNic.  # noqa: E501
        :type target_group: TargetGroup
        """

        self._target_group = target_group
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicaNic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicaNic):
            return True

        return self.to_dict() != other.to_dict()
