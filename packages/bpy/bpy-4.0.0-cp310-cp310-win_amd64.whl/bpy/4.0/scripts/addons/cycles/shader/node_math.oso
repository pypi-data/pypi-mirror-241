OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.1dev
# options: -q -O2 -IC:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders -IC:/Users/blender/git/blender-v400/blender.git/../lib/win64_vc15/osl/share/OSL/shaders -o C:/Users/blender/git/blender-v400/build_release/intern/cycles/kernel/osl/shaders/node_math.oso
shader node_math
param	string	math_type	"add"		%read{0,223} %write{2147483647,-1}
param	float	Value1	0.5		%read{2,225} %write{2147483647,-1}
param	float	Value2	0.5		%read{2,226} %write{2147483647,-1}
param	float	Value3	0.5		%read{122,238} %write{2147483647,-1}
oparam	float	Value	0		%read{2147483647,-1} %write{2,245}
local	float	___350_h	%read{214,237} %write{212,234}
local	float	___357_range	%read{123,128} %write{122,122}
const	string	$const1	"add"		%read{0,0} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
const	string	$const2	"subtract"		%read{3,3} %write{2147483647,-1}
temp	int	$tmp2	%read{4,4} %write{3,3}
const	string	$const3	"multiply"		%read{6,6} %write{2147483647,-1}
temp	int	$tmp3	%read{7,7} %write{6,6}
const	string	$const4	"divide"		%read{9,9} %write{2147483647,-1}
temp	int	$tmp4	%read{10,10} %write{9,9}
const	string	$const5	"safe_divide"		%read{11,111} %write{2147483647,-1}
const	float	$const6	0		%read{12,233} %write{2147483647,-1}
temp	int	$tmp5	%read{13,13} %write{12,12}
const	string	$const7	"power"		%read{17,17} %write{2147483647,-1}
temp	int	$tmp6	%read{18,18} %write{17,17}
const	string	$const8	"logarithm"		%read{20,20} %write{2147483647,-1}
temp	int	$tmp7	%read{21,21} %write{20,20}
const	string	$const9	"safe_log"		%read{22,22} %write{2147483647,-1}
temp	int	$tmp8	%read{24,24} %write{23,23}
temp	int	$tmp9	%read{25,29} %write{24,28}
const	int	$const10	0		%read{24,194} %write{2147483647,-1}
temp	int	$tmp10	%read{27,27} %write{26,26}
temp	int	$tmp11	%read{28,28} %write{27,27}
temp	float	$tmp12	%read{32,32} %write{30,30}
temp	float	$tmp13	%read{32,32} %write{31,31}
const	string	$const11	"sqrt"		%read{35,35} %write{2147483647,-1}
temp	int	$tmp14	%read{36,36} %write{35,35}
const	string	$const12	"safe_sqrt"		%read{37,37} %write{2147483647,-1}
temp	int	$tmp15	%read{39,39} %write{38,38}
const	string	$const13	"inversesqrt"		%read{43,43} %write{2147483647,-1}
temp	int	$tmp16	%read{44,44} %write{43,43}
const	string	$const14	"absolute"		%read{46,46} %write{2147483647,-1}
temp	int	$tmp17	%read{47,47} %write{46,46}
const	string	$const15	"radians"		%read{49,51} %write{2147483647,-1}
temp	int	$tmp18	%read{50,50} %write{49,49}
const	float	$const16	3.1415927		%read{52,57} %write{2147483647,-1}
const	float	$const17	180		%read{52,57} %write{2147483647,-1}
temp	float	$tmp19	%read{53,53} %write{52,52}
const	string	$const18	"degrees"		%read{54,56} %write{2147483647,-1}
temp	int	$tmp20	%read{55,55} %write{54,54}
temp	float	$tmp21	%read{58,58} %write{57,57}
const	string	$const19	"minimum"		%read{59,59} %write{2147483647,-1}
temp	int	$tmp22	%read{60,60} %write{59,59}
const	string	$const20	"maximum"		%read{62,62} %write{2147483647,-1}
temp	int	$tmp23	%read{63,63} %write{62,62}
const	string	$const21	"less_than"		%read{65,65} %write{2147483647,-1}
temp	int	$tmp24	%read{66,66} %write{65,65}
temp	int	$tmp25	%read{68,68} %write{67,67}
const	string	$const22	"greater_than"		%read{69,69} %write{2147483647,-1}
temp	int	$tmp26	%read{70,70} %write{69,69}
temp	int	$tmp27	%read{72,72} %write{71,71}
const	string	$const23	"round"		%read{73,73} %write{2147483647,-1}
temp	int	$tmp28	%read{74,74} %write{73,73}
const	float	$const24	0.5		%read{75,75} %write{2147483647,-1}
temp	float	$tmp29	%read{76,76} %write{75,75}
const	string	$const25	"floor"		%read{77,77} %write{2147483647,-1}
temp	int	$tmp30	%read{78,78} %write{77,77}
const	string	$const26	"ceil"		%read{80,80} %write{2147483647,-1}
temp	int	$tmp31	%read{81,81} %write{80,80}
const	string	$const27	"fraction"		%read{83,83} %write{2147483647,-1}
temp	int	$tmp32	%read{84,84} %write{83,83}
temp	float	$tmp33	%read{86,86} %write{85,85}
const	string	$const28	"modulo"		%read{87,87} %write{2147483647,-1}
temp	int	$tmp34	%read{88,88} %write{87,87}
const	string	$const29	"safe_modulo"		%read{89,89} %write{2147483647,-1}
temp	int	$tmp35	%read{91,91} %write{90,90}
const	string	$const30	"floored_modulo"		%read{95,95} %write{2147483647,-1}
temp	int	$tmp36	%read{96,96} %write{95,95}
const	string	$const31	"safe_floored_modulo"		%read{97,97} %write{2147483647,-1}
temp	int	$tmp37	%read{99,99} %write{98,98}
temp	float	$tmp38	%read{102,102} %write{101,101}
temp	float	$tmp39	%read{101,101} %write{100,100}
temp	float	$tmp40	%read{103,103} %write{102,102}
const	string	$const32	"trunc"		%read{106,106} %write{2147483647,-1}
temp	int	$tmp41	%read{107,107} %write{106,106}
const	string	$const33	"snap"		%read{109,109} %write{2147483647,-1}
temp	int	$tmp42	%read{110,110} %write{109,109}
temp	float	$tmp43	%read{118,118} %write{117,117}
temp	float	$tmp44	%read{117,117} %write{114,115}
temp	int	$tmp45	%read{113,113} %write{112,112}
const	string	$const34	"wrap"		%read{119,121} %write{2147483647,-1}
temp	int	$tmp46	%read{120,120} %write{119,119}
temp	int	$tmp47	%read{124,124} %write{123,123}
temp	float	$tmp48	%read{128,128} %write{127,127}
temp	float	$tmp49	%read{126,126} %write{125,125}
temp	float	$tmp50	%read{127,127} %write{126,126}
temp	float	$tmp51	%read{129,129} %write{128,128}
const	string	$const35	"pingpong"		%read{132,134} %write{2147483647,-1}
temp	int	$tmp52	%read{133,133} %write{132,132}
temp	int	$tmp53	%read{136,136} %write{135,135}
temp	float	$tmp54	%read{143,143} %write{142,142}
temp	float	$tmp55	%read{139,139} %write{137,137}
const	float	$const36	2		%read{138,144} %write{2147483647,-1}
temp	float	$tmp56	%read{139,139} %write{138,138}
temp	float	$tmp57	%read{141,142} %write{139,139}
const	string	$const37	"fract"		%read{140,140} %write{2147483647,-1}
temp	float	$tmp58	%read{142,142} %write{141,141}
temp	float	$tmp59	%read{144,144} %write{143,143}
temp	float	$tmp60	%read{145,145} %write{144,144}
temp	float	$tmp61	%read{146,146} %write{145,145}
const	string	$const38	"sine"		%read{149,149} %write{2147483647,-1}
temp	int	$tmp62	%read{150,150} %write{149,149}
const	string	$const39	"cosine"		%read{152,152} %write{2147483647,-1}
temp	int	$tmp63	%read{153,153} %write{152,152}
const	string	$const40	"tangent"		%read{155,155} %write{2147483647,-1}
temp	int	$tmp64	%read{156,156} %write{155,155}
const	string	$const41	"sinh"		%read{158,158} %write{2147483647,-1}
temp	int	$tmp65	%read{159,159} %write{158,158}
const	string	$const42	"cosh"		%read{161,161} %write{2147483647,-1}
temp	int	$tmp66	%read{162,162} %write{161,161}
const	string	$const43	"tanh"		%read{164,164} %write{2147483647,-1}
temp	int	$tmp67	%read{165,165} %write{164,164}
const	string	$const44	"arcsine"		%read{167,167} %write{2147483647,-1}
temp	int	$tmp68	%read{168,168} %write{167,167}
const	string	$const45	"arccosine"		%read{170,170} %write{2147483647,-1}
temp	int	$tmp69	%read{171,171} %write{170,170}
const	string	$const46	"arctangent"		%read{173,173} %write{2147483647,-1}
temp	int	$tmp70	%read{174,174} %write{173,173}
const	string	$const47	"arctan2"		%read{176,176} %write{2147483647,-1}
temp	int	$tmp71	%read{177,177} %write{176,176}
const	string	$const48	"sign"		%read{179,179} %write{2147483647,-1}
temp	int	$tmp72	%read{180,180} %write{179,179}
const	string	$const49	"exponent"		%read{182,182} %write{2147483647,-1}
temp	int	$tmp73	%read{183,183} %write{182,182}
const	string	$const50	"compare"		%read{185,185} %write{2147483647,-1}
temp	int	$tmp74	%read{186,186} %write{185,185}
temp	int	$tmp75	%read{188,188} %write{187,187}
temp	int	$tmp76	%read{189,196} %write{188,195}
temp	float	$tmp77	%read{193,193} %write{191,191}
temp	float	$tmp78	%read{191,191} %write{190,190}
temp	float	$tmp79	%read{193,193} %write{192,192}
const	float	$const51	1e-05		%read{192,192} %write{2147483647,-1}
temp	int	$tmp80	%read{194,194} %write{193,193}
temp	int	$tmp81	%read{195,195} %write{194,194}
const	float	$const52	1		%read{197,239} %write{2147483647,-1}
const	string	$const53	"multiply_add"		%read{199,199} %write{2147483647,-1}
temp	int	$tmp82	%read{200,200} %write{199,199}
temp	float	$tmp83	%read{202,202} %write{201,201}
const	string	$const54	"smoothmin"		%read{203,227} %write{2147483647,-1}
temp	int	$tmp84	%read{204,204} %write{203,203}
temp	int	$tmp85	%read{207,207} %write{206,206}
temp	float	$tmp86	%read{212,212} %write{211,211}
temp	float	$tmp87	%read{210,210} %write{209,209}
temp	float	$tmp88	%read{209,209} %write{208,208}
temp	float	$tmp89	%read{211,211} %write{210,210}
temp	float	$tmp90	%read{219,219} %write{213,213}
temp	float	$tmp91	%read{215,215} %write{214,214}
temp	float	$tmp92	%read{216,216} %write{215,215}
temp	float	$tmp93	%read{218,218} %write{216,216}
const	float	$const55	6		%read{217,239} %write{2147483647,-1}
temp	float	$tmp94	%read{218,218} %write{217,217}
temp	float	$tmp95	%read{219,219} %write{218,218}
const	string	$const56	"smoothmax"		%read{223,223} %write{2147483647,-1}
temp	int	$tmp96	%read{224,224} %write{223,223}
temp	float	$tmp97	%read{245,245} %write{241,243}
temp	float	$tmp98	%read{230,243} %write{225,225}
temp	float	$tmp99	%read{230,243} %write{226,226}
temp	int	$tmp100	%read{229,229} %write{228,228}
temp	float	$tmp101	%read{234,234} %write{233,233}
temp	float	$tmp102	%read{232,232} %write{231,231}
temp	float	$tmp103	%read{231,231} %write{230,230}
temp	float	$tmp104	%read{233,233} %write{232,232}
temp	float	$tmp105	%read{241,241} %write{235,235}
temp	float	$tmp106	%read{237,237} %write{236,236}
temp	float	$tmp107	%read{238,238} %write{237,237}
temp	float	$tmp108	%read{240,240} %write{238,238}
temp	float	$tmp109	%read{240,240} %write{239,239}
temp	float	$tmp110	%read{241,241} %write{240,240}
const	string	$const57	"%s"		%read{246,246} %write{2147483647,-1}
const	string	$const58	"Unknown math operator!"		%read{246,246} %write{2147483647,-1}
code ___main___
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:15
#   if (math_type == "add")
	eq		$tmp1 math_type $const1 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{15} %argrw{"wrr"}
	if		$tmp1 3 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:16
#     Value = Value1 + Value2;
	add		Value Value1 Value2 	%line{16} %argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:17
#   else if (math_type == "subtract")
	eq		$tmp2 math_type $const2 	%line{17} %argrw{"wrr"}
	if		$tmp2 6 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:18
#     Value = Value1 - Value2;
	sub		Value Value1 Value2 	%line{18} %argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:19
#   else if (math_type == "multiply")
	eq		$tmp3 math_type $const3 	%line{19} %argrw{"wrr"}
	if		$tmp3 9 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:20
#     Value = Value1 * Value2;
	mul		Value Value1 Value2 	%line{20} %argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:21
#   else if (math_type == "divide")
	eq		$tmp4 math_type $const4 	%line{21} %argrw{"wrr"}
	if		$tmp4 17 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:22
#     Value = safe_divide(Value1, Value2);
	functioncall	$const5 17 	%line{22} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:7
#   return (b != 0.0) ? a / b : 0.0;
	neq		$tmp5 Value2 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{7} %argrw{"wrr"}
	if		$tmp5 15 16 	%argrw{"r"}
	div		Value Value1 Value2 	%argrw{"wrr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:23
#   else if (math_type == "power")
	eq		$tmp6 math_type $const7 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{23} %argrw{"wrr"}
	if		$tmp6 20 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:24
#     Value = pow(Value1, Value2);
	pow		Value Value1 Value2 	%line{24} %argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:25
#   else if (math_type == "logarithm")
	eq		$tmp7 math_type $const8 	%line{25} %argrw{"wrr"}
	if		$tmp7 35 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:26
#     Value = safe_log(Value1, Value2);
	functioncall	$const9 35 	%line{26} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:56
#   return (a > 0.0 && b > 0.0) ? log(a) / log(b) : 0.0;
	gt		$tmp8 Value1 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{56} %argrw{"wrr"}
	neq		$tmp9 $tmp8 $const10 	%argrw{"wrr"}
	if		$tmp9 29 29 	%argrw{"r"}
	gt		$tmp10 Value2 $const6 	%argrw{"wrr"}
	neq		$tmp11 $tmp10 $const10 	%argrw{"wrr"}
	assign		$tmp9 $tmp11 	%argrw{"wr"}
	if		$tmp9 33 34 	%argrw{"r"}
	log		$tmp12 Value1 	%argrw{"wr"}
	log		$tmp13 Value2 	%argrw{"wr"}
	div		Value $tmp12 $tmp13 	%argrw{"wrr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:27
#   else if (math_type == "sqrt")
	eq		$tmp14 math_type $const11 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{27} %argrw{"wrr"}
	if		$tmp14 43 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:28
#     Value = safe_sqrt(Value1);
	functioncall	$const12 43 	%line{28} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:51
#   return (a > 0.0) ? sqrt(a) : 0.0;
	gt		$tmp15 Value1 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{51} %argrw{"wrr"}
	if		$tmp15 41 42 	%argrw{"r"}
	sqrt		Value Value1 	%argrw{"wr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:29
#   else if (math_type == "inversesqrt")
	eq		$tmp16 math_type $const13 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{29} %argrw{"wrr"}
	if		$tmp16 46 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:30
#     Value = inversesqrt(Value1);
	inversesqrt	Value Value1 	%line{30} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:31
#   else if (math_type == "absolute")
	eq		$tmp17 math_type $const14 	%line{31} %argrw{"wrr"}
	if		$tmp17 49 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:32
#     Value = fabs(Value1);
	fabs		Value Value1 	%line{32} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:33
#   else if (math_type == "radians")
	eq		$tmp18 math_type $const15 	%line{33} %argrw{"wrr"}
	if		$tmp18 54 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:34
#     Value = radians(Value1);
	functioncall	$const15 54 	%line{34} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp19 $const16 $const17 	%filename{"C:/Users/blender/git/blender-v400/blender.git/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
	mul		Value Value1 $tmp19 	%argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:35
#   else if (math_type == "degrees")
	eq		$tmp20 math_type $const18 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{35} %argrw{"wrr"}
	if		$tmp20 59 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:36
#     Value = degrees(Value1);
	functioncall	$const18 59 	%line{36} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:60
# float  degrees (float x)  { return x*(180.0/M_PI); }
	div		$tmp21 $const17 $const16 	%filename{"C:/Users/blender/git/blender-v400/blender.git/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{60} %argrw{"wrr"}
	mul		Value Value1 $tmp21 	%argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:37
#   else if (math_type == "minimum")
	eq		$tmp22 math_type $const19 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{37} %argrw{"wrr"}
	if		$tmp22 62 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:38
#     Value = min(Value1, Value2);
	min		Value Value1 Value2 	%line{38} %argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:39
#   else if (math_type == "maximum")
	eq		$tmp23 math_type $const20 	%line{39} %argrw{"wrr"}
	if		$tmp23 65 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:40
#     Value = max(Value1, Value2);
	max		Value Value1 Value2 	%line{40} %argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:41
#   else if (math_type == "less_than")
	eq		$tmp24 math_type $const21 	%line{41} %argrw{"wrr"}
	if		$tmp24 69 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:42
#     Value = Value1 < Value2;
	lt		$tmp25 Value1 Value2 	%line{42} %argrw{"wrr"}
	assign		Value $tmp25 	%argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:43
#   else if (math_type == "greater_than")
	eq		$tmp26 math_type $const22 	%line{43} %argrw{"wrr"}
	if		$tmp26 73 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:44
#     Value = Value1 > Value2;
	gt		$tmp27 Value1 Value2 	%line{44} %argrw{"wrr"}
	assign		Value $tmp27 	%argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:45
#   else if (math_type == "round")
	eq		$tmp28 math_type $const23 	%line{45} %argrw{"wrr"}
	if		$tmp28 77 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:46
#     Value = floor(Value1 + 0.5);
	add		$tmp29 Value1 $const24 	%line{46} %argrw{"wrr"}
	floor		Value $tmp29 	%argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:47
#   else if (math_type == "floor")
	eq		$tmp30 math_type $const25 	%line{47} %argrw{"wrr"}
	if		$tmp30 80 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:48
#     Value = floor(Value1);
	floor		Value Value1 	%line{48} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:49
#   else if (math_type == "ceil")
	eq		$tmp31 math_type $const26 	%line{49} %argrw{"wrr"}
	if		$tmp31 83 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:50
#     Value = ceil(Value1);
	ceil		Value Value1 	%line{50} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:51
#   else if (math_type == "fraction")
	eq		$tmp32 math_type $const27 	%line{51} %argrw{"wrr"}
	if		$tmp32 87 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:52
#     Value = Value1 - floor(Value1);
	floor		$tmp33 Value1 	%line{52} %argrw{"wr"}
	sub		Value Value1 $tmp33 	%argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:53
#   else if (math_type == "modulo")
	eq		$tmp34 math_type $const28 	%line{53} %argrw{"wrr"}
	if		$tmp34 95 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:54
#     Value = safe_modulo(Value1, Value2);
	functioncall	$const29 95 	%line{54} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:19
#   return (b != 0.0) ? fmod(a, b) : 0.0;
	neq		$tmp35 Value2 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{19} %argrw{"wrr"}
	if		$tmp35 93 94 	%argrw{"r"}
	fmod		Value Value1 Value2 	%argrw{"wrr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:55
#   else if (math_type == "floored_modulo")
	eq		$tmp36 math_type $const30 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{55} %argrw{"wrr"}
	if		$tmp36 106 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:56
#     Value = safe_floored_modulo(Value1, Value2);
	functioncall	$const31 106 	%line{56} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:24
#   return (b != 0.0) ? a - floor(a / b) * b : 0.0;
	neq		$tmp37 Value2 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{24} %argrw{"wrr"}
	if		$tmp37 104 105 	%argrw{"r"}
	div		$tmp39 Value1 Value2 	%argrw{"wrr"}
	floor		$tmp38 $tmp39 	%argrw{"wr"}
	mul		$tmp40 $tmp38 Value2 	%argrw{"wrr"}
	sub		Value Value1 $tmp40 	%argrw{"wrr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:57
#   else if (math_type == "trunc")
	eq		$tmp41 math_type $const32 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{57} %argrw{"wrr"}
	if		$tmp41 109 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:58
#     Value = trunc(Value1);
	trunc		Value Value1 	%line{58} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:59
#   else if (math_type == "snap")
	eq		$tmp42 math_type $const33 	%line{59} %argrw{"wrr"}
	if		$tmp42 119 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:60
#     Value = floor(safe_divide(Value1, Value2)) * Value2;
	functioncall	$const5 117 	%line{60} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:7
#   return (b != 0.0) ? a / b : 0.0;
	neq		$tmp45 Value2 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{7} %argrw{"wrr"}
	if		$tmp45 115 116 	%argrw{"r"}
	div		$tmp44 Value1 Value2 	%argrw{"wrr"}
	assign		$tmp44 $const6 	%argrw{"wr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:60
#     Value = floor(safe_divide(Value1, Value2)) * Value2;
	floor		$tmp43 $tmp44 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{60} %argrw{"wr"}
	mul		Value $tmp43 Value2 	%argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:61
#   else if (math_type == "wrap")
	eq		$tmp46 math_type $const34 	%line{61} %argrw{"wrr"}
	if		$tmp46 132 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:62
#     Value = wrap(Value1, Value2, Value3);
	functioncall	$const34 132 	%line{62} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:73
#   float range = max - min;
	sub		___357_range Value2 Value3 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{73} %argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:74
#   return (range != 0.0) ? value - (range * floor((value - min) / range)) : min;
	neq		$tmp47 ___357_range $const6 	%line{74} %argrw{"wrr"}
	if		$tmp47 130 131 	%argrw{"r"}
	sub		$tmp49 Value1 Value3 	%argrw{"wrr"}
	div		$tmp50 $tmp49 ___357_range 	%argrw{"wrr"}
	floor		$tmp48 $tmp50 	%argrw{"wr"}
	mul		$tmp51 ___357_range $tmp48 	%argrw{"wrr"}
	sub		Value Value1 $tmp51 	%argrw{"wrr"}
	assign		Value Value3 	%argrw{"wr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:63
#   else if (math_type == "pingpong")
	eq		$tmp52 math_type $const35 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{63} %argrw{"wrr"}
	if		$tmp52 149 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:64
#     Value = pingpong(Value1, Value2);
	functioncall	$const35 149 	%line{64} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:46
#   return (b != 0.0) ? abs(fract((a - b) / (b * 2.0)) * b * 2.0 - b) : 0.0;
	neq		$tmp53 Value2 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{46} %argrw{"wrr"}
	if		$tmp53 147 148 	%argrw{"r"}
	sub		$tmp55 Value1 Value2 	%argrw{"wrr"}
	mul		$tmp56 Value2 $const36 	%argrw{"wrr"}
	div		$tmp57 $tmp55 $tmp56 	%argrw{"wrr"}
	functioncall	$const37 143 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:29
#   return a - floor(a);
	floor		$tmp58 $tmp57 	%line{29} %argrw{"wr"}
	sub		$tmp54 $tmp57 $tmp58 	%argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:46
#   return (b != 0.0) ? abs(fract((a - b) / (b * 2.0)) * b * 2.0 - b) : 0.0;
	mul		$tmp59 $tmp54 Value2 	%line{46} %argrw{"wrr"}
	mul		$tmp60 $tmp59 $const36 	%argrw{"wrr"}
	sub		$tmp61 $tmp60 Value2 	%argrw{"wrr"}
	abs		Value $tmp61 	%argrw{"wr"}
	assign		Value $const6 	%argrw{"wr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:65
#   else if (math_type == "sine")
	eq		$tmp62 math_type $const38 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{65} %argrw{"wrr"}
	if		$tmp62 152 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:66
#     Value = sin(Value1);
	sin		Value Value1 	%line{66} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:67
#   else if (math_type == "cosine")
	eq		$tmp63 math_type $const39 	%line{67} %argrw{"wrr"}
	if		$tmp63 155 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:68
#     Value = cos(Value1);
	cos		Value Value1 	%line{68} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:69
#   else if (math_type == "tangent")
	eq		$tmp64 math_type $const40 	%line{69} %argrw{"wrr"}
	if		$tmp64 158 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:70
#     Value = tan(Value1);
	tan		Value Value1 	%line{70} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:71
#   else if (math_type == "sinh")
	eq		$tmp65 math_type $const41 	%line{71} %argrw{"wrr"}
	if		$tmp65 161 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:72
#     Value = sinh(Value1);
	sinh		Value Value1 	%line{72} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:73
#   else if (math_type == "cosh")
	eq		$tmp66 math_type $const42 	%line{73} %argrw{"wrr"}
	if		$tmp66 164 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:74
#     Value = cosh(Value1);
	cosh		Value Value1 	%line{74} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:75
#   else if (math_type == "tanh")
	eq		$tmp67 math_type $const43 	%line{75} %argrw{"wrr"}
	if		$tmp67 167 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:76
#     Value = tanh(Value1);
	tanh		Value Value1 	%line{76} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:77
#   else if (math_type == "arcsine")
	eq		$tmp68 math_type $const44 	%line{77} %argrw{"wrr"}
	if		$tmp68 170 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:78
#     Value = asin(Value1);
	asin		Value Value1 	%line{78} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:79
#   else if (math_type == "arccosine")
	eq		$tmp69 math_type $const45 	%line{79} %argrw{"wrr"}
	if		$tmp69 173 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:80
#     Value = acos(Value1);
	acos		Value Value1 	%line{80} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:81
#   else if (math_type == "arctangent")
	eq		$tmp70 math_type $const46 	%line{81} %argrw{"wrr"}
	if		$tmp70 176 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:82
#     Value = atan(Value1);
	atan		Value Value1 	%line{82} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:83
#   else if (math_type == "arctan2")
	eq		$tmp71 math_type $const47 	%line{83} %argrw{"wrr"}
	if		$tmp71 179 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:84
#     Value = atan2(Value1, Value2);
	atan2		Value Value1 Value2 	%line{84} %argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:85
#   else if (math_type == "sign")
	eq		$tmp72 math_type $const48 	%line{85} %argrw{"wrr"}
	if		$tmp72 182 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:86
#     Value = sign(Value1);
	sign		Value Value1 	%line{86} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:87
#   else if (math_type == "exponent")
	eq		$tmp73 math_type $const49 	%line{87} %argrw{"wrr"}
	if		$tmp73 185 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:88
#     Value = exp(Value1);
	exp		Value Value1 	%line{88} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:89
#   else if (math_type == "compare")
	eq		$tmp74 math_type $const50 	%line{89} %argrw{"wrr"}
	if		$tmp74 199 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:90
#     Value = ((Value1 == Value2) || (abs(Value1 - Value2) <= max(Value3, 1e-5))) ? 1.0 : 0.0;
	eq		$tmp75 Value1 Value2 	%line{90} %argrw{"wrr"}
	neq		$tmp76 $tmp75 $const10 	%argrw{"wrr"}
	if		$tmp76 190 196 	%argrw{"r"}
	sub		$tmp78 Value1 Value2 	%argrw{"wrr"}
	abs		$tmp77 $tmp78 	%argrw{"wr"}
	max		$tmp79 Value3 $const51 	%argrw{"wrr"}
	le		$tmp80 $tmp77 $tmp79 	%argrw{"wrr"}
	neq		$tmp81 $tmp80 $const10 	%argrw{"wrr"}
	assign		$tmp76 $tmp81 	%argrw{"wr"}
	if		$tmp76 198 199 	%argrw{"r"}
	assign		Value $const52 	%argrw{"wr"}
	assign		Value $const6 	%argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:91
#   else if (math_type == "multiply_add")
	eq		$tmp82 math_type $const53 	%line{91} %argrw{"wrr"}
	if		$tmp82 203 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:92
#     Value = Value1 * Value2 + Value3;
	mul		$tmp83 Value1 Value2 	%line{92} %argrw{"wrr"}
	add		Value $tmp83 Value3 	%argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:93
#   else if (math_type == "smoothmin")
	eq		$tmp84 math_type $const54 	%line{93} %argrw{"wrr"}
	if		$tmp84 223 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:94
#     Value = smoothmin(Value1, Value2, Value3);
	functioncall	$const54 223 	%line{94} %argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:35
#   if (c != 0.0) {
	neq		$tmp85 Value3 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{35} %argrw{"wrr"}
	if		$tmp85 221 223 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:36
#     float h = max(c - abs(a - b), 0.0) / c;
	sub		$tmp88 Value1 Value2 	%line{36} %argrw{"wrr"}
	abs		$tmp87 $tmp88 	%argrw{"wr"}
	sub		$tmp89 Value3 $tmp87 	%argrw{"wrr"}
	max		$tmp86 $tmp89 $const6 	%argrw{"wrr"}
	div		___350_h $tmp86 Value3 	%argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:37
#     return min(a, b) - h * h * h * c * (1.0 / 6.0);
	min		$tmp90 Value1 Value2 	%line{37} %argrw{"wrr"}
	mul		$tmp91 ___350_h ___350_h 	%argrw{"wrr"}
	mul		$tmp92 $tmp91 ___350_h 	%argrw{"wrr"}
	mul		$tmp93 $tmp92 Value3 	%argrw{"wrr"}
	div		$tmp94 $const52 $const55 	%argrw{"wrr"}
	mul		$tmp95 $tmp93 $tmp94 	%argrw{"wrr"}
	sub		Value $tmp90 $tmp95 	%argrw{"wrr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:40
#     return min(a, b);
	min		Value Value1 Value2 	%line{40} %argrw{"wrr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:95
#   else if (math_type == "smoothmax")
	eq		$tmp96 math_type $const56 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{95} %argrw{"wrr"}
	if		$tmp96 246 247 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:96
#     Value = -(smoothmin(-Value1, -Value2, Value3));
	neg		$tmp98 Value1 	%line{96} %argrw{"wr"}
	neg		$tmp99 Value2 	%argrw{"wr"}
	functioncall	$const54 245 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:35
#   if (c != 0.0) {
	neq		$tmp100 Value3 $const6 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h"} %line{35} %argrw{"wrr"}
	if		$tmp100 243 245 	%argrw{"r"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:36
#     float h = max(c - abs(a - b), 0.0) / c;
	sub		$tmp103 $tmp98 $tmp99 	%line{36} %argrw{"wrr"}
	abs		$tmp102 $tmp103 	%argrw{"wr"}
	sub		$tmp104 Value3 $tmp102 	%argrw{"wrr"}
	max		$tmp101 $tmp104 $const6 	%argrw{"wrr"}
	div		___350_h $tmp101 Value3 	%argrw{"wrr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:37
#     return min(a, b) - h * h * h * c * (1.0 / 6.0);
	min		$tmp105 $tmp98 $tmp99 	%line{37} %argrw{"wrr"}
	mul		$tmp106 ___350_h ___350_h 	%argrw{"wrr"}
	mul		$tmp107 $tmp106 ___350_h 	%argrw{"wrr"}
	mul		$tmp108 $tmp107 Value3 	%argrw{"wrr"}
	div		$tmp109 $const52 $const55 	%argrw{"wrr"}
	mul		$tmp110 $tmp108 $tmp109 	%argrw{"wrr"}
	sub		$tmp97 $tmp105 $tmp110 	%argrw{"wrr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders\\node_math.h:40
#     return min(a, b);
	min		$tmp97 $tmp98 $tmp99 	%line{40} %argrw{"wrr"}
	return
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:96
#     Value = -(smoothmin(-Value1, -Value2, Value3));
	neg		Value $tmp97 	%filename{"C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl"} %line{96} %argrw{"wr"}
# C:/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_math.osl:98
#     warning("%s", "Unknown math operator!");
	warning		$const57 $const58 	%line{98} %argrw{"rr"}
	end
