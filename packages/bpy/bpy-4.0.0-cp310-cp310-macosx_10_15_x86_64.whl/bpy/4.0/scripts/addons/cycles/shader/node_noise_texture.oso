OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.1
# options: -q -O2 -I/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders -I/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders -o /Users/blender/git/blender-v400/build_x86_64_release/intern/cycles/kernel/osl/shaders/node_noise_texture.oso
shader node_noise_texture
param	int	use_mapping	0		%read{1,1} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{2,2} %write{2147483647,-1}
param	string	dimensions	"3D"		%read{5,789} %write{2147483647,-1}
param	int	use_normalize	0		%read{70,1191} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{0,0} %write{2147483647,-1}
param	float	W	0		%read{4,4} %write{2147483647,-1}
param	float	Scale	5		%read{3,4} %write{2147483647,-1}
param	float	Detail	2		%read{31,1121} %write{2147483647,-1}
param	float	Roughness	0.5		%read{50,1150} %write{2147483647,-1}
param	float	Lacunarity	2		%read{53,1153} %write{2147483647,-1}
param	float	Distortion	0		%read{9,909} %write{2147483647,-1}
oparam	float	Fac	0		%read{2147483647,-1} %write{222,1198}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{221,1197}
local	float	___464_f	%read{18,201} %write{17,196}
local	float	___466_f	%read{244,487} %write{243,482}
local	float	___468_f	%read{529,767} %write{528,762}
local	float	___470_f	%read{823,1177} %write{822,1172}
local	float	___472_fscale	%read{36,194} %write{26,189}
local	float	___472_amp	%read{36,209} %write{27,189}
local	float	___472_maxamp	%read{36,217} %write{28,189}
local	float	___472_sum	%read{36,219} %write{29,189}
local	float	___472_octaves	%read{33,191} %write{32,166}
local	int	___472_n	%read{36,189} %write{33,167}
local	int	___473_i	%read{36,189} %write{35,189}
local	float	___474_t	%read{36,189} %write{36,189}
local	float	___472_rmd	%read{58,213} %write{57,191}
local	float	___475_t	%read{68,202} %write{65,201}
local	float	___475_sum2	%read{74,213} %write{69,203}
local	float	___477_fscale	%read{282,477} %write{272,470}
local	float	___477_amp	%read{282,495} %write{273,470}
local	float	___477_maxamp	%read{282,503} %write{274,470}
local	float	___477_sum	%read{282,505} %write{275,470}
local	float	___477_octaves	%read{279,472} %write{278,442}
local	int	___477_n	%read{282,470} %write{279,443}
local	int	___478_i	%read{282,470} %write{281,470}
local	float	___479_t	%read{282,470} %write{282,470}
local	float	___477_rmd	%read{309,499} %write{308,472}
local	float	___480_t	%read{324,488} %write{321,487}
local	float	___480_sum2	%read{330,499} %write{325,489}
local	float	___482_fscale	%read{588,760} %write{578,755}
local	float	___482_amp	%read{588,775} %write{579,755}
local	float	___482_maxamp	%read{588,783} %write{580,755}
local	float	___482_sum	%read{588,785} %write{581,755}
local	float	___482_octaves	%read{585,757} %write{584,732}
local	int	___482_n	%read{588,755} %write{585,733}
local	int	___483_i	%read{588,755} %write{587,755}
local	float	___484_t	%read{588,755} %write{588,755}
local	float	___482_rmd	%read{610,779} %write{609,757}
local	float	___485_t	%read{620,768} %write{617,767}
local	float	___485_sum2	%read{626,779} %write{621,769}
local	float	___487_fscale	%read{926,1164} %write{916,1155}
local	float	___487_amp	%read{926,1185} %write{917,1155}
local	float	___487_maxamp	%read{926,1193} %write{918,1155}
local	float	___487_sum	%read{926,1195} %write{919,1155}
local	float	___487_octaves	%read{923,1157} %write{922,1122}
local	int	___487_n	%read{926,1155} %write{923,1123}
local	int	___488_i	%read{926,1155} %write{925,1155}
local	float	___489_t	%read{926,1155} %write{926,1155}
local	float	___487_rmd	%read{958,1189} %write{957,1157}
local	float	___490_t	%read{978,1178} %write{975,1177}
local	float	___490_sum2	%read{984,1189} %write{979,1179}
local	float	___513_p	%read{15,158} %write{8,24}
local	float	___513_value	%read{221,222} %write{78,85}
local	float	___515_p.x	%read{240,433} %write{228,269} %mystruct{___515_p} %mystructfield{0}
local	float	___515_p.y	%read{241,434} %write{229,270} %mystruct{___515_p} %mystructfield{1}
local	float	___515_value	%read{507,508} %write{334,341}
local	point	___517_p	%read{526,724} %write{512,576}
local	float	___517_value	%read{787,788} %write{630,637}
local	float	___519_p.x	%read{816,1111} %write{796,911} %mystruct{___519_p} %mystructfield{0}
local	float	___519_p.y	%read{817,1112} %write{797,912} %mystruct{___519_p} %mystructfield{1}
local	float	___519_p.z	%read{818,1113} %write{798,913} %mystruct{___519_p} %mystructfield{2}
local	float	___519_p.w	%read{819,1114} %write{799,914} %mystruct{___519_p} %mystructfield{3}
local	float	___519_value	%read{1197,1198} %write{988,995}
local	point	p	%read{2,793} %write{0,3}
local	float	w	%read{8,794} %write{4,4}
const	string	$const1	"1D"		%read{5,5} %write{2147483647,-1}
temp	int	$tmp1	%read{6,6} %write{5,5}
const	string	$const2	"noise_texture"		%read{7,795} %write{2147483647,-1}
const	float	$const3	0		%read{9,1175} %write{2147483647,-1}
temp	int	$tmp2	%read{10,10} %write{9,9}
temp	float	$tmp3	%read{23,23} %write{20,22}
temp	float	$tmp4	%read{15,15} %write{14,14}
const	string	$const4	"random_float_offset"		%read{11,154} %write{2147483647,-1}
const	float	$const5	100		%read{13,1109} %write{2147483647,-1}
temp	float	$tmp5	%read{13,13} %write{12,12}
const	string	$const6	"hash"		%read{12,1107} %write{2147483647,-1}
temp	float	$tmp6	%read{14,14} %write{13,13}
temp	float	$tmp7	%read{17,17} %write{15,15}
const	string	$const7	"safe_snoise"		%read{16,1170} %write{2147483647,-1}
const	string	$const8	"snoise"		%read{17,1172} %write{2147483647,-1}
temp	int	$tmp8	%read{19,19} %write{18,18}
temp	float	$tmp9	%read{24,24} %write{23,23}
const	string	$const9	"fractal_noise"		%read{25,1115} %write{2147483647,-1}
const	float	$const10	1		%read{26,1150} %write{2147483647,-1}
const	float	$const11	15		%read{31,1121} %write{2147483647,-1}
const	string	$const12	"clamp"		%read{30,1149} %write{2147483647,-1}
temp	float	$tmp10	%read{32,32} %write{31,31}
const	int	$const13	0		%read{35,1127} %write{2147483647,-1}
temp	int	$tmp11	%read{36,55} %write{36,55}
temp	int	$tmp12	%read{34,55} %write{35,55}
temp	float	$tmp13	%read{36,55} %write{36,55}
temp	int	$tmp14	%read{36,55} %write{36,55}
temp	float	$tmp15	%read{36,55} %write{36,55}
temp	float	$tmp16	%read{36,55} %write{36,55}
temp	float	$tmp17	%read{36,55} %write{36,55}
const	int	$const14	1		%read{55,1155} %write{2147483647,-1}
temp	int	$tmp18	%read{2147483647,-1} %write{36,55}
temp	float	$tmp19	%read{57,57} %write{56,56}
temp	int	$tmp20	%read{59,59} %write{58,58}
temp	float	$tmp21	%read{62,62} %write{60,60}
temp	int	$tmp22	%read{64,64} %write{63,63}
temp	float	$tmp23	%read{69,69} %write{68,68}
const	float	$const15	0.5		%read{71,1194} %write{2147483647,-1}
temp	float	$tmp24	%read{72,72} %write{71,71}
temp	float	$tmp25	%read{73,73} %write{72,72}
temp	float	$tmp26	%read{78,78} %write{73,73}
temp	float	$tmp27	%read{76,76} %write{74,74}
temp	float	$tmp28	%read{76,76} %write{75,75}
temp	float	$tmp29	%read{77,77} %write{76,76}
temp	float	$tmp30	%read{78,78} %write{77,77}
temp	float	$tmp31	%read{83,83} %write{82,82}
temp	float	$tmp32	%read{84,84} %write{83,83}
temp	float	$tmp33	%read{221,221} %write{145,152}
temp	float	$tmp34	%read{91,91} %write{90,90}
temp	float	$tmp35	%read{89,89} %write{88,88}
temp	float	$tmp36	%read{90,90} %write{89,89}
temp	float	$tmp37	%read{103,127} %write{91,91}
temp	float	$tmp38	%read{99,99} %write{98,98}
temp	int	$tmp39	%read{103,122} %write{103,122}
temp	int	$tmp40	%read{101,122} %write{102,122}
temp	float	$tmp41	%read{103,122} %write{103,122}
temp	int	$tmp42	%read{103,122} %write{103,122}
temp	float	$tmp43	%read{103,122} %write{103,122}
temp	float	$tmp44	%read{103,122} %write{103,122}
temp	float	$tmp45	%read{103,122} %write{103,122}
temp	int	$tmp46	%read{2147483647,-1} %write{103,122}
temp	float	$tmp47	%read{124,124} %write{123,123}
temp	int	$tmp48	%read{126,126} %write{125,125}
temp	float	$tmp49	%read{129,129} %write{127,127}
temp	int	$tmp50	%read{131,131} %write{130,130}
temp	float	$tmp51	%read{136,136} %write{135,135}
temp	float	$tmp52	%read{139,139} %write{138,138}
temp	float	$tmp53	%read{140,140} %write{139,139}
temp	float	$tmp54	%read{145,145} %write{140,140}
temp	float	$tmp55	%read{143,143} %write{141,141}
temp	float	$tmp56	%read{143,143} %write{142,142}
temp	float	$tmp57	%read{144,144} %write{143,143}
temp	float	$tmp58	%read{145,145} %write{144,144}
temp	float	$tmp59	%read{150,150} %write{149,149}
temp	float	$tmp60	%read{151,151} %write{150,150}
temp	float	$tmp61	%read{221,221} %write{212,219}
temp	float	$tmp62	%read{158,158} %write{157,157}
const	float	$const16	2		%read{155,1104} %write{2147483647,-1}
temp	float	$tmp63	%read{156,156} %write{155,155}
temp	float	$tmp64	%read{157,157} %write{156,156}
temp	float	$tmp65	%read{170,194} %write{158,158}
temp	float	$tmp66	%read{166,166} %write{165,165}
temp	int	$tmp67	%read{170,189} %write{170,189}
temp	int	$tmp68	%read{168,189} %write{169,189}
temp	float	$tmp69	%read{170,189} %write{170,189}
temp	int	$tmp70	%read{170,189} %write{170,189}
temp	float	$tmp71	%read{170,189} %write{170,189}
temp	float	$tmp72	%read{170,189} %write{170,189}
temp	float	$tmp73	%read{170,189} %write{170,189}
temp	int	$tmp74	%read{2147483647,-1} %write{170,189}
temp	float	$tmp75	%read{191,191} %write{190,190}
temp	int	$tmp76	%read{193,193} %write{192,192}
temp	float	$tmp77	%read{196,196} %write{194,194}
temp	int	$tmp78	%read{198,198} %write{197,197}
temp	float	$tmp79	%read{203,203} %write{202,202}
temp	float	$tmp80	%read{206,206} %write{205,205}
temp	float	$tmp81	%read{207,207} %write{206,206}
temp	float	$tmp82	%read{212,212} %write{207,207}
temp	float	$tmp83	%read{210,210} %write{208,208}
temp	float	$tmp84	%read{210,210} %write{209,209}
temp	float	$tmp85	%read{211,211} %write{210,210}
temp	float	$tmp86	%read{212,212} %write{211,211}
temp	float	$tmp87	%read{217,217} %write{216,216}
temp	float	$tmp88	%read{218,218} %write{217,217}
const	string	$const17	"2D"		%read{223,223} %write{2147483647,-1}
temp	int	$tmp89	%read{224,224} %write{223,223}
temp	float	$tmp90.x	%read{228,228} %write{225,225}
temp	float	$tmp90.y	%read{229,229} %write{226,226}
temp	int	$tmp91	%read{231,231} %write{230,230}
temp	float	$tmp92.x	%read{269,269} %write{249,249}
temp	float	$tmp92.y	%read{270,270} %write{267,267}
temp	float	$tmp93	%read{249,249} %write{246,248}
temp	float	$tmp94.x	%read{243,243} %write{240,240}
temp	float	$tmp94.y	%read{243,243} %write{241,241}
temp	float	$tmp95.x	%read{240,240} %write{235,235}
temp	float	$tmp95.y	%read{241,241} %write{238,238}
const	string	$const18	"random_vector2_offset"		%read{232,425} %write{2147483647,-1}
temp	float	$tmp96	%read{234,234} %write{233,233}
temp	float	$tmp97	%read{235,235} %write{234,234}
temp	float	$tmp98	%read{237,237} %write{236,236}
temp	float	$tmp99	%read{238,238} %write{237,237}
const	string	$const19	"__operator__add__"		%read{239,1110} %write{2147483647,-1}
temp	int	$tmp100	%read{245,245} %write{244,244}
temp	float	$tmp101	%read{267,267} %write{264,266}
temp	float	$tmp102.x	%read{261,261} %write{258,258}
temp	float	$tmp102.y	%read{261,261} %write{259,259}
temp	float	$tmp103.x	%read{258,258} %write{253,253}
temp	float	$tmp103.y	%read{259,259} %write{256,256}
temp	float	$tmp104	%read{252,252} %write{251,251}
temp	float	$tmp105	%read{253,253} %write{252,252}
temp	float	$tmp106	%read{255,255} %write{254,254}
temp	float	$tmp107	%read{256,256} %write{255,255}
temp	int	$tmp108	%read{263,263} %write{262,262}
temp	float	$tmp109	%read{278,278} %write{277,277}
temp	int	$tmp110	%read{282,306} %write{282,306}
temp	int	$tmp111	%read{280,306} %write{281,306}
temp	float	$tmp112.x	%read{282,306} %write{282,306}
temp	float	$tmp112.y	%read{282,306} %write{282,306}
const	string	$const20	"__operator__mul__"		%read{284,1165} %write{2147483647,-1}
temp	float	$tmp113.x	%read{282,306} %write{282,306}
temp	float	$tmp113.y	%read{282,306} %write{282,306}
temp	int	$tmp114	%read{282,306} %write{282,306}
temp	float	$tmp115	%read{282,306} %write{282,306}
temp	float	$tmp116	%read{282,306} %write{282,306}
temp	float	$tmp117	%read{282,306} %write{282,306}
temp	int	$tmp118	%read{2147483647,-1} %write{282,306}
temp	float	$tmp119	%read{308,308} %write{307,307}
temp	int	$tmp120	%read{310,310} %write{309,309}
temp	float	$tmp121.x	%read{318,318} %write{315,315}
temp	float	$tmp121.y	%read{318,318} %write{316,316}
temp	float	$tmp122.x	%read{315,315} %write{312,312}
temp	float	$tmp122.y	%read{316,316} %write{313,313}
temp	int	$tmp123	%read{320,320} %write{319,319}
temp	float	$tmp124	%read{325,325} %write{324,324}
temp	float	$tmp125	%read{328,328} %write{327,327}
temp	float	$tmp126	%read{329,329} %write{328,328}
temp	float	$tmp127	%read{334,334} %write{329,329}
temp	float	$tmp128	%read{332,332} %write{330,330}
temp	float	$tmp129	%read{332,332} %write{331,331}
temp	float	$tmp130	%read{333,333} %write{332,332}
temp	float	$tmp131	%read{334,334} %write{333,333}
temp	float	$tmp132	%read{339,339} %write{338,338}
temp	float	$tmp133	%read{340,340} %write{339,339}
temp	float	$tmp134	%read{507,507} %write{416,423}
temp	float	$tmp135.x	%read{364,397} %write{351,351}
temp	float	$tmp135.y	%read{364,398} %write{352,352}
temp	float	$tmp136.x	%read{351,351} %write{346,346}
temp	float	$tmp136.y	%read{352,352} %write{349,349}
temp	float	$tmp137	%read{345,345} %write{344,344}
temp	float	$tmp138	%read{346,346} %write{345,345}
temp	float	$tmp139	%read{348,348} %write{347,347}
temp	float	$tmp140	%read{349,349} %write{348,348}
temp	float	$tmp141	%read{360,360} %write{359,359}
temp	int	$tmp142	%read{364,388} %write{364,388}
temp	int	$tmp143	%read{362,388} %write{363,388}
temp	float	$tmp144.x	%read{364,388} %write{364,388}
temp	float	$tmp144.y	%read{364,388} %write{364,388}
temp	float	$tmp145.x	%read{364,388} %write{364,388}
temp	float	$tmp145.y	%read{364,388} %write{364,388}
temp	int	$tmp146	%read{364,388} %write{364,388}
temp	float	$tmp147	%read{364,388} %write{364,388}
temp	float	$tmp148	%read{364,388} %write{364,388}
temp	float	$tmp149	%read{364,388} %write{364,388}
temp	int	$tmp150	%read{2147483647,-1} %write{364,388}
temp	float	$tmp151	%read{390,390} %write{389,389}
temp	int	$tmp152	%read{392,392} %write{391,391}
temp	float	$tmp153.x	%read{400,400} %write{397,397}
temp	float	$tmp153.y	%read{400,400} %write{398,398}
temp	float	$tmp154.x	%read{397,397} %write{394,394}
temp	float	$tmp154.y	%read{398,398} %write{395,395}
temp	int	$tmp155	%read{402,402} %write{401,401}
temp	float	$tmp156	%read{407,407} %write{406,406}
temp	float	$tmp157	%read{410,410} %write{409,409}
temp	float	$tmp158	%read{411,411} %write{410,410}
temp	float	$tmp159	%read{416,416} %write{411,411}
temp	float	$tmp160	%read{414,414} %write{412,412}
temp	float	$tmp161	%read{414,414} %write{413,413}
temp	float	$tmp162	%read{415,415} %write{414,414}
temp	float	$tmp163	%read{416,416} %write{415,415}
temp	float	$tmp164	%read{421,421} %write{420,420}
temp	float	$tmp165	%read{422,422} %write{421,421}
temp	float	$tmp166	%read{507,507} %write{498,505}
temp	float	$tmp167.x	%read{446,479} %write{433,433}
temp	float	$tmp167.y	%read{446,480} %write{434,434}
temp	float	$tmp168.x	%read{433,433} %write{428,428}
temp	float	$tmp168.y	%read{434,434} %write{431,431}
const	float	$const21	3		%read{426,1107} %write{2147483647,-1}
temp	float	$tmp169	%read{427,427} %write{426,426}
temp	float	$tmp170	%read{428,428} %write{427,427}
temp	float	$tmp171	%read{430,430} %write{429,429}
temp	float	$tmp172	%read{431,431} %write{430,430}
temp	float	$tmp173	%read{442,442} %write{441,441}
temp	int	$tmp174	%read{446,470} %write{446,470}
temp	int	$tmp175	%read{444,470} %write{445,470}
temp	float	$tmp176.x	%read{446,470} %write{446,470}
temp	float	$tmp176.y	%read{446,470} %write{446,470}
temp	float	$tmp177.x	%read{446,470} %write{446,470}
temp	float	$tmp177.y	%read{446,470} %write{446,470}
temp	int	$tmp178	%read{446,470} %write{446,470}
temp	float	$tmp179	%read{446,470} %write{446,470}
temp	float	$tmp180	%read{446,470} %write{446,470}
temp	float	$tmp181	%read{446,470} %write{446,470}
temp	int	$tmp182	%read{2147483647,-1} %write{446,470}
temp	float	$tmp183	%read{472,472} %write{471,471}
temp	int	$tmp184	%read{474,474} %write{473,473}
temp	float	$tmp185.x	%read{482,482} %write{479,479}
temp	float	$tmp185.y	%read{482,482} %write{480,480}
temp	float	$tmp186.x	%read{479,479} %write{476,476}
temp	float	$tmp186.y	%read{480,480} %write{477,477}
temp	int	$tmp187	%read{484,484} %write{483,483}
temp	float	$tmp188	%read{489,489} %write{488,488}
temp	float	$tmp189	%read{492,492} %write{491,491}
temp	float	$tmp190	%read{493,493} %write{492,492}
temp	float	$tmp191	%read{498,498} %write{493,493}
temp	float	$tmp192	%read{496,496} %write{494,494}
temp	float	$tmp193	%read{496,496} %write{495,495}
temp	float	$tmp194	%read{497,497} %write{496,496}
temp	float	$tmp195	%read{498,498} %write{497,497}
temp	float	$tmp196	%read{503,503} %write{502,502}
temp	float	$tmp197	%read{504,504} %write{503,503}
const	string	$const22	"3D"		%read{509,509} %write{2147483647,-1}
temp	int	$tmp198	%read{510,510} %write{509,509}
temp	int	$tmp199	%read{514,514} %write{513,513}
temp	point	$tmp200	%read{576,576} %write{575,575}
temp	float	$tmp201	%read{534,534} %write{531,533}
temp	point	$tmp202	%read{526,526} %write{525,525}
const	string	$const23	"random_vector3_offset"		%read{515,713} %write{2147483647,-1}
temp	float	$tmp203	%read{517,517} %write{516,516}
temp	float	$tmp204	%read{518,518} %write{517,517}
temp	float	$tmp205	%read{525,525} %write{518,518}
temp	float	$tmp206	%read{520,520} %write{519,519}
temp	float	$tmp207	%read{521,521} %write{520,520}
temp	float	$tmp208	%read{525,525} %write{521,521}
temp	float	$tmp209	%read{523,523} %write{522,522}
temp	float	$tmp210	%read{524,524} %write{523,523}
temp	float	$tmp211	%read{525,525} %write{524,524}
temp	point	$tmp212	%read{528,528} %write{526,526}
temp	int	$tmp213	%read{530,530} %write{529,529}
temp	float	$tmp214	%read{575,575} %write{534,534}
temp	float	$tmp215	%read{554,554} %write{551,553}
temp	point	$tmp216	%read{546,546} %write{545,545}
temp	float	$tmp217	%read{537,537} %write{536,536}
temp	float	$tmp218	%read{538,538} %write{537,537}
temp	float	$tmp219	%read{545,545} %write{538,538}
temp	float	$tmp220	%read{540,540} %write{539,539}
temp	float	$tmp221	%read{541,541} %write{540,540}
temp	float	$tmp222	%read{545,545} %write{541,541}
temp	float	$tmp223	%read{543,543} %write{542,542}
temp	float	$tmp224	%read{544,544} %write{543,543}
temp	float	$tmp225	%read{545,545} %write{544,544}
temp	point	$tmp226	%read{548,548} %write{546,546}
temp	int	$tmp227	%read{550,550} %write{549,549}
temp	float	$tmp228	%read{575,575} %write{554,554}
temp	float	$tmp229	%read{574,574} %write{571,573}
temp	point	$tmp230	%read{566,566} %write{565,565}
temp	float	$tmp231	%read{557,557} %write{556,556}
temp	float	$tmp232	%read{558,558} %write{557,557}
temp	float	$tmp233	%read{565,565} %write{558,558}
temp	float	$tmp234	%read{560,560} %write{559,559}
temp	float	$tmp235	%read{561,561} %write{560,560}
temp	float	$tmp236	%read{565,565} %write{561,561}
temp	float	$tmp237	%read{563,563} %write{562,562}
temp	float	$tmp238	%read{564,564} %write{563,563}
temp	float	$tmp239	%read{565,565} %write{564,564}
temp	point	$tmp240	%read{568,568} %write{566,566}
temp	int	$tmp241	%read{570,570} %write{569,569}
temp	float	$tmp242	%read{575,575} %write{574,574}
temp	float	$tmp243	%read{584,584} %write{583,583}
temp	int	$tmp244	%read{588,607} %write{588,607}
temp	int	$tmp245	%read{586,607} %write{587,607}
temp	point	$tmp246	%read{588,607} %write{588,607}
temp	int	$tmp247	%read{588,607} %write{588,607}
temp	float	$tmp248	%read{588,607} %write{588,607}
temp	float	$tmp249	%read{588,607} %write{588,607}
temp	float	$tmp250	%read{588,607} %write{588,607}
temp	int	$tmp251	%read{2147483647,-1} %write{588,607}
temp	float	$tmp252	%read{609,609} %write{608,608}
temp	int	$tmp253	%read{611,611} %write{610,610}
temp	point	$tmp254	%read{614,614} %write{612,612}
temp	int	$tmp255	%read{616,616} %write{615,615}
temp	float	$tmp256	%read{621,621} %write{620,620}
temp	float	$tmp257	%read{624,624} %write{623,623}
temp	float	$tmp258	%read{625,625} %write{624,624}
temp	float	$tmp259	%read{630,630} %write{625,625}
temp	float	$tmp260	%read{628,628} %write{626,626}
temp	float	$tmp261	%read{628,628} %write{627,627}
temp	float	$tmp262	%read{629,629} %write{628,628}
temp	float	$tmp263	%read{630,630} %write{629,629}
temp	float	$tmp264	%read{635,635} %write{634,634}
temp	float	$tmp265	%read{636,636} %write{635,635}
temp	float	$tmp266	%read{787,787} %write{704,711}
temp	point	$tmp267	%read{650,650} %write{649,649}
temp	float	$tmp268	%read{641,641} %write{640,640}
temp	float	$tmp269	%read{642,642} %write{641,641}
temp	float	$tmp270	%read{649,649} %write{642,642}
temp	float	$tmp271	%read{644,644} %write{643,643}
temp	float	$tmp272	%read{645,645} %write{644,644}
temp	float	$tmp273	%read{649,649} %write{645,645}
temp	float	$tmp274	%read{647,647} %write{646,646}
temp	float	$tmp275	%read{648,648} %write{647,647}
temp	float	$tmp276	%read{649,649} %write{648,648}
temp	point	$tmp277	%read{662,686} %write{650,650}
temp	float	$tmp278	%read{658,658} %write{657,657}
temp	int	$tmp279	%read{662,681} %write{662,681}
temp	int	$tmp280	%read{660,681} %write{661,681}
temp	point	$tmp281	%read{662,681} %write{662,681}
temp	int	$tmp282	%read{662,681} %write{662,681}
temp	float	$tmp283	%read{662,681} %write{662,681}
temp	float	$tmp284	%read{662,681} %write{662,681}
temp	float	$tmp285	%read{662,681} %write{662,681}
temp	int	$tmp286	%read{2147483647,-1} %write{662,681}
temp	float	$tmp287	%read{683,683} %write{682,682}
temp	int	$tmp288	%read{685,685} %write{684,684}
temp	point	$tmp289	%read{688,688} %write{686,686}
temp	int	$tmp290	%read{690,690} %write{689,689}
temp	float	$tmp291	%read{695,695} %write{694,694}
temp	float	$tmp292	%read{698,698} %write{697,697}
temp	float	$tmp293	%read{699,699} %write{698,698}
temp	float	$tmp294	%read{704,704} %write{699,699}
temp	float	$tmp295	%read{702,702} %write{700,700}
temp	float	$tmp296	%read{702,702} %write{701,701}
temp	float	$tmp297	%read{703,703} %write{702,702}
temp	float	$tmp298	%read{704,704} %write{703,703}
temp	float	$tmp299	%read{709,709} %write{708,708}
temp	float	$tmp300	%read{710,710} %write{709,709}
temp	float	$tmp301	%read{787,787} %write{778,785}
temp	point	$tmp302	%read{724,724} %write{723,723}
const	float	$const24	4		%read{714,1007} %write{2147483647,-1}
temp	float	$tmp303	%read{715,715} %write{714,714}
temp	float	$tmp304	%read{716,716} %write{715,715}
temp	float	$tmp305	%read{723,723} %write{716,716}
temp	float	$tmp306	%read{718,718} %write{717,717}
temp	float	$tmp307	%read{719,719} %write{718,718}
temp	float	$tmp308	%read{723,723} %write{719,719}
temp	float	$tmp309	%read{721,721} %write{720,720}
temp	float	$tmp310	%read{722,722} %write{721,721}
temp	float	$tmp311	%read{723,723} %write{722,722}
temp	point	$tmp312	%read{736,760} %write{724,724}
temp	float	$tmp313	%read{732,732} %write{731,731}
temp	int	$tmp314	%read{736,755} %write{736,755}
temp	int	$tmp315	%read{734,755} %write{735,755}
temp	point	$tmp316	%read{736,755} %write{736,755}
temp	int	$tmp317	%read{736,755} %write{736,755}
temp	float	$tmp318	%read{736,755} %write{736,755}
temp	float	$tmp319	%read{736,755} %write{736,755}
temp	float	$tmp320	%read{736,755} %write{736,755}
temp	int	$tmp321	%read{2147483647,-1} %write{736,755}
temp	float	$tmp322	%read{757,757} %write{756,756}
temp	int	$tmp323	%read{759,759} %write{758,758}
temp	point	$tmp324	%read{762,762} %write{760,760}
temp	int	$tmp325	%read{764,764} %write{763,763}
temp	float	$tmp326	%read{769,769} %write{768,768}
temp	float	$tmp327	%read{772,772} %write{771,771}
temp	float	$tmp328	%read{773,773} %write{772,772}
temp	float	$tmp329	%read{778,778} %write{773,773}
temp	float	$tmp330	%read{776,776} %write{774,774}
temp	float	$tmp331	%read{776,776} %write{775,775}
temp	float	$tmp332	%read{777,777} %write{776,776}
temp	float	$tmp333	%read{778,778} %write{777,777}
temp	float	$tmp334	%read{783,783} %write{782,782}
temp	float	$tmp335	%read{784,784} %write{783,783}
const	string	$const25	"4D"		%read{789,789} %write{2147483647,-1}
temp	int	$tmp336	%read{790,790} %write{789,789}
temp	float	$tmp337.x	%read{796,796} %write{791,791}
temp	float	$tmp337.y	%read{797,797} %write{792,792}
temp	float	$tmp337.z	%read{798,798} %write{793,793}
temp	float	$tmp337.w	%read{799,799} %write{794,794}
const	int	$const26	2		%read{793,793} %write{2147483647,-1}
temp	int	$tmp338	%read{801,801} %write{800,800}
temp	float	$tmp339.x	%read{911,911} %write{828,828}
temp	float	$tmp339.y	%read{912,912} %write{855,855}
temp	float	$tmp339.z	%read{913,913} %write{882,882}
temp	float	$tmp339.w	%read{914,914} %write{909,909}
temp	float	$tmp340	%read{828,828} %write{825,827}
temp	float	$tmp341.x	%read{821,821} %write{816,816}
temp	float	$tmp341.y	%read{821,821} %write{817,817}
temp	float	$tmp341.z	%read{821,821} %write{818,818}
temp	float	$tmp341.w	%read{822,822} %write{819,819}
temp	float	$tmp342.x	%read{816,816} %write{805,805}
temp	float	$tmp342.y	%read{817,817} %write{808,808}
temp	float	$tmp342.z	%read{818,818} %write{811,811}
temp	float	$tmp342.w	%read{819,819} %write{814,814}
const	string	$const27	"random_vector4_offset"		%read{802,1097} %write{2147483647,-1}
temp	float	$tmp343	%read{804,804} %write{803,803}
temp	float	$tmp344	%read{805,805} %write{804,804}
temp	float	$tmp345	%read{807,807} %write{806,806}
temp	float	$tmp346	%read{808,808} %write{807,807}
temp	float	$tmp347	%read{810,810} %write{809,809}
temp	float	$tmp348	%read{811,811} %write{810,810}
temp	float	$tmp349	%read{813,813} %write{812,812}
temp	float	$tmp350	%read{814,814} %write{813,813}
temp	point	$tmp351	%read{822,822} %write{821,821}
temp	int	$tmp352	%read{824,824} %write{823,823}
temp	float	$tmp353	%read{855,855} %write{852,854}
temp	float	$tmp354.x	%read{848,848} %write{843,843}
temp	float	$tmp354.y	%read{848,848} %write{844,844}
temp	float	$tmp354.z	%read{848,848} %write{845,845}
temp	float	$tmp354.w	%read{849,849} %write{846,846}
temp	float	$tmp355.x	%read{843,843} %write{832,832}
temp	float	$tmp355.y	%read{844,844} %write{835,835}
temp	float	$tmp355.z	%read{845,845} %write{838,838}
temp	float	$tmp355.w	%read{846,846} %write{841,841}
temp	float	$tmp356	%read{831,831} %write{830,830}
temp	float	$tmp357	%read{832,832} %write{831,831}
temp	float	$tmp358	%read{834,834} %write{833,833}
temp	float	$tmp359	%read{835,835} %write{834,834}
temp	float	$tmp360	%read{837,837} %write{836,836}
temp	float	$tmp361	%read{838,838} %write{837,837}
temp	float	$tmp362	%read{840,840} %write{839,839}
temp	float	$tmp363	%read{841,841} %write{840,840}
temp	point	$tmp364	%read{849,849} %write{848,848}
temp	int	$tmp365	%read{851,851} %write{850,850}
temp	float	$tmp366	%read{882,882} %write{879,881}
temp	float	$tmp367.x	%read{875,875} %write{870,870}
temp	float	$tmp367.y	%read{875,875} %write{871,871}
temp	float	$tmp367.z	%read{875,875} %write{872,872}
temp	float	$tmp367.w	%read{876,876} %write{873,873}
temp	float	$tmp368.x	%read{870,870} %write{859,859}
temp	float	$tmp368.y	%read{871,871} %write{862,862}
temp	float	$tmp368.z	%read{872,872} %write{865,865}
temp	float	$tmp368.w	%read{873,873} %write{868,868}
temp	float	$tmp369	%read{858,858} %write{857,857}
temp	float	$tmp370	%read{859,859} %write{858,858}
temp	float	$tmp371	%read{861,861} %write{860,860}
temp	float	$tmp372	%read{862,862} %write{861,861}
temp	float	$tmp373	%read{864,864} %write{863,863}
temp	float	$tmp374	%read{865,865} %write{864,864}
temp	float	$tmp375	%read{867,867} %write{866,866}
temp	float	$tmp376	%read{868,868} %write{867,867}
temp	point	$tmp377	%read{876,876} %write{875,875}
temp	int	$tmp378	%read{878,878} %write{877,877}
temp	float	$tmp379	%read{909,909} %write{906,908}
temp	float	$tmp380.x	%read{902,902} %write{897,897}
temp	float	$tmp380.y	%read{902,902} %write{898,898}
temp	float	$tmp380.z	%read{902,902} %write{899,899}
temp	float	$tmp380.w	%read{903,903} %write{900,900}
temp	float	$tmp381.x	%read{897,897} %write{886,886}
temp	float	$tmp381.y	%read{898,898} %write{889,889}
temp	float	$tmp381.z	%read{899,899} %write{892,892}
temp	float	$tmp381.w	%read{900,900} %write{895,895}
temp	float	$tmp382	%read{885,885} %write{884,884}
temp	float	$tmp383	%read{886,886} %write{885,885}
temp	float	$tmp384	%read{888,888} %write{887,887}
temp	float	$tmp385	%read{889,889} %write{888,888}
temp	float	$tmp386	%read{891,891} %write{890,890}
temp	float	$tmp387	%read{892,892} %write{891,891}
temp	float	$tmp388	%read{894,894} %write{893,893}
temp	float	$tmp389	%read{895,895} %write{894,894}
temp	point	$tmp390	%read{903,903} %write{902,902}
temp	int	$tmp391	%read{905,905} %write{904,904}
temp	float	$tmp392	%read{922,922} %write{921,921}
temp	int	$tmp393	%read{926,955} %write{926,955}
temp	int	$tmp394	%read{924,955} %write{925,955}
temp	float	$tmp395.x	%read{926,955} %write{926,955}
temp	float	$tmp395.y	%read{926,955} %write{926,955}
temp	float	$tmp395.z	%read{926,955} %write{926,955}
temp	float	$tmp395.w	%read{926,955} %write{926,955}
temp	float	$tmp396.x	%read{926,955} %write{926,955}
temp	float	$tmp396.y	%read{926,955} %write{926,955}
temp	float	$tmp396.z	%read{926,955} %write{926,955}
temp	float	$tmp396.w	%read{926,955} %write{926,955}
temp	point	$tmp397	%read{926,955} %write{926,955}
temp	int	$tmp398	%read{926,955} %write{926,955}
temp	float	$tmp399	%read{926,955} %write{926,955}
temp	float	$tmp400	%read{926,955} %write{926,955}
temp	float	$tmp401	%read{926,955} %write{926,955}
temp	int	$tmp402	%read{2147483647,-1} %write{926,955}
temp	float	$tmp403	%read{957,957} %write{956,956}
temp	int	$tmp404	%read{959,959} %write{958,958}
temp	float	$tmp405.x	%read{971,971} %write{966,966}
temp	float	$tmp405.y	%read{971,971} %write{967,967}
temp	float	$tmp405.z	%read{971,971} %write{968,968}
temp	float	$tmp405.w	%read{972,972} %write{969,969}
temp	float	$tmp406.x	%read{966,966} %write{961,961}
temp	float	$tmp406.y	%read{967,967} %write{962,962}
temp	float	$tmp406.z	%read{968,968} %write{963,963}
temp	float	$tmp406.w	%read{969,969} %write{964,964}
temp	point	$tmp407	%read{972,972} %write{971,971}
temp	int	$tmp408	%read{974,974} %write{973,973}
temp	float	$tmp409	%read{979,979} %write{978,978}
temp	float	$tmp410	%read{982,982} %write{981,981}
temp	float	$tmp411	%read{983,983} %write{982,982}
temp	float	$tmp412	%read{988,988} %write{983,983}
temp	float	$tmp413	%read{986,986} %write{984,984}
temp	float	$tmp414	%read{986,986} %write{985,985}
temp	float	$tmp415	%read{987,987} %write{986,986}
temp	float	$tmp416	%read{988,988} %write{987,987}
temp	float	$tmp417	%read{993,993} %write{992,992}
temp	float	$tmp418	%read{994,994} %write{993,993}
temp	float	$tmp419	%read{1197,1197} %write{1088,1095}
temp	float	$tmp420.x	%read{1026,1066} %write{1011,1011}
temp	float	$tmp420.y	%read{1026,1067} %write{1012,1012}
temp	float	$tmp420.z	%read{1026,1068} %write{1013,1013}
temp	float	$tmp420.w	%read{1026,1069} %write{1014,1014}
temp	float	$tmp421.x	%read{1011,1011} %write{1000,1000}
temp	float	$tmp421.y	%read{1012,1012} %write{1003,1003}
temp	float	$tmp421.z	%read{1013,1013} %write{1006,1006}
temp	float	$tmp421.w	%read{1014,1014} %write{1009,1009}
temp	float	$tmp422	%read{999,999} %write{998,998}
temp	float	$tmp423	%read{1000,1000} %write{999,999}
temp	float	$tmp424	%read{1002,1002} %write{1001,1001}
temp	float	$tmp425	%read{1003,1003} %write{1002,1002}
temp	float	$tmp426	%read{1005,1005} %write{1004,1004}
temp	float	$tmp427	%read{1006,1006} %write{1005,1005}
temp	float	$tmp428	%read{1008,1008} %write{1007,1007}
temp	float	$tmp429	%read{1009,1009} %write{1008,1008}
temp	float	$tmp430	%read{1022,1022} %write{1021,1021}
temp	int	$tmp431	%read{1026,1055} %write{1026,1055}
temp	int	$tmp432	%read{1024,1055} %write{1025,1055}
temp	float	$tmp433.x	%read{1026,1055} %write{1026,1055}
temp	float	$tmp433.y	%read{1026,1055} %write{1026,1055}
temp	float	$tmp433.z	%read{1026,1055} %write{1026,1055}
temp	float	$tmp433.w	%read{1026,1055} %write{1026,1055}
temp	float	$tmp434.x	%read{1026,1055} %write{1026,1055}
temp	float	$tmp434.y	%read{1026,1055} %write{1026,1055}
temp	float	$tmp434.z	%read{1026,1055} %write{1026,1055}
temp	float	$tmp434.w	%read{1026,1055} %write{1026,1055}
temp	point	$tmp435	%read{1026,1055} %write{1026,1055}
temp	int	$tmp436	%read{1026,1055} %write{1026,1055}
temp	float	$tmp437	%read{1026,1055} %write{1026,1055}
temp	float	$tmp438	%read{1026,1055} %write{1026,1055}
temp	float	$tmp439	%read{1026,1055} %write{1026,1055}
temp	int	$tmp440	%read{2147483647,-1} %write{1026,1055}
temp	float	$tmp441	%read{1057,1057} %write{1056,1056}
temp	int	$tmp442	%read{1059,1059} %write{1058,1058}
temp	float	$tmp443.x	%read{1071,1071} %write{1066,1066}
temp	float	$tmp443.y	%read{1071,1071} %write{1067,1067}
temp	float	$tmp443.z	%read{1071,1071} %write{1068,1068}
temp	float	$tmp443.w	%read{1072,1072} %write{1069,1069}
temp	float	$tmp444.x	%read{1066,1066} %write{1061,1061}
temp	float	$tmp444.y	%read{1067,1067} %write{1062,1062}
temp	float	$tmp444.z	%read{1068,1068} %write{1063,1063}
temp	float	$tmp444.w	%read{1069,1069} %write{1064,1064}
temp	point	$tmp445	%read{1072,1072} %write{1071,1071}
temp	int	$tmp446	%read{1074,1074} %write{1073,1073}
temp	float	$tmp447	%read{1079,1079} %write{1078,1078}
temp	float	$tmp448	%read{1082,1082} %write{1081,1081}
temp	float	$tmp449	%read{1083,1083} %write{1082,1082}
temp	float	$tmp450	%read{1088,1088} %write{1083,1083}
temp	float	$tmp451	%read{1086,1086} %write{1084,1084}
temp	float	$tmp452	%read{1086,1086} %write{1085,1085}
temp	float	$tmp453	%read{1087,1087} %write{1086,1086}
temp	float	$tmp454	%read{1088,1088} %write{1087,1087}
temp	float	$tmp455	%read{1093,1093} %write{1092,1092}
temp	float	$tmp456	%read{1094,1094} %write{1093,1093}
temp	float	$tmp457	%read{1197,1197} %write{1188,1195}
temp	float	$tmp458.x	%read{1126,1166} %write{1111,1111}
temp	float	$tmp458.y	%read{1126,1167} %write{1112,1112}
temp	float	$tmp458.z	%read{1126,1168} %write{1113,1113}
temp	float	$tmp458.w	%read{1126,1169} %write{1114,1114}
temp	float	$tmp459.x	%read{1111,1111} %write{1100,1100}
temp	float	$tmp459.y	%read{1112,1112} %write{1103,1103}
temp	float	$tmp459.z	%read{1113,1113} %write{1106,1106}
temp	float	$tmp459.w	%read{1114,1114} %write{1109,1109}
const	float	$const28	5		%read{1098,1107} %write{2147483647,-1}
temp	float	$tmp460	%read{1099,1099} %write{1098,1098}
temp	float	$tmp461	%read{1100,1100} %write{1099,1099}
temp	float	$tmp462	%read{1102,1102} %write{1101,1101}
temp	float	$tmp463	%read{1103,1103} %write{1102,1102}
temp	float	$tmp464	%read{1105,1105} %write{1104,1104}
temp	float	$tmp465	%read{1106,1106} %write{1105,1105}
temp	float	$tmp466	%read{1108,1108} %write{1107,1107}
temp	float	$tmp467	%read{1109,1109} %write{1108,1108}
temp	float	$tmp468	%read{1122,1122} %write{1121,1121}
temp	int	$tmp469	%read{1126,1155} %write{1126,1155}
temp	int	$tmp470	%read{1124,1155} %write{1125,1155}
temp	float	$tmp471.x	%read{1126,1155} %write{1126,1155}
temp	float	$tmp471.y	%read{1126,1155} %write{1126,1155}
temp	float	$tmp471.z	%read{1126,1155} %write{1126,1155}
temp	float	$tmp471.w	%read{1126,1155} %write{1126,1155}
temp	float	$tmp472.x	%read{1126,1155} %write{1126,1155}
temp	float	$tmp472.y	%read{1126,1155} %write{1126,1155}
temp	float	$tmp472.z	%read{1126,1155} %write{1126,1155}
temp	float	$tmp472.w	%read{1126,1155} %write{1126,1155}
temp	point	$tmp473	%read{1126,1155} %write{1126,1155}
temp	int	$tmp474	%read{1126,1155} %write{1126,1155}
temp	float	$tmp475	%read{1126,1155} %write{1126,1155}
temp	float	$tmp476	%read{1126,1155} %write{1126,1155}
temp	float	$tmp477	%read{1126,1155} %write{1126,1155}
temp	int	$tmp478	%read{2147483647,-1} %write{1126,1155}
temp	float	$tmp479	%read{1157,1157} %write{1156,1156}
temp	int	$tmp480	%read{1159,1159} %write{1158,1158}
temp	float	$tmp481.x	%read{1171,1171} %write{1166,1166}
temp	float	$tmp481.y	%read{1171,1171} %write{1167,1167}
temp	float	$tmp481.z	%read{1171,1171} %write{1168,1168}
temp	float	$tmp481.w	%read{1172,1172} %write{1169,1169}
temp	float	$tmp482.x	%read{1166,1166} %write{1161,1161}
temp	float	$tmp482.y	%read{1167,1167} %write{1162,1162}
temp	float	$tmp482.z	%read{1168,1168} %write{1163,1163}
temp	float	$tmp482.w	%read{1169,1169} %write{1164,1164}
temp	point	$tmp483	%read{1172,1172} %write{1171,1171}
temp	int	$tmp484	%read{1174,1174} %write{1173,1173}
temp	float	$tmp485	%read{1179,1179} %write{1178,1178}
temp	float	$tmp486	%read{1182,1182} %write{1181,1181}
temp	float	$tmp487	%read{1183,1183} %write{1182,1182}
temp	float	$tmp488	%read{1188,1188} %write{1183,1183}
temp	float	$tmp489	%read{1186,1186} %write{1184,1184}
temp	float	$tmp490	%read{1186,1186} %write{1185,1185}
temp	float	$tmp491	%read{1187,1187} %write{1186,1186}
temp	float	$tmp492	%read{1188,1188} %write{1187,1187}
temp	float	$tmp493	%read{1193,1193} %write{1192,1192}
temp	float	$tmp494	%read{1194,1194} %write{1193,1193}
const	string	$const29	"Unknown dimension!"		%read{1199,1199} %write{2147483647,-1}
code ___main___
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:150
#   vector3 p = Vector;
	assign		p Vector 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{150} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:151
#   if (use_mapping)
	if		use_mapping 3 3 	%line{151} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:152
#     p = transform(mapping, p);
	transform	p mapping p 	%line{152} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:154
#   p *= Scale;
	mul		p p Scale 	%line{154} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:155
#   float w = W * Scale;
	mul		w W Scale 	%line{155} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:157
#   if (dimensions == "1D")
	eq		$tmp1 dimensions $const1 	%line{157} %argrw{"wrr"}
	if		$tmp1 223 1200 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:158
#     Fac = noise_texture(w, Detail, Roughness, Lacunarity, Distortion, use_normalize, Color);
	functioncall	$const2 223 	%line{158} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:54
#   float p = co;
	assign		___513_p w 	%line{54} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:55
#   if (distortion != 0.0) {
	neq		$tmp2 Distortion $const3 	%line{55} %argrw{"wrr"}
	if		$tmp2 25 25 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:56
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	functioncall	$const4 15 	%line{56} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:22
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp5 $const6 $const3 	%line{22} %argrw{"wrr"}
	mul		$tmp6 $tmp5 $const5 	%argrw{"wrr"}
	add		$tmp4 $const5 $tmp6 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:56
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	add		$tmp7 ___513_p $tmp4 	%line{56} %argrw{"wrr"}
	functioncall	$const7 23 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const8 $tmp7 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp8 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp8 22 22 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp3 $const3 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp3 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:56
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	mul		$tmp9 $tmp3 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{56} %argrw{"wrr"}
	add		___513_p ___513_p $tmp9 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:59
#   float value = fractal_noise(p, detail, roughness, lacunarity, use_normalize);
	functioncall	$const9 87 	%line{59} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:85
#   float fscale = 1.0;
	assign		___472_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{85} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:86
#   float amp = 1.0;
	assign		___472_amp $const10 	%line{86} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:87
#   float maxamp = 0.0;
	assign		___472_maxamp $const3 	%line{87} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:88
#   float sum = 0.0;
	assign		___472_sum $const3 	%line{88} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:89
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 33 	%line{89} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp10 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___472_octaves $tmp10 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:90
#   int n = (int)octaves;
	assign		___472_n ___472_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{90} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:91
#   for (int i = 0; i <= n; i++) {
	for		$tmp12 36 38 54 56 	%line{91} %argrw{"r"}
	assign		___473_i $const13 	%argrw{"wr"}
	le		$tmp11 ___473_i ___472_n 	%argrw{"wrr"}
	neq		$tmp12 $tmp11 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:92
#     float t = safe_snoise(fscale * p);
	mul		$tmp13 ___472_fscale ___513_p 	%line{92} %argrw{"wrr"}
	functioncall	$const7 46 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const8 $tmp13 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp14 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp14 45 45 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___474_t $const3 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___474_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:93
#     sum += t * amp;
	mul		$tmp15 ___474_t ___472_amp 	%line{93} %argrw{"wrr"}
	add		___472_sum ___472_sum $tmp15 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:94
#     maxamp += amp;
	add		___472_maxamp ___472_maxamp ___472_amp 	%line{94} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:95
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 52 	%line{95} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp17 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp16 $tmp17 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:95
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___472_amp ___472_amp $tmp16 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{95} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:96
#     fscale *= lacunarity;
	mul		___472_fscale ___472_fscale Lacunarity 	%line{96} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:91
#   for (int i = 0; i <= n; i++) {
	assign		$tmp18 ___473_i 	%line{91} %argrw{"wr"}
	add		___473_i ___473_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:98
#   float rmd = octaves - floor(octaves);
	floor		$tmp19 ___472_octaves 	%line{98} %argrw{"wr"}
	sub		___472_rmd ___472_octaves $tmp19 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:99
#   if (rmd != 0.0) {
	neq		$tmp20 ___472_rmd $const3 	%line{99} %argrw{"wrr"}
	if		$tmp20 81 87 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:100
#     float t = safe_snoise(fscale * p);
	mul		$tmp21 ___472_fscale ___513_p 	%line{100} %argrw{"wrr"}
	functioncall	$const7 68 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const8 $tmp21 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp22 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp22 67 67 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___475_t $const3 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___475_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:101
#     float sum2 = sum + t * amp;
	mul		$tmp23 ___475_t ___472_amp 	%line{101} %argrw{"wrr"}
	add		___475_sum2 ___472_sum $tmp23 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:102
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 79 80 	%line{102} %argrw{"r"}
	mul		$tmp24 $const15 ___472_sum 	%argrw{"wrr"}
	div		$tmp25 $tmp24 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp26 $tmp25 $const15 	%argrw{"wrr"}
	mul		$tmp27 $const15 ___475_sum2 	%argrw{"wrr"}
	add		$tmp28 ___472_maxamp ___472_amp 	%argrw{"wrr"}
	div		$tmp29 $tmp27 $tmp28 	%argrw{"wrr"}
	add		$tmp30 $tmp29 $const15 	%argrw{"wrr"}
	mix		___513_value $tmp26 $tmp30 ___472_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:103
#                            mix(sum, sum2, rmd);
	mix		___513_value ___472_sum ___475_sum2 ___472_rmd 	%line{103} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:106
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 85 86 	%line{106} %argrw{"r"}
	mul		$tmp31 $const15 ___472_sum 	%argrw{"wrr"}
	div		$tmp32 $tmp31 ___472_maxamp 	%argrw{"wrr"}
	add		___513_value $tmp32 $const15 	%argrw{"wrr"}
	assign		___513_value ___472_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:62
#       fractal_noise(p + random_float_offset(1.0), detail, roughness, lacunarity, use_normalize),
	functioncall	$const4 91 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{62} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:22
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp35 $const6 $const10 	%line{22} %argrw{"wrr"}
	mul		$tmp36 $tmp35 $const5 	%argrw{"wrr"}
	add		$tmp34 $const5 $tmp36 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:62
#       fractal_noise(p + random_float_offset(1.0), detail, roughness, lacunarity, use_normalize),
	add		$tmp37 ___513_p $tmp34 	%line{62} %argrw{"wrr"}
	functioncall	$const9 154 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:85
#   float fscale = 1.0;
	assign		___472_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{85} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:86
#   float amp = 1.0;
	assign		___472_amp $const10 	%line{86} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:87
#   float maxamp = 0.0;
	assign		___472_maxamp $const3 	%line{87} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:88
#   float sum = 0.0;
	assign		___472_sum $const3 	%line{88} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:89
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 100 	%line{89} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp38 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___472_octaves $tmp38 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:90
#   int n = (int)octaves;
	assign		___472_n ___472_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{90} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:91
#   for (int i = 0; i <= n; i++) {
	for		$tmp40 103 105 121 123 	%line{91} %argrw{"r"}
	assign		___473_i $const13 	%argrw{"wr"}
	le		$tmp39 ___473_i ___472_n 	%argrw{"wrr"}
	neq		$tmp40 $tmp39 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:92
#     float t = safe_snoise(fscale * p);
	mul		$tmp41 ___472_fscale $tmp37 	%line{92} %argrw{"wrr"}
	functioncall	$const7 113 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const8 $tmp41 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp42 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp42 112 112 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___474_t $const3 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___474_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:93
#     sum += t * amp;
	mul		$tmp43 ___474_t ___472_amp 	%line{93} %argrw{"wrr"}
	add		___472_sum ___472_sum $tmp43 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:94
#     maxamp += amp;
	add		___472_maxamp ___472_maxamp ___472_amp 	%line{94} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:95
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 119 	%line{95} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp45 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp44 $tmp45 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:95
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___472_amp ___472_amp $tmp44 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{95} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:96
#     fscale *= lacunarity;
	mul		___472_fscale ___472_fscale Lacunarity 	%line{96} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:91
#   for (int i = 0; i <= n; i++) {
	assign		$tmp46 ___473_i 	%line{91} %argrw{"wr"}
	add		___473_i ___473_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:98
#   float rmd = octaves - floor(octaves);
	floor		$tmp47 ___472_octaves 	%line{98} %argrw{"wr"}
	sub		___472_rmd ___472_octaves $tmp47 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:99
#   if (rmd != 0.0) {
	neq		$tmp48 ___472_rmd $const3 	%line{99} %argrw{"wrr"}
	if		$tmp48 148 154 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:100
#     float t = safe_snoise(fscale * p);
	mul		$tmp49 ___472_fscale $tmp37 	%line{100} %argrw{"wrr"}
	functioncall	$const7 135 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const8 $tmp49 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp50 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp50 134 134 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___475_t $const3 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___475_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:101
#     float sum2 = sum + t * amp;
	mul		$tmp51 ___475_t ___472_amp 	%line{101} %argrw{"wrr"}
	add		___475_sum2 ___472_sum $tmp51 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:102
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 146 147 	%line{102} %argrw{"r"}
	mul		$tmp52 $const15 ___472_sum 	%argrw{"wrr"}
	div		$tmp53 $tmp52 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp54 $tmp53 $const15 	%argrw{"wrr"}
	mul		$tmp55 $const15 ___475_sum2 	%argrw{"wrr"}
	add		$tmp56 ___472_maxamp ___472_amp 	%argrw{"wrr"}
	div		$tmp57 $tmp55 $tmp56 	%argrw{"wrr"}
	add		$tmp58 $tmp57 $const15 	%argrw{"wrr"}
	mix		$tmp33 $tmp54 $tmp58 ___472_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:103
#                            mix(sum, sum2, rmd);
	mix		$tmp33 ___472_sum ___475_sum2 ___472_rmd 	%line{103} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:106
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 152 153 	%line{106} %argrw{"r"}
	mul		$tmp59 $const15 ___472_sum 	%argrw{"wrr"}
	div		$tmp60 $tmp59 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp33 $tmp60 $const15 	%argrw{"wrr"}
	assign		$tmp33 ___472_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:63
#       fractal_noise(p + random_float_offset(2.0), detail, roughness, lacunarity, use_normalize));
	functioncall	$const4 158 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{63} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:22
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp63 $const6 $const16 	%line{22} %argrw{"wrr"}
	mul		$tmp64 $tmp63 $const5 	%argrw{"wrr"}
	add		$tmp62 $const5 $tmp64 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:63
#       fractal_noise(p + random_float_offset(2.0), detail, roughness, lacunarity, use_normalize));
	add		$tmp65 ___513_p $tmp62 	%line{63} %argrw{"wrr"}
	functioncall	$const9 221 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:85
#   float fscale = 1.0;
	assign		___472_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{85} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:86
#   float amp = 1.0;
	assign		___472_amp $const10 	%line{86} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:87
#   float maxamp = 0.0;
	assign		___472_maxamp $const3 	%line{87} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:88
#   float sum = 0.0;
	assign		___472_sum $const3 	%line{88} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:89
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 167 	%line{89} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp66 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___472_octaves $tmp66 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:90
#   int n = (int)octaves;
	assign		___472_n ___472_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{90} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:91
#   for (int i = 0; i <= n; i++) {
	for		$tmp68 170 172 188 190 	%line{91} %argrw{"r"}
	assign		___473_i $const13 	%argrw{"wr"}
	le		$tmp67 ___473_i ___472_n 	%argrw{"wrr"}
	neq		$tmp68 $tmp67 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:92
#     float t = safe_snoise(fscale * p);
	mul		$tmp69 ___472_fscale $tmp65 	%line{92} %argrw{"wrr"}
	functioncall	$const7 180 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const8 $tmp69 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp70 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp70 179 179 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___474_t $const3 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___474_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:93
#     sum += t * amp;
	mul		$tmp71 ___474_t ___472_amp 	%line{93} %argrw{"wrr"}
	add		___472_sum ___472_sum $tmp71 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:94
#     maxamp += amp;
	add		___472_maxamp ___472_maxamp ___472_amp 	%line{94} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:95
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 186 	%line{95} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp73 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp72 $tmp73 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:95
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___472_amp ___472_amp $tmp72 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{95} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:96
#     fscale *= lacunarity;
	mul		___472_fscale ___472_fscale Lacunarity 	%line{96} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:91
#   for (int i = 0; i <= n; i++) {
	assign		$tmp74 ___473_i 	%line{91} %argrw{"wr"}
	add		___473_i ___473_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:98
#   float rmd = octaves - floor(octaves);
	floor		$tmp75 ___472_octaves 	%line{98} %argrw{"wr"}
	sub		___472_rmd ___472_octaves $tmp75 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:99
#   if (rmd != 0.0) {
	neq		$tmp76 ___472_rmd $const3 	%line{99} %argrw{"wrr"}
	if		$tmp76 215 221 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:100
#     float t = safe_snoise(fscale * p);
	mul		$tmp77 ___472_fscale $tmp65 	%line{100} %argrw{"wrr"}
	functioncall	$const7 202 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const8 $tmp77 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp78 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp78 201 201 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___475_t $const3 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___475_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:101
#     float sum2 = sum + t * amp;
	mul		$tmp79 ___475_t ___472_amp 	%line{101} %argrw{"wrr"}
	add		___475_sum2 ___472_sum $tmp79 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:102
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 213 214 	%line{102} %argrw{"r"}
	mul		$tmp80 $const15 ___472_sum 	%argrw{"wrr"}
	div		$tmp81 $tmp80 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp82 $tmp81 $const15 	%argrw{"wrr"}
	mul		$tmp83 $const15 ___475_sum2 	%argrw{"wrr"}
	add		$tmp84 ___472_maxamp ___472_amp 	%argrw{"wrr"}
	div		$tmp85 $tmp83 $tmp84 	%argrw{"wrr"}
	add		$tmp86 $tmp85 $const15 	%argrw{"wrr"}
	mix		$tmp61 $tmp82 $tmp86 ___472_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:103
#                            mix(sum, sum2, rmd);
	mix		$tmp61 ___472_sum ___475_sum2 ___472_rmd 	%line{103} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:106
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 219 220 	%line{106} %argrw{"r"}
	mul		$tmp87 $const15 ___472_sum 	%argrw{"wrr"}
	div		$tmp88 $tmp87 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp61 $tmp88 $const15 	%argrw{"wrr"}
	assign		$tmp61 ___472_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:60
#   Color = color(
	color		Color ___513_value $tmp33 $tmp61 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{60} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return value;
	assign		Fac ___513_value 	%line{64} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:159
#   else if (dimensions == "2D")
	eq		$tmp89 dimensions $const17 	%line{159} %argrw{"wrr"}
	if		$tmp89 509 1200 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:161
#         vector2(p[0], p[1]), Detail, Roughness, Lacunarity, Distortion, use_normalize, Color);
	compref		$tmp90.x p $const13 	%line{161} %argrw{"wrr"}
	compref		$tmp90.y p $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:160
#     Fac = noise_texture(
	functioncall	$const2 509 	%line{160} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:75
#   vector2 p = co;
	assign		___515_p.x $tmp90.x 	%line{75} %argrw{"wr"}
	assign		___515_p.y $tmp90.y 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:76
#   if (distortion != 0.0) {
	neq		$tmp91 Distortion $const3 	%line{76} %argrw{"wrr"}
	if		$tmp91 271 271 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:77
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	functioncall	$const18 239 	%line{77} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:27
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp96 $const6 $const3 $const3 	%line{27} %argrw{"wrrr"}
	mul		$tmp97 $tmp96 $const5 	%argrw{"wrr"}
	add		$tmp95.x $const5 $tmp97 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:28
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp98 $const6 $const3 $const10 	%line{28} %argrw{"wrrr"}
	mul		$tmp99 $tmp98 $const5 	%argrw{"wrr"}
	add		$tmp95.y $const5 $tmp99 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 242 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp94.x ___515_p.x $tmp95.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp94.y ___515_p.y $tmp95.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:77
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	functioncall	$const7 249 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{77} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const8 $tmp94.x $tmp94.y 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp100 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp100 248 248 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp93 $const3 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp93 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:77
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	mul		$tmp92.x $tmp93 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{77} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:78
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	functioncall	$const18 257 	%line{78} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:27
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp104 $const6 $const10 $const3 	%line{27} %argrw{"wrrr"}
	mul		$tmp105 $tmp104 $const5 	%argrw{"wrr"}
	add		$tmp103.x $const5 $tmp105 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:28
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp106 $const6 $const10 $const10 	%line{28} %argrw{"wrrr"}
	mul		$tmp107 $tmp106 $const5 	%argrw{"wrr"}
	add		$tmp103.y $const5 $tmp107 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 260 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp102.x ___515_p.x $tmp103.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp102.y ___515_p.y $tmp103.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:78
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	functioncall	$const7 267 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{78} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const8 $tmp102.x $tmp102.y 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp108 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp108 266 266 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp101 $const3 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp101 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:78
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	mul		$tmp92.y $tmp101 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{78} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 271 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___515_p.x ___515_p.x $tmp92.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___515_p.y ___515_p.y $tmp92.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
#   float value = fractal_noise(p, detail, roughness, lacunarity, use_normalize);
	functioncall	$const9 343 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:113
#   float fscale = 1.0;
	assign		___477_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{113} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:114
#   float amp = 1.0;
	assign		___477_amp $const10 	%line{114} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:115
#   float maxamp = 0.0;
	assign		___477_maxamp $const3 	%line{115} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:116
#   float sum = 0.0;
	assign		___477_sum $const3 	%line{116} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:117
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 279 	%line{117} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp109 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___477_octaves $tmp109 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:118
#   int n = (int)octaves;
	assign		___477_n ___477_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{118} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:119
#   for (int i = 0; i <= n; i++) {
	for		$tmp111 282 284 305 307 	%line{119} %argrw{"r"}
	assign		___478_i $const13 	%argrw{"wr"}
	le		$tmp110 ___478_i ___477_n 	%argrw{"wrr"}
	neq		$tmp111 $tmp110 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 290 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp113.x ___477_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp113.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 290 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp112.x ___515_p.x $tmp113.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp112.y ___515_p.y $tmp113.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:120
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 297 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{120} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const8 $tmp112.x $tmp112.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp114 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp114 296 296 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___479_t $const3 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___479_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:121
#     sum += t * amp;
	mul		$tmp115 ___479_t ___477_amp 	%line{121} %argrw{"wrr"}
	add		___477_sum ___477_sum $tmp115 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:122
#     maxamp += amp;
	add		___477_maxamp ___477_maxamp ___477_amp 	%line{122} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:123
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 303 	%line{123} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp117 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp116 $tmp117 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:123
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___477_amp ___477_amp $tmp116 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{123} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:124
#     fscale *= lacunarity;
	mul		___477_fscale ___477_fscale Lacunarity 	%line{124} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:119
#   for (int i = 0; i <= n; i++) {
	assign		$tmp118 ___478_i 	%line{119} %argrw{"wr"}
	add		___478_i ___478_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:126
#   float rmd = octaves - floor(octaves);
	floor		$tmp119 ___477_octaves 	%line{126} %argrw{"wr"}
	sub		___477_rmd ___477_octaves $tmp119 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:127
#   if (rmd != 0.0) {
	neq		$tmp120 ___477_rmd $const3 	%line{127} %argrw{"wrr"}
	if		$tmp120 337 343 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 317 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp122.x ___477_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp122.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 317 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp121.x ___515_p.x $tmp122.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp121.y ___515_p.y $tmp122.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:128
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 324 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{128} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const8 $tmp121.x $tmp121.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp123 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp123 323 323 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___480_t $const3 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___480_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:129
#     float sum2 = sum + t * amp;
	mul		$tmp124 ___480_t ___477_amp 	%line{129} %argrw{"wrr"}
	add		___480_sum2 ___477_sum $tmp124 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:130
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 335 336 	%line{130} %argrw{"r"}
	mul		$tmp125 $const15 ___477_sum 	%argrw{"wrr"}
	div		$tmp126 $tmp125 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp127 $tmp126 $const15 	%argrw{"wrr"}
	mul		$tmp128 $const15 ___480_sum2 	%argrw{"wrr"}
	add		$tmp129 ___477_maxamp ___477_amp 	%argrw{"wrr"}
	div		$tmp130 $tmp128 $tmp129 	%argrw{"wrr"}
	add		$tmp131 $tmp130 $const15 	%argrw{"wrr"}
	mix		___515_value $tmp127 $tmp131 ___477_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:131
#                            mix(sum, sum2, rmd);
	mix		___515_value ___477_sum ___480_sum2 ___477_rmd 	%line{131} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:134
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 341 342 	%line{134} %argrw{"r"}
	mul		$tmp132 $const15 ___477_sum 	%argrw{"wrr"}
	div		$tmp133 $tmp132 ___477_maxamp 	%argrw{"wrr"}
	add		___515_value $tmp133 $const15 	%argrw{"wrr"}
	assign		___515_value ___477_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:84
#       fractal_noise(p + random_vector2_offset(2.0), detail, roughness, lacunarity, use_normalize),
	functioncall	$const18 350 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{84} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:27
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp137 $const6 $const16 $const3 	%line{27} %argrw{"wrrr"}
	mul		$tmp138 $tmp137 $const5 	%argrw{"wrr"}
	add		$tmp136.x $const5 $tmp138 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:28
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp139 $const6 $const16 $const10 	%line{28} %argrw{"wrrr"}
	mul		$tmp140 $tmp139 $const5 	%argrw{"wrr"}
	add		$tmp136.y $const5 $tmp140 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 353 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp135.x ___515_p.x $tmp136.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp135.y ___515_p.y $tmp136.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:84
#       fractal_noise(p + random_vector2_offset(2.0), detail, roughness, lacunarity, use_normalize),
	functioncall	$const9 425 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{84} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:113
#   float fscale = 1.0;
	assign		___477_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{113} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:114
#   float amp = 1.0;
	assign		___477_amp $const10 	%line{114} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:115
#   float maxamp = 0.0;
	assign		___477_maxamp $const3 	%line{115} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:116
#   float sum = 0.0;
	assign		___477_sum $const3 	%line{116} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:117
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 361 	%line{117} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp141 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___477_octaves $tmp141 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:118
#   int n = (int)octaves;
	assign		___477_n ___477_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{118} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:119
#   for (int i = 0; i <= n; i++) {
	for		$tmp143 364 366 387 389 	%line{119} %argrw{"r"}
	assign		___478_i $const13 	%argrw{"wr"}
	le		$tmp142 ___478_i ___477_n 	%argrw{"wrr"}
	neq		$tmp143 $tmp142 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 372 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp145.x ___477_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp145.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 372 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp144.x $tmp135.x $tmp145.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp144.y $tmp135.y $tmp145.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:120
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 379 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{120} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const8 $tmp144.x $tmp144.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp146 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp146 378 378 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___479_t $const3 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___479_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:121
#     sum += t * amp;
	mul		$tmp147 ___479_t ___477_amp 	%line{121} %argrw{"wrr"}
	add		___477_sum ___477_sum $tmp147 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:122
#     maxamp += amp;
	add		___477_maxamp ___477_maxamp ___477_amp 	%line{122} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:123
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 385 	%line{123} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp149 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp148 $tmp149 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:123
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___477_amp ___477_amp $tmp148 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{123} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:124
#     fscale *= lacunarity;
	mul		___477_fscale ___477_fscale Lacunarity 	%line{124} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:119
#   for (int i = 0; i <= n; i++) {
	assign		$tmp150 ___478_i 	%line{119} %argrw{"wr"}
	add		___478_i ___478_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:126
#   float rmd = octaves - floor(octaves);
	floor		$tmp151 ___477_octaves 	%line{126} %argrw{"wr"}
	sub		___477_rmd ___477_octaves $tmp151 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:127
#   if (rmd != 0.0) {
	neq		$tmp152 ___477_rmd $const3 	%line{127} %argrw{"wrr"}
	if		$tmp152 419 425 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 399 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp154.x ___477_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp154.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 399 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp153.x $tmp135.x $tmp154.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp153.y $tmp135.y $tmp154.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:128
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 406 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{128} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const8 $tmp153.x $tmp153.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp155 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp155 405 405 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___480_t $const3 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___480_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:129
#     float sum2 = sum + t * amp;
	mul		$tmp156 ___480_t ___477_amp 	%line{129} %argrw{"wrr"}
	add		___480_sum2 ___477_sum $tmp156 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:130
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 417 418 	%line{130} %argrw{"r"}
	mul		$tmp157 $const15 ___477_sum 	%argrw{"wrr"}
	div		$tmp158 $tmp157 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp159 $tmp158 $const15 	%argrw{"wrr"}
	mul		$tmp160 $const15 ___480_sum2 	%argrw{"wrr"}
	add		$tmp161 ___477_maxamp ___477_amp 	%argrw{"wrr"}
	div		$tmp162 $tmp160 $tmp161 	%argrw{"wrr"}
	add		$tmp163 $tmp162 $const15 	%argrw{"wrr"}
	mix		$tmp134 $tmp159 $tmp163 ___477_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:131
#                            mix(sum, sum2, rmd);
	mix		$tmp134 ___477_sum ___480_sum2 ___477_rmd 	%line{131} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:134
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 423 424 	%line{134} %argrw{"r"}
	mul		$tmp164 $const15 ___477_sum 	%argrw{"wrr"}
	div		$tmp165 $tmp164 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp134 $tmp165 $const15 	%argrw{"wrr"}
	assign		$tmp134 ___477_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:85
#       fractal_noise(p + random_vector2_offset(3.0), detail, roughness, lacunarity, use_normalize));
	functioncall	$const18 432 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{85} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:27
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp169 $const6 $const21 $const3 	%line{27} %argrw{"wrrr"}
	mul		$tmp170 $tmp169 $const5 	%argrw{"wrr"}
	add		$tmp168.x $const5 $tmp170 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:28
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp171 $const6 $const21 $const10 	%line{28} %argrw{"wrrr"}
	mul		$tmp172 $tmp171 $const5 	%argrw{"wrr"}
	add		$tmp168.y $const5 $tmp172 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 435 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp167.x ___515_p.x $tmp168.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp167.y ___515_p.y $tmp168.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:85
#       fractal_noise(p + random_vector2_offset(3.0), detail, roughness, lacunarity, use_normalize));
	functioncall	$const9 507 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{85} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:113
#   float fscale = 1.0;
	assign		___477_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{113} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:114
#   float amp = 1.0;
	assign		___477_amp $const10 	%line{114} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:115
#   float maxamp = 0.0;
	assign		___477_maxamp $const3 	%line{115} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:116
#   float sum = 0.0;
	assign		___477_sum $const3 	%line{116} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:117
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 443 	%line{117} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp173 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___477_octaves $tmp173 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:118
#   int n = (int)octaves;
	assign		___477_n ___477_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{118} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:119
#   for (int i = 0; i <= n; i++) {
	for		$tmp175 446 448 469 471 	%line{119} %argrw{"r"}
	assign		___478_i $const13 	%argrw{"wr"}
	le		$tmp174 ___478_i ___477_n 	%argrw{"wrr"}
	neq		$tmp175 $tmp174 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 454 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp177.x ___477_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp177.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 454 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp176.x $tmp167.x $tmp177.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp176.y $tmp167.y $tmp177.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:120
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 461 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{120} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const8 $tmp176.x $tmp176.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp178 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp178 460 460 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___479_t $const3 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___479_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:121
#     sum += t * amp;
	mul		$tmp179 ___479_t ___477_amp 	%line{121} %argrw{"wrr"}
	add		___477_sum ___477_sum $tmp179 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:122
#     maxamp += amp;
	add		___477_maxamp ___477_maxamp ___477_amp 	%line{122} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:123
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 467 	%line{123} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp181 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp180 $tmp181 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:123
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___477_amp ___477_amp $tmp180 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{123} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:124
#     fscale *= lacunarity;
	mul		___477_fscale ___477_fscale Lacunarity 	%line{124} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:119
#   for (int i = 0; i <= n; i++) {
	assign		$tmp182 ___478_i 	%line{119} %argrw{"wr"}
	add		___478_i ___478_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:126
#   float rmd = octaves - floor(octaves);
	floor		$tmp183 ___477_octaves 	%line{126} %argrw{"wr"}
	sub		___477_rmd ___477_octaves $tmp183 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:127
#   if (rmd != 0.0) {
	neq		$tmp184 ___477_rmd $const3 	%line{127} %argrw{"wrr"}
	if		$tmp184 501 507 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 481 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp186.x ___477_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp186.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 481 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp185.x $tmp167.x $tmp186.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp185.y $tmp167.y $tmp186.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:128
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 488 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{128} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const8 $tmp185.x $tmp185.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp187 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp187 487 487 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___480_t $const3 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___480_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:129
#     float sum2 = sum + t * amp;
	mul		$tmp188 ___480_t ___477_amp 	%line{129} %argrw{"wrr"}
	add		___480_sum2 ___477_sum $tmp188 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:130
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 499 500 	%line{130} %argrw{"r"}
	mul		$tmp189 $const15 ___477_sum 	%argrw{"wrr"}
	div		$tmp190 $tmp189 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp191 $tmp190 $const15 	%argrw{"wrr"}
	mul		$tmp192 $const15 ___480_sum2 	%argrw{"wrr"}
	add		$tmp193 ___477_maxamp ___477_amp 	%argrw{"wrr"}
	div		$tmp194 $tmp192 $tmp193 	%argrw{"wrr"}
	add		$tmp195 $tmp194 $const15 	%argrw{"wrr"}
	mix		$tmp166 $tmp191 $tmp195 ___477_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:131
#                            mix(sum, sum2, rmd);
	mix		$tmp166 ___477_sum ___480_sum2 ___477_rmd 	%line{131} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:134
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 505 506 	%line{134} %argrw{"r"}
	mul		$tmp196 $const15 ___477_sum 	%argrw{"wrr"}
	div		$tmp197 $tmp196 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp166 $tmp197 $const15 	%argrw{"wrr"}
	assign		$tmp166 ___477_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
#   Color = color(
	color		Color ___515_value $tmp134 $tmp166 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:86
#   return value;
	assign		Fac ___515_value 	%line{86} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:162
#   else if (dimensions == "3D")
	eq		$tmp198 dimensions $const22 	%line{162} %argrw{"wrr"}
	if		$tmp198 789 1200 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:163
#     Fac = noise_texture(p, Detail, Roughness, Lacunarity, Distortion, use_normalize, Color);
	functioncall	$const2 789 	%line{163} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:97
#   vector3 p = co;
	assign		___517_p p 	%line{97} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:98
#   if (distortion != 0.0) {
	neq		$tmp199 Distortion $const3 	%line{98} %argrw{"wrr"}
	if		$tmp199 577 577 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:99
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	functioncall	$const23 526 	%line{99} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp203 $const6 $const3 $const3 	%line{33} %argrw{"wrrr"}
	mul		$tmp204 $tmp203 $const5 	%argrw{"wrr"}
	add		$tmp205 $const5 $tmp204 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp206 $const6 $const3 $const10 	%line{34} %argrw{"wrrr"}
	mul		$tmp207 $tmp206 $const5 	%argrw{"wrr"}
	add		$tmp208 $const5 $tmp207 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:35
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp209 $const6 $const3 $const16 	%line{35} %argrw{"wrrr"}
	mul		$tmp210 $tmp209 $const5 	%argrw{"wrr"}
	add		$tmp211 $const5 $tmp210 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp202 $tmp205 $tmp208 $tmp211 	%line{33} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:99
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	add		$tmp212 ___517_p $tmp202 	%line{99} %argrw{"wrr"}
	functioncall	$const7 534 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp212 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp213 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp213 533 533 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp201 $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp201 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:99
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	mul		$tmp214 $tmp201 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{99} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:100
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	functioncall	$const23 546 	%line{100} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp217 $const6 $const10 $const3 	%line{33} %argrw{"wrrr"}
	mul		$tmp218 $tmp217 $const5 	%argrw{"wrr"}
	add		$tmp219 $const5 $tmp218 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp220 $const6 $const10 $const10 	%line{34} %argrw{"wrrr"}
	mul		$tmp221 $tmp220 $const5 	%argrw{"wrr"}
	add		$tmp222 $const5 $tmp221 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:35
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp223 $const6 $const10 $const16 	%line{35} %argrw{"wrrr"}
	mul		$tmp224 $tmp223 $const5 	%argrw{"wrr"}
	add		$tmp225 $const5 $tmp224 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp216 $tmp219 $tmp222 $tmp225 	%line{33} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:100
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	add		$tmp226 ___517_p $tmp216 	%line{100} %argrw{"wrr"}
	functioncall	$const7 554 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp226 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp227 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp227 553 553 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp215 $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp215 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:100
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	mul		$tmp228 $tmp215 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{100} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:101
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	functioncall	$const23 566 	%line{101} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp231 $const6 $const16 $const3 	%line{33} %argrw{"wrrr"}
	mul		$tmp232 $tmp231 $const5 	%argrw{"wrr"}
	add		$tmp233 $const5 $tmp232 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp234 $const6 $const16 $const10 	%line{34} %argrw{"wrrr"}
	mul		$tmp235 $tmp234 $const5 	%argrw{"wrr"}
	add		$tmp236 $const5 $tmp235 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:35
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp237 $const6 $const16 $const16 	%line{35} %argrw{"wrrr"}
	mul		$tmp238 $tmp237 $const5 	%argrw{"wrr"}
	add		$tmp239 $const5 $tmp238 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp230 $tmp233 $tmp236 $tmp239 	%line{33} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:101
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	add		$tmp240 ___517_p $tmp230 	%line{101} %argrw{"wrr"}
	functioncall	$const7 574 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp240 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp241 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp241 573 573 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp229 $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp229 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:101
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	mul		$tmp242 $tmp229 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{101} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:99
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	point		$tmp200 $tmp214 $tmp228 $tmp242 	%line{99} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:101
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	add		___517_p ___517_p $tmp200 	%line{101} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:104
#   float value = fractal_noise(p, detail, roughness, lacunarity, use_normalize);
	functioncall	$const9 639 	%line{104} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:141
#   float fscale = 1.0;
	assign		___482_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{141} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:142
#   float amp = 1.0;
	assign		___482_amp $const10 	%line{142} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:143
#   float maxamp = 0.0;
	assign		___482_maxamp $const3 	%line{143} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:144
#   float sum = 0.0;
	assign		___482_sum $const3 	%line{144} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:145
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 585 	%line{145} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp243 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___482_octaves $tmp243 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:146
#   int n = (int)octaves;
	assign		___482_n ___482_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{146} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:147
#   for (int i = 0; i <= n; i++) {
	for		$tmp245 588 590 606 608 	%line{147} %argrw{"r"}
	assign		___483_i $const13 	%argrw{"wr"}
	le		$tmp244 ___483_i ___482_n 	%argrw{"wrr"}
	neq		$tmp245 $tmp244 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:148
#     float t = safe_snoise(fscale * p);
	mul		$tmp246 ___482_fscale ___517_p 	%line{148} %argrw{"wrr"}
	functioncall	$const7 598 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp246 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp247 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp247 597 597 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___484_t $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___484_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:149
#     sum += t * amp;
	mul		$tmp248 ___484_t ___482_amp 	%line{149} %argrw{"wrr"}
	add		___482_sum ___482_sum $tmp248 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:150
#     maxamp += amp;
	add		___482_maxamp ___482_maxamp ___482_amp 	%line{150} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:151
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 604 	%line{151} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp250 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp249 $tmp250 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:151
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___482_amp ___482_amp $tmp249 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{151} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:152
#     fscale *= lacunarity;
	mul		___482_fscale ___482_fscale Lacunarity 	%line{152} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:147
#   for (int i = 0; i <= n; i++) {
	assign		$tmp251 ___483_i 	%line{147} %argrw{"wr"}
	add		___483_i ___483_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:154
#   float rmd = octaves - floor(octaves);
	floor		$tmp252 ___482_octaves 	%line{154} %argrw{"wr"}
	sub		___482_rmd ___482_octaves $tmp252 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:155
#   if (rmd != 0.0) {
	neq		$tmp253 ___482_rmd $const3 	%line{155} %argrw{"wrr"}
	if		$tmp253 633 639 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:156
#     float t = safe_snoise(fscale * p);
	mul		$tmp254 ___482_fscale ___517_p 	%line{156} %argrw{"wrr"}
	functioncall	$const7 620 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp254 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp255 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp255 619 619 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___485_t $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___485_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:157
#     float sum2 = sum + t * amp;
	mul		$tmp256 ___485_t ___482_amp 	%line{157} %argrw{"wrr"}
	add		___485_sum2 ___482_sum $tmp256 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:158
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 631 632 	%line{158} %argrw{"r"}
	mul		$tmp257 $const15 ___482_sum 	%argrw{"wrr"}
	div		$tmp258 $tmp257 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp259 $tmp258 $const15 	%argrw{"wrr"}
	mul		$tmp260 $const15 ___485_sum2 	%argrw{"wrr"}
	add		$tmp261 ___482_maxamp ___482_amp 	%argrw{"wrr"}
	div		$tmp262 $tmp260 $tmp261 	%argrw{"wrr"}
	add		$tmp263 $tmp262 $const15 	%argrw{"wrr"}
	mix		___517_value $tmp259 $tmp263 ___482_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:159
#                            mix(sum, sum2, rmd);
	mix		___517_value ___482_sum ___485_sum2 ___482_rmd 	%line{159} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:162
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 637 638 	%line{162} %argrw{"r"}
	mul		$tmp264 $const15 ___482_sum 	%argrw{"wrr"}
	div		$tmp265 $tmp264 ___482_maxamp 	%argrw{"wrr"}
	add		___517_value $tmp265 $const15 	%argrw{"wrr"}
	assign		___517_value ___482_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:107
#       fractal_noise(p + random_vector3_offset(3.0), detail, roughness, lacunarity, use_normalize),
	functioncall	$const23 650 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{107} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp268 $const6 $const21 $const3 	%line{33} %argrw{"wrrr"}
	mul		$tmp269 $tmp268 $const5 	%argrw{"wrr"}
	add		$tmp270 $const5 $tmp269 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp271 $const6 $const21 $const10 	%line{34} %argrw{"wrrr"}
	mul		$tmp272 $tmp271 $const5 	%argrw{"wrr"}
	add		$tmp273 $const5 $tmp272 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:35
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp274 $const6 $const21 $const16 	%line{35} %argrw{"wrrr"}
	mul		$tmp275 $tmp274 $const5 	%argrw{"wrr"}
	add		$tmp276 $const5 $tmp275 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp267 $tmp270 $tmp273 $tmp276 	%line{33} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:107
#       fractal_noise(p + random_vector3_offset(3.0), detail, roughness, lacunarity, use_normalize),
	add		$tmp277 ___517_p $tmp267 	%line{107} %argrw{"wrr"}
	functioncall	$const9 713 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:141
#   float fscale = 1.0;
	assign		___482_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{141} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:142
#   float amp = 1.0;
	assign		___482_amp $const10 	%line{142} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:143
#   float maxamp = 0.0;
	assign		___482_maxamp $const3 	%line{143} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:144
#   float sum = 0.0;
	assign		___482_sum $const3 	%line{144} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:145
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 659 	%line{145} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp278 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___482_octaves $tmp278 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:146
#   int n = (int)octaves;
	assign		___482_n ___482_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{146} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:147
#   for (int i = 0; i <= n; i++) {
	for		$tmp280 662 664 680 682 	%line{147} %argrw{"r"}
	assign		___483_i $const13 	%argrw{"wr"}
	le		$tmp279 ___483_i ___482_n 	%argrw{"wrr"}
	neq		$tmp280 $tmp279 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:148
#     float t = safe_snoise(fscale * p);
	mul		$tmp281 ___482_fscale $tmp277 	%line{148} %argrw{"wrr"}
	functioncall	$const7 672 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp281 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp282 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp282 671 671 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___484_t $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___484_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:149
#     sum += t * amp;
	mul		$tmp283 ___484_t ___482_amp 	%line{149} %argrw{"wrr"}
	add		___482_sum ___482_sum $tmp283 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:150
#     maxamp += amp;
	add		___482_maxamp ___482_maxamp ___482_amp 	%line{150} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:151
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 678 	%line{151} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp285 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp284 $tmp285 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:151
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___482_amp ___482_amp $tmp284 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{151} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:152
#     fscale *= lacunarity;
	mul		___482_fscale ___482_fscale Lacunarity 	%line{152} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:147
#   for (int i = 0; i <= n; i++) {
	assign		$tmp286 ___483_i 	%line{147} %argrw{"wr"}
	add		___483_i ___483_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:154
#   float rmd = octaves - floor(octaves);
	floor		$tmp287 ___482_octaves 	%line{154} %argrw{"wr"}
	sub		___482_rmd ___482_octaves $tmp287 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:155
#   if (rmd != 0.0) {
	neq		$tmp288 ___482_rmd $const3 	%line{155} %argrw{"wrr"}
	if		$tmp288 707 713 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:156
#     float t = safe_snoise(fscale * p);
	mul		$tmp289 ___482_fscale $tmp277 	%line{156} %argrw{"wrr"}
	functioncall	$const7 694 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp289 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp290 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp290 693 693 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___485_t $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___485_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:157
#     float sum2 = sum + t * amp;
	mul		$tmp291 ___485_t ___482_amp 	%line{157} %argrw{"wrr"}
	add		___485_sum2 ___482_sum $tmp291 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:158
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 705 706 	%line{158} %argrw{"r"}
	mul		$tmp292 $const15 ___482_sum 	%argrw{"wrr"}
	div		$tmp293 $tmp292 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp294 $tmp293 $const15 	%argrw{"wrr"}
	mul		$tmp295 $const15 ___485_sum2 	%argrw{"wrr"}
	add		$tmp296 ___482_maxamp ___482_amp 	%argrw{"wrr"}
	div		$tmp297 $tmp295 $tmp296 	%argrw{"wrr"}
	add		$tmp298 $tmp297 $const15 	%argrw{"wrr"}
	mix		$tmp266 $tmp294 $tmp298 ___482_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:159
#                            mix(sum, sum2, rmd);
	mix		$tmp266 ___482_sum ___485_sum2 ___482_rmd 	%line{159} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:162
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 711 712 	%line{162} %argrw{"r"}
	mul		$tmp299 $const15 ___482_sum 	%argrw{"wrr"}
	div		$tmp300 $tmp299 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp266 $tmp300 $const15 	%argrw{"wrr"}
	assign		$tmp266 ___482_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:108
#       fractal_noise(p + random_vector3_offset(4.0), detail, roughness, lacunarity, use_normalize));
	functioncall	$const23 724 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{108} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp303 $const6 $const24 $const3 	%line{33} %argrw{"wrrr"}
	mul		$tmp304 $tmp303 $const5 	%argrw{"wrr"}
	add		$tmp305 $const5 $tmp304 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp306 $const6 $const24 $const10 	%line{34} %argrw{"wrrr"}
	mul		$tmp307 $tmp306 $const5 	%argrw{"wrr"}
	add		$tmp308 $const5 $tmp307 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:35
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp309 $const6 $const24 $const16 	%line{35} %argrw{"wrrr"}
	mul		$tmp310 $tmp309 $const5 	%argrw{"wrr"}
	add		$tmp311 $const5 $tmp310 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp302 $tmp305 $tmp308 $tmp311 	%line{33} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:108
#       fractal_noise(p + random_vector3_offset(4.0), detail, roughness, lacunarity, use_normalize));
	add		$tmp312 ___517_p $tmp302 	%line{108} %argrw{"wrr"}
	functioncall	$const9 787 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:141
#   float fscale = 1.0;
	assign		___482_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{141} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:142
#   float amp = 1.0;
	assign		___482_amp $const10 	%line{142} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:143
#   float maxamp = 0.0;
	assign		___482_maxamp $const3 	%line{143} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:144
#   float sum = 0.0;
	assign		___482_sum $const3 	%line{144} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:145
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 733 	%line{145} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp313 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___482_octaves $tmp313 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:146
#   int n = (int)octaves;
	assign		___482_n ___482_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{146} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:147
#   for (int i = 0; i <= n; i++) {
	for		$tmp315 736 738 754 756 	%line{147} %argrw{"r"}
	assign		___483_i $const13 	%argrw{"wr"}
	le		$tmp314 ___483_i ___482_n 	%argrw{"wrr"}
	neq		$tmp315 $tmp314 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:148
#     float t = safe_snoise(fscale * p);
	mul		$tmp316 ___482_fscale $tmp312 	%line{148} %argrw{"wrr"}
	functioncall	$const7 746 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp316 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp317 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp317 745 745 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___484_t $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___484_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:149
#     sum += t * amp;
	mul		$tmp318 ___484_t ___482_amp 	%line{149} %argrw{"wrr"}
	add		___482_sum ___482_sum $tmp318 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:150
#     maxamp += amp;
	add		___482_maxamp ___482_maxamp ___482_amp 	%line{150} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:151
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 752 	%line{151} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp320 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp319 $tmp320 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:151
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___482_amp ___482_amp $tmp319 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{151} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:152
#     fscale *= lacunarity;
	mul		___482_fscale ___482_fscale Lacunarity 	%line{152} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:147
#   for (int i = 0; i <= n; i++) {
	assign		$tmp321 ___483_i 	%line{147} %argrw{"wr"}
	add		___483_i ___483_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:154
#   float rmd = octaves - floor(octaves);
	floor		$tmp322 ___482_octaves 	%line{154} %argrw{"wr"}
	sub		___482_rmd ___482_octaves $tmp322 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:155
#   if (rmd != 0.0) {
	neq		$tmp323 ___482_rmd $const3 	%line{155} %argrw{"wrr"}
	if		$tmp323 781 787 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:156
#     float t = safe_snoise(fscale * p);
	mul		$tmp324 ___482_fscale $tmp312 	%line{156} %argrw{"wrr"}
	functioncall	$const7 768 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const8 $tmp324 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp325 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp325 767 767 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___485_t $const3 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___485_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:157
#     float sum2 = sum + t * amp;
	mul		$tmp326 ___485_t ___482_amp 	%line{157} %argrw{"wrr"}
	add		___485_sum2 ___482_sum $tmp326 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:158
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 779 780 	%line{158} %argrw{"r"}
	mul		$tmp327 $const15 ___482_sum 	%argrw{"wrr"}
	div		$tmp328 $tmp327 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp329 $tmp328 $const15 	%argrw{"wrr"}
	mul		$tmp330 $const15 ___485_sum2 	%argrw{"wrr"}
	add		$tmp331 ___482_maxamp ___482_amp 	%argrw{"wrr"}
	div		$tmp332 $tmp330 $tmp331 	%argrw{"wrr"}
	add		$tmp333 $tmp332 $const15 	%argrw{"wrr"}
	mix		$tmp301 $tmp329 $tmp333 ___482_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:159
#                            mix(sum, sum2, rmd);
	mix		$tmp301 ___482_sum ___485_sum2 ___482_rmd 	%line{159} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:162
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 785 786 	%line{162} %argrw{"r"}
	mul		$tmp334 $const15 ___482_sum 	%argrw{"wrr"}
	div		$tmp335 $tmp334 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp301 $tmp335 $const15 	%argrw{"wrr"}
	assign		$tmp301 ___482_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:105
#   Color = color(
	color		Color ___517_value $tmp266 $tmp301 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{105} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:109
#   return value;
	assign		Fac ___517_value 	%line{109} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:164
#   else if (dimensions == "4D")
	eq		$tmp336 dimensions $const25 	%line{164} %argrw{"wrr"}
	if		$tmp336 1199 1200 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:165
#     Fac = noise_texture(vector4(p[0], p[1], p[2], w),
	compref		$tmp337.x p $const13 	%line{165} %argrw{"wrr"}
	compref		$tmp337.y p $const14 	%argrw{"wrr"}
	compref		$tmp337.z p $const26 	%argrw{"wrr"}
	assign		$tmp337.w w 	%argrw{"wr"}
	functioncall	$const2 1199 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:120
#   vector4 p = co;
	assign		___519_p.x $tmp337.x 	%line{120} %argrw{"wr"}
	assign		___519_p.y $tmp337.y 	%argrw{"wr"}
	assign		___519_p.z $tmp337.z 	%argrw{"wr"}
	assign		___519_p.w $tmp337.w 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:121
#   if (distortion != 0.0) {
	neq		$tmp338 Distortion $const3 	%line{121} %argrw{"wrr"}
	if		$tmp338 915 915 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:122
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	functioncall	$const27 815 	%line{122} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp343 $const6 $const3 $const3 	%line{40} %argrw{"wrrr"}
	mul		$tmp344 $tmp343 $const5 	%argrw{"wrr"}
	add		$tmp342.x $const5 $tmp344 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp345 $const6 $const3 $const10 	%line{41} %argrw{"wrrr"}
	mul		$tmp346 $tmp345 $const5 	%argrw{"wrr"}
	add		$tmp342.y $const5 $tmp346 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp347 $const6 $const3 $const16 	%line{42} %argrw{"wrrr"}
	mul		$tmp348 $tmp347 $const5 	%argrw{"wrr"}
	add		$tmp342.z $const5 $tmp348 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:43
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp349 $const6 $const3 $const21 	%line{43} %argrw{"wrrr"}
	mul		$tmp350 $tmp349 $const5 	%argrw{"wrr"}
	add		$tmp342.w $const5 $tmp350 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 820 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp341.x ___519_p.x $tmp342.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp341.y ___519_p.y $tmp342.y 	%argrw{"wrr"}
	add		$tmp341.z ___519_p.z $tmp342.z 	%argrw{"wrr"}
	add		$tmp341.w ___519_p.w $tmp342.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:122
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	functioncall	$const7 828 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{122} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp351 $tmp341.x $tmp341.y $tmp341.z 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp351 $tmp341.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp352 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp352 827 827 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp340 $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp340 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:122
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	mul		$tmp339.x $tmp340 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{122} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:123
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	functioncall	$const27 842 	%line{123} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp356 $const6 $const10 $const3 	%line{40} %argrw{"wrrr"}
	mul		$tmp357 $tmp356 $const5 	%argrw{"wrr"}
	add		$tmp355.x $const5 $tmp357 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp358 $const6 $const10 $const10 	%line{41} %argrw{"wrrr"}
	mul		$tmp359 $tmp358 $const5 	%argrw{"wrr"}
	add		$tmp355.y $const5 $tmp359 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp360 $const6 $const10 $const16 	%line{42} %argrw{"wrrr"}
	mul		$tmp361 $tmp360 $const5 	%argrw{"wrr"}
	add		$tmp355.z $const5 $tmp361 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:43
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp362 $const6 $const10 $const21 	%line{43} %argrw{"wrrr"}
	mul		$tmp363 $tmp362 $const5 	%argrw{"wrr"}
	add		$tmp355.w $const5 $tmp363 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 847 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp354.x ___519_p.x $tmp355.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp354.y ___519_p.y $tmp355.y 	%argrw{"wrr"}
	add		$tmp354.z ___519_p.z $tmp355.z 	%argrw{"wrr"}
	add		$tmp354.w ___519_p.w $tmp355.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:123
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	functioncall	$const7 855 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{123} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp364 $tmp354.x $tmp354.y $tmp354.z 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp364 $tmp354.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp365 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp365 854 854 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp353 $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp353 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:123
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	mul		$tmp339.y $tmp353 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{123} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:124
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	functioncall	$const27 869 	%line{124} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp369 $const6 $const16 $const3 	%line{40} %argrw{"wrrr"}
	mul		$tmp370 $tmp369 $const5 	%argrw{"wrr"}
	add		$tmp368.x $const5 $tmp370 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp371 $const6 $const16 $const10 	%line{41} %argrw{"wrrr"}
	mul		$tmp372 $tmp371 $const5 	%argrw{"wrr"}
	add		$tmp368.y $const5 $tmp372 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp373 $const6 $const16 $const16 	%line{42} %argrw{"wrrr"}
	mul		$tmp374 $tmp373 $const5 	%argrw{"wrr"}
	add		$tmp368.z $const5 $tmp374 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:43
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp375 $const6 $const16 $const21 	%line{43} %argrw{"wrrr"}
	mul		$tmp376 $tmp375 $const5 	%argrw{"wrr"}
	add		$tmp368.w $const5 $tmp376 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 874 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp367.x ___519_p.x $tmp368.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp367.y ___519_p.y $tmp368.y 	%argrw{"wrr"}
	add		$tmp367.z ___519_p.z $tmp368.z 	%argrw{"wrr"}
	add		$tmp367.w ___519_p.w $tmp368.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:124
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	functioncall	$const7 882 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{124} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp377 $tmp367.x $tmp367.y $tmp367.z 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp377 $tmp367.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp378 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp378 881 881 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp366 $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp366 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:124
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	mul		$tmp339.z $tmp366 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{124} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:125
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	functioncall	$const27 896 	%line{125} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp382 $const6 $const21 $const3 	%line{40} %argrw{"wrrr"}
	mul		$tmp383 $tmp382 $const5 	%argrw{"wrr"}
	add		$tmp381.x $const5 $tmp383 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp384 $const6 $const21 $const10 	%line{41} %argrw{"wrrr"}
	mul		$tmp385 $tmp384 $const5 	%argrw{"wrr"}
	add		$tmp381.y $const5 $tmp385 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp386 $const6 $const21 $const16 	%line{42} %argrw{"wrrr"}
	mul		$tmp387 $tmp386 $const5 	%argrw{"wrr"}
	add		$tmp381.z $const5 $tmp387 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:43
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp388 $const6 $const21 $const21 	%line{43} %argrw{"wrrr"}
	mul		$tmp389 $tmp388 $const5 	%argrw{"wrr"}
	add		$tmp381.w $const5 $tmp389 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 901 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp380.x ___519_p.x $tmp381.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp380.y ___519_p.y $tmp381.y 	%argrw{"wrr"}
	add		$tmp380.z ___519_p.z $tmp381.z 	%argrw{"wrr"}
	add		$tmp380.w ___519_p.w $tmp381.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:125
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	functioncall	$const7 909 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{125} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp390 $tmp380.x $tmp380.y $tmp380.z 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp390 $tmp380.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp391 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp391 908 908 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp379 $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp379 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:125
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	mul		$tmp339.w $tmp379 Distortion 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{125} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 915 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___519_p.x ___519_p.x $tmp339.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___519_p.y ___519_p.y $tmp339.y 	%argrw{"wrr"}
	add		___519_p.z ___519_p.z $tmp339.z 	%argrw{"wrr"}
	add		___519_p.w ___519_p.w $tmp339.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:128
#   float value = fractal_noise(p, detail, roughness, lacunarity, use_normalize);
	functioncall	$const9 997 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{128} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:169
#   float fscale = 1.0;
	assign		___487_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{169} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:170
#   float amp = 1.0;
	assign		___487_amp $const10 	%line{170} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:171
#   float maxamp = 0.0;
	assign		___487_maxamp $const3 	%line{171} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:172
#   float sum = 0.0;
	assign		___487_sum $const3 	%line{172} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:173
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 923 	%line{173} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp392 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___487_octaves $tmp392 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:174
#   int n = (int)octaves;
	assign		___487_n ___487_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{174} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:175
#   for (int i = 0; i <= n; i++) {
	for		$tmp394 926 928 954 956 	%line{175} %argrw{"r"}
	assign		___488_i $const13 	%argrw{"wr"}
	le		$tmp393 ___488_i ___487_n 	%argrw{"wrr"}
	neq		$tmp394 $tmp393 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 938 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp396.x ___487_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp396.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp396.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp396.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 938 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp395.x $tmp396.x ___519_p.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp395.y $tmp396.y ___519_p.y 	%argrw{"wrr"}
	mul		$tmp395.z $tmp396.z ___519_p.z 	%argrw{"wrr"}
	mul		$tmp395.w $tmp396.w ___519_p.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:176
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 946 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{176} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp397 $tmp395.x $tmp395.y $tmp395.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp397 $tmp395.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp398 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp398 945 945 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___489_t $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___489_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:177
#     sum += t * amp;
	mul		$tmp399 ___489_t ___487_amp 	%line{177} %argrw{"wrr"}
	add		___487_sum ___487_sum $tmp399 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:178
#     maxamp += amp;
	add		___487_maxamp ___487_maxamp ___487_amp 	%line{178} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:179
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 952 	%line{179} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp401 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp400 $tmp401 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:179
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___487_amp ___487_amp $tmp400 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{179} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:180
#     fscale *= lacunarity;
	mul		___487_fscale ___487_fscale Lacunarity 	%line{180} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:175
#   for (int i = 0; i <= n; i++) {
	assign		$tmp402 ___488_i 	%line{175} %argrw{"wr"}
	add		___488_i ___488_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:182
#   float rmd = octaves - floor(octaves);
	floor		$tmp403 ___487_octaves 	%line{182} %argrw{"wr"}
	sub		___487_rmd ___487_octaves $tmp403 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:183
#   if (rmd != 0.0) {
	neq		$tmp404 ___487_rmd $const3 	%line{183} %argrw{"wrr"}
	if		$tmp404 991 997 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 970 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp406.x ___487_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp406.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp406.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp406.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 970 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp405.x $tmp406.x ___519_p.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp405.y $tmp406.y ___519_p.y 	%argrw{"wrr"}
	mul		$tmp405.z $tmp406.z ___519_p.z 	%argrw{"wrr"}
	mul		$tmp405.w $tmp406.w ___519_p.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:184
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 978 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{184} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp407 $tmp405.x $tmp405.y $tmp405.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp407 $tmp405.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp408 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp408 977 977 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___490_t $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___490_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:185
#     float sum2 = sum + t * amp;
	mul		$tmp409 ___490_t ___487_amp 	%line{185} %argrw{"wrr"}
	add		___490_sum2 ___487_sum $tmp409 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:186
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 989 990 	%line{186} %argrw{"r"}
	mul		$tmp410 $const15 ___487_sum 	%argrw{"wrr"}
	div		$tmp411 $tmp410 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp412 $tmp411 $const15 	%argrw{"wrr"}
	mul		$tmp413 $const15 ___490_sum2 	%argrw{"wrr"}
	add		$tmp414 ___487_maxamp ___487_amp 	%argrw{"wrr"}
	div		$tmp415 $tmp413 $tmp414 	%argrw{"wrr"}
	add		$tmp416 $tmp415 $const15 	%argrw{"wrr"}
	mix		___519_value $tmp412 $tmp416 ___487_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:187
#                            mix(sum, sum2, rmd);
	mix		___519_value ___487_sum ___490_sum2 ___487_rmd 	%line{187} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:190
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 995 996 	%line{190} %argrw{"r"}
	mul		$tmp417 $const15 ___487_sum 	%argrw{"wrr"}
	div		$tmp418 $tmp417 ___487_maxamp 	%argrw{"wrr"}
	add		___519_value $tmp418 $const15 	%argrw{"wrr"}
	assign		___519_value ___487_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:131
#       fractal_noise(p + random_vector4_offset(4.0), detail, roughness, lacunarity, use_normalize),
	functioncall	$const27 1010 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{131} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp422 $const6 $const24 $const3 	%line{40} %argrw{"wrrr"}
	mul		$tmp423 $tmp422 $const5 	%argrw{"wrr"}
	add		$tmp421.x $const5 $tmp423 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp424 $const6 $const24 $const10 	%line{41} %argrw{"wrrr"}
	mul		$tmp425 $tmp424 $const5 	%argrw{"wrr"}
	add		$tmp421.y $const5 $tmp425 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp426 $const6 $const24 $const16 	%line{42} %argrw{"wrrr"}
	mul		$tmp427 $tmp426 $const5 	%argrw{"wrr"}
	add		$tmp421.z $const5 $tmp427 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:43
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp428 $const6 $const24 $const21 	%line{43} %argrw{"wrrr"}
	mul		$tmp429 $tmp428 $const5 	%argrw{"wrr"}
	add		$tmp421.w $const5 $tmp429 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 1015 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp420.x ___519_p.x $tmp421.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp420.y ___519_p.y $tmp421.y 	%argrw{"wrr"}
	add		$tmp420.z ___519_p.z $tmp421.z 	%argrw{"wrr"}
	add		$tmp420.w ___519_p.w $tmp421.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:131
#       fractal_noise(p + random_vector4_offset(4.0), detail, roughness, lacunarity, use_normalize),
	functioncall	$const9 1097 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{131} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:169
#   float fscale = 1.0;
	assign		___487_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{169} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:170
#   float amp = 1.0;
	assign		___487_amp $const10 	%line{170} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:171
#   float maxamp = 0.0;
	assign		___487_maxamp $const3 	%line{171} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:172
#   float sum = 0.0;
	assign		___487_sum $const3 	%line{172} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:173
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 1023 	%line{173} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp430 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___487_octaves $tmp430 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:174
#   int n = (int)octaves;
	assign		___487_n ___487_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{174} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:175
#   for (int i = 0; i <= n; i++) {
	for		$tmp432 1026 1028 1054 1056 	%line{175} %argrw{"r"}
	assign		___488_i $const13 	%argrw{"wr"}
	le		$tmp431 ___488_i ___487_n 	%argrw{"wrr"}
	neq		$tmp432 $tmp431 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 1038 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp434.x ___487_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp434.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp434.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp434.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 1038 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp433.x $tmp434.x $tmp420.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp433.y $tmp434.y $tmp420.y 	%argrw{"wrr"}
	mul		$tmp433.z $tmp434.z $tmp420.z 	%argrw{"wrr"}
	mul		$tmp433.w $tmp434.w $tmp420.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:176
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 1046 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{176} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp435 $tmp433.x $tmp433.y $tmp433.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp435 $tmp433.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp436 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp436 1045 1045 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___489_t $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___489_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:177
#     sum += t * amp;
	mul		$tmp437 ___489_t ___487_amp 	%line{177} %argrw{"wrr"}
	add		___487_sum ___487_sum $tmp437 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:178
#     maxamp += amp;
	add		___487_maxamp ___487_maxamp ___487_amp 	%line{178} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:179
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 1052 	%line{179} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp439 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp438 $tmp439 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:179
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___487_amp ___487_amp $tmp438 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{179} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:180
#     fscale *= lacunarity;
	mul		___487_fscale ___487_fscale Lacunarity 	%line{180} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:175
#   for (int i = 0; i <= n; i++) {
	assign		$tmp440 ___488_i 	%line{175} %argrw{"wr"}
	add		___488_i ___488_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:182
#   float rmd = octaves - floor(octaves);
	floor		$tmp441 ___487_octaves 	%line{182} %argrw{"wr"}
	sub		___487_rmd ___487_octaves $tmp441 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:183
#   if (rmd != 0.0) {
	neq		$tmp442 ___487_rmd $const3 	%line{183} %argrw{"wrr"}
	if		$tmp442 1091 1097 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 1070 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp444.x ___487_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp444.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp444.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp444.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 1070 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp443.x $tmp444.x $tmp420.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp443.y $tmp444.y $tmp420.y 	%argrw{"wrr"}
	mul		$tmp443.z $tmp444.z $tmp420.z 	%argrw{"wrr"}
	mul		$tmp443.w $tmp444.w $tmp420.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:184
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 1078 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{184} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp445 $tmp443.x $tmp443.y $tmp443.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp445 $tmp443.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp446 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp446 1077 1077 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___490_t $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___490_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:185
#     float sum2 = sum + t * amp;
	mul		$tmp447 ___490_t ___487_amp 	%line{185} %argrw{"wrr"}
	add		___490_sum2 ___487_sum $tmp447 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:186
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 1089 1090 	%line{186} %argrw{"r"}
	mul		$tmp448 $const15 ___487_sum 	%argrw{"wrr"}
	div		$tmp449 $tmp448 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp450 $tmp449 $const15 	%argrw{"wrr"}
	mul		$tmp451 $const15 ___490_sum2 	%argrw{"wrr"}
	add		$tmp452 ___487_maxamp ___487_amp 	%argrw{"wrr"}
	div		$tmp453 $tmp451 $tmp452 	%argrw{"wrr"}
	add		$tmp454 $tmp453 $const15 	%argrw{"wrr"}
	mix		$tmp419 $tmp450 $tmp454 ___487_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:187
#                            mix(sum, sum2, rmd);
	mix		$tmp419 ___487_sum ___490_sum2 ___487_rmd 	%line{187} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:190
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 1095 1096 	%line{190} %argrw{"r"}
	mul		$tmp455 $const15 ___487_sum 	%argrw{"wrr"}
	div		$tmp456 $tmp455 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp419 $tmp456 $const15 	%argrw{"wrr"}
	assign		$tmp419 ___487_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:132
#       fractal_noise(p + random_vector4_offset(5.0), detail, roughness, lacunarity, use_normalize));
	functioncall	$const27 1110 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{132} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp460 $const6 $const28 $const3 	%line{40} %argrw{"wrrr"}
	mul		$tmp461 $tmp460 $const5 	%argrw{"wrr"}
	add		$tmp459.x $const5 $tmp461 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp462 $const6 $const28 $const10 	%line{41} %argrw{"wrrr"}
	mul		$tmp463 $tmp462 $const5 	%argrw{"wrr"}
	add		$tmp459.y $const5 $tmp463 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp464 $const6 $const28 $const16 	%line{42} %argrw{"wrrr"}
	mul		$tmp465 $tmp464 $const5 	%argrw{"wrr"}
	add		$tmp459.z $const5 $tmp465 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:43
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp466 $const6 $const28 $const21 	%line{43} %argrw{"wrrr"}
	mul		$tmp467 $tmp466 $const5 	%argrw{"wrr"}
	add		$tmp459.w $const5 $tmp467 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const19 1115 	%line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp458.x ___519_p.x $tmp459.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp458.y ___519_p.y $tmp459.y 	%argrw{"wrr"}
	add		$tmp458.z ___519_p.z $tmp459.z 	%argrw{"wrr"}
	add		$tmp458.w ___519_p.w $tmp459.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:132
#       fractal_noise(p + random_vector4_offset(5.0), detail, roughness, lacunarity, use_normalize));
	functioncall	$const9 1197 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{132} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:169
#   float fscale = 1.0;
	assign		___487_fscale $const10 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{169} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:170
#   float amp = 1.0;
	assign		___487_amp $const10 	%line{170} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:171
#   float maxamp = 0.0;
	assign		___487_maxamp $const3 	%line{171} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:172
#   float sum = 0.0;
	assign		___487_sum $const3 	%line{172} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:173
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 1123 	%line{173} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp468 Detail $const11 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___487_octaves $tmp468 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:174
#   int n = (int)octaves;
	assign		___487_n ___487_octaves 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{174} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:175
#   for (int i = 0; i <= n; i++) {
	for		$tmp470 1126 1128 1154 1156 	%line{175} %argrw{"r"}
	assign		___488_i $const13 	%argrw{"wr"}
	le		$tmp469 ___488_i ___487_n 	%argrw{"wrr"}
	neq		$tmp470 $tmp469 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 1138 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp472.x ___487_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp472.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp472.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp472.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 1138 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp471.x $tmp472.x $tmp458.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp471.y $tmp472.y $tmp458.y 	%argrw{"wrr"}
	mul		$tmp471.z $tmp472.z $tmp458.z 	%argrw{"wrr"}
	mul		$tmp471.w $tmp472.w $tmp458.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:176
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 1146 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{176} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp473 $tmp471.x $tmp471.y $tmp471.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp473 $tmp471.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp474 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp474 1145 1145 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___489_t $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___489_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:177
#     sum += t * amp;
	mul		$tmp475 ___489_t ___487_amp 	%line{177} %argrw{"wrr"}
	add		___487_sum ___487_sum $tmp475 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:178
#     maxamp += amp;
	add		___487_maxamp ___487_maxamp ___487_amp 	%line{178} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:179
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 1152 	%line{179} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp477 Roughness $const10 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp476 $tmp477 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:179
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___487_amp ___487_amp $tmp476 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{179} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:180
#     fscale *= lacunarity;
	mul		___487_fscale ___487_fscale Lacunarity 	%line{180} %argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:175
#   for (int i = 0; i <= n; i++) {
	assign		$tmp478 ___488_i 	%line{175} %argrw{"wr"}
	add		___488_i ___488_i $const14 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:182
#   float rmd = octaves - floor(octaves);
	floor		$tmp479 ___487_octaves 	%line{182} %argrw{"wr"}
	sub		___487_rmd ___487_octaves $tmp479 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:183
#   if (rmd != 0.0) {
	neq		$tmp480 ___487_rmd $const3 	%line{183} %argrw{"wrr"}
	if		$tmp480 1191 1197 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 1170 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp482.x ___487_fscale 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp482.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp482.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp482.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:175
# 
	functioncall	$const20 1170 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{175} %argrw{"r"}
# /Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp481.x $tmp482.x $tmp458.x 	%filename{"/Users/blender/git/blender-v400/lib/darwin/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp481.y $tmp482.y $tmp458.y 	%argrw{"wrr"}
	mul		$tmp481.z $tmp482.z $tmp458.z 	%argrw{"wrr"}
	mul		$tmp481.w $tmp482.w $tmp458.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:184
#     float t = safe_snoise(fscale * p);
	functioncall	$const7 1178 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{184} %argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp483 $tmp481.x $tmp481.y $tmp481.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const8 $tmp483 $tmp481.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp484 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp484 1177 1177 	%argrw{"r"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___490_t $const3 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___490_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:185
#     float sum2 = sum + t * amp;
	mul		$tmp485 ___490_t ___487_amp 	%line{185} %argrw{"wrr"}
	add		___490_sum2 ___487_sum $tmp485 	%argrw{"wrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:186
#     return use_normalize ? mix(0.5 * sum / maxamp + 0.5, 0.5 * sum2 / (maxamp + amp) + 0.5, rmd) :
	if		use_normalize 1189 1190 	%line{186} %argrw{"r"}
	mul		$tmp486 $const15 ___487_sum 	%argrw{"wrr"}
	div		$tmp487 $tmp486 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp488 $tmp487 $const15 	%argrw{"wrr"}
	mul		$tmp489 $const15 ___490_sum2 	%argrw{"wrr"}
	add		$tmp490 ___487_maxamp ___487_amp 	%argrw{"wrr"}
	div		$tmp491 $tmp489 $tmp490 	%argrw{"wrr"}
	add		$tmp492 $tmp491 $const15 	%argrw{"wrr"}
	mix		$tmp457 $tmp488 $tmp492 ___487_rmd 	%argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:187
#                            mix(sum, sum2, rmd);
	mix		$tmp457 ___487_sum ___490_sum2 ___487_rmd 	%line{187} %argrw{"wrrr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:190
#     return use_normalize ? 0.5 * sum / maxamp + 0.5 : sum;
	if		use_normalize 1195 1196 	%line{190} %argrw{"r"}
	mul		$tmp493 $const15 ___487_sum 	%argrw{"wrr"}
	div		$tmp494 $tmp493 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp457 $tmp494 $const15 	%argrw{"wrr"}
	assign		$tmp457 ___487_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:129
#   Color = color(
	color		Color ___519_value $tmp419 $tmp457 	%filename{"/Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{129} %argrw{"wrrr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:133
#   return value;
	assign		Fac ___519_value 	%line{133} %argrw{"wr"}
# /Users/blender/git/blender-v400/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:173
#     error("Unknown dimension!");
	error		$const29 	%line{173} %argrw{"r"}
	end
