# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cosmosid', 'cosmosid.api', 'cosmosid.commands', 'cosmosid.helpers']

package_data = \
{'': ['*']}

install_requires = \
['boto3>=1.21.28',
 'cliff>=3.10.1',
 'concurrent-log-handler>=0.9.20,<0.10.0',
 'importlib_metadata>=4.8.3,<5.0.0',
 'requests>=2.27.1',
 's3transfer>=0.5.2']

extras_require = \
{'pycurl': ['pycurl>=7.45.1,<8.0.0']}

entry_points = \
{'console_scripts': ['cosmosid = cosmosid.cli:main'],
 'cosmosid': ['analysis = cosmosid.commands.analysis:Analysis',
              'artifacts = cosmosid.commands.artifacts:Artifacts',
              'comparative_analyses = '
              'cosmosid.commands.comparative_analyses:ComparativeAnalyses',
              'comparative_analyses_export = '
              'cosmosid.commands.comparative_analyses_export:ComparativeAnalysesExport',
              'comparatives = cosmosid.commands.comparatives:Comparatives',
              'downloads = cosmosid.commands.downloads:Downloads',
              'files = cosmosid.commands.files:Files',
              'reports = cosmosid.commands.reports:Reports',
              'runs = cosmosid.commands.runs:Runs',
              'upload = cosmosid.commands.upload:Upload']}

setup_kwargs = {
    'name': 'cosmosid-cli',
    'version': '2.1.9',
    'description': 'Command line interface (CLI) and Python 3 client library for interacting with the CosmosID API',
    'long_description': '# CosmosID-HUB Microbiome CLI\n\nCommand line interface (CLI) and Python 3 client library for interacting with the CosmosID-HUB API. Only works with\nPython [3.6,3.7,3.8,3.9,3.10].\n\n## Requirements\n\n### OS Packages\n\n* python3\n* python3-pip\n\n### Python package\n\n* poetry\n\n# Installation\n\nThis package provides:\n\n* core Python 3 client library;\n* a simple CLI for interacting with the CosmosID-HUB API;\n\n## Basic installation\n\nThe CLI with the core Python library can be installed using `pip3`.\n\n* simply run from console `sudo pip3 install cosmosid_cli`\n\n> Note: pip3 and setuptools should be upgraded to latest version. Please update those packages on you workstation\n> regarding to your OS update process before setup CosmosID-HUB CLI.\n>\n> ```shell\n> E.g. for Ubuntu 14.04 perform following steps:\n> $ sudo apt-get update\n> $ sudo apt-get upgrade\n> $ sudo -H pip3 install -U pip setuptools\n>```\n>\n> If you had have previously installed CosmosID-HUB CLI just upgrade CLI\n> to latest version.\n>\n> ```shell\n> $ sudo -H pip3 install --upgrade cosmosid_cli\n> ```\n\nTo install package locally from folder with source files do the following:\n\n* install `poetry` check the [doc](https://python-poetry.org/docs/#osx--linux--bashonwindows-install-instructions)\n* `cd cosmosid-cli/package/`\n* `poetry install`\n\n## Installation from package management service Anaconda.org\nAssure that you have Conda already installed or install it based on your system requirements - [link](https://docs.anaconda.com/anaconda/install/ )\n\nFollow the [cosmosid project page](https://anaconda.org/cosmosid/cosmosid-cli) to check the last version of cosmosid-cli available on Anaconda.org\n\nThe CLI with Conda can be installed by the following command:\n```shell\nconda install -c cosmosid -c conda-forge cosmosid-cli\n```\n\nVerify the CLI version installed\n```shell\ncosmosid --version\n```\n\n## Using the CosmosID-HUB CLI\n\nThe CosmosID-HUB CLI supports authentication via CosmosID-HUB API Key.\nYour API key can be found on the [CosmosID-HUB profile page](https://app.cosmosid.com/settings).\nTo automatically authenticate via CosmosID-HUB API Key you should create\ncredential file `~/.cosmosid` and store your API Key into it in\nthe following format:\n\n```json\n{\n  "api_key": "<your api key string>"\n}\n```\n\nYou can directly use your CosmosID-HUB API Key, rather than storing it in a credential file. To use API Key authentication,\npass your key as an argument to the `cosmosid` command:\n\n```shell\ncosmosid --api_key=YOUR_API_KEY <command>\n```\n\nCLI supports files of following extensions: \'fasta\', \'fna\', \'fasta.gz\', \'fastq\', \'fq\', \'fastq.gz\', \'bam\', \'sra\'\n\n## Commands\n\nThere are several types of commands supported by the CosmosID-HUB CLI\n\n1. Commands for retrieving data to terminal (output) from CosmosID cloud - files, runs, analysis.\n2. Commands for uploading metagenomics or amplicon samples to\n   CosmosID cloud for analysis - uploads.\n3. Commands for retrieving the reports archive from CosmosID cloud - reports\n\n> Note: Each command has options. To get usage information for each CosmosID-HUB CLI command, the user can simply\n> run `cosmosid <command> --help`\n\n### Retrieve Files\n\nThe commands for retrieving data have options for output format. The user can get data into the terminal (or another\noutput) in a different format - csv, json, table, value, yaml (table is default), and specify the column(s) to show. In\nadditional there are CSV format options, user can quote\nor unquote or partly quote output values - all, minimal, none, non-numeric (by default only non-numeric values are\nquoted)\n\nExample of output for the --help options for the <files> command:\n\n```shell\n$ cosmosid files --help\nusage: cosmosid files [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN]\n                      [--noindent] [--max-width <integer>] [--fit-width]\n                      [--print-empty] [--quote {all,minimal,none,nonnumeric}]\n                      [--parent PARENT]\n                      [--order {type,name,id,status,size,created}] [--up]\n\nShow files in a given directory.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --parent PARENT, -p PARENT\n                        ID of the parent directory. Default: Root\n  --order {type,name,id,status,reads,created}, -o {type,name,id,status,size,created}\n                        field for ordering\n  --up                  order direction\n\noutput formatters:\n  output formatter options\n\n  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}\n                        the output format, defaults to table\n  -c COLUMN, --column COLUMN\n                        specify the column(s) to include, can be repeated\n\njson formatter:\n  --noindent            whether to disable indenting the JSON\n\ntable formatter:\n  --max-width <integer>\n                        Maximum display width, 1 to disable. You can also use\n                        the CLIFF_MAX_TERM_WIDTH environment variable, but the\n                        parameter takes precedence.\n\n  --fit-width       Fit the table to the display width. Implied if --max-\n                        width greater than 0. Set the environment variable\n                        CLIFF_FIT_WIDTH=1 to always enable\n\n --print-empty     Print empty table if there is no data to show.\n\nCSV Formatter:\n  --quote {all,minimal,none,nonnumeric} when to include quotes, defaults to nonnumeric\n```\n\nTo retrieve files (samples) stored in CosmosID simply run the `cosmosid` command with a `files` subcommand. For example:\n\n```shell\n#to get contents of your CosmosID root folder\ncosmosid files\n\n#to get contents of appropriate folder use its id as argument\ncosmosid files --parent=<folder_id>\n\n#to get ordered list simply use the ordering argument with field name with/without order direction\ncosmosid files --parent=<folder_id> --order size --up\n```\n\n### Retrieve Sample Runs\n\nAn each file (sample) stored in CosmosID has one or more Sample Run(s) associated with it.\n\nExample of output for the --help options for the <runs> command:\n\n```shell\n$ cosmosid runs --help\n\nusage: cosmosid runs [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width <integer>]\n                     [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending] --id ID [--order {id,status,created}] [--up]\n\nShow List Of Runs for a given File.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --id ID, -i ID\n                        ID of the sample\n  --order {id,status,created}, -o {id,status,created}\n                        field for ordering\n  --up                  order direction\n\noutput formatters:\n  output formatter options\n\n  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}\n                        the output format, defaults to table\n  -c COLUMN, --column COLUMN\n                        specify the column(s) to include, can be repeated to show multiple columns\n  --sort-column SORT_COLUMN\n                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated\n  --sort-ascending      sort the column(s) in ascending order\n  --sort-descending     sort the column(s) in descending order\n\nCSV Formatter:\n  --quote {all,minimal,none,nonnumeric}\n                        when to include quotes, defaults to nonnumeric\n\njson formatter:\n  --noindent            whether to disable indenting the JSON\n\ntable formatter:\n  --max-width <integer>\n                        Maximum display width, <1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.\n  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable\n  --print-empty         Print empty table if there is no data to show.\n```\n\n\nFor example:\nTo retrieve sample run(s) associated with a file simply run the `cosmosid` command with `runs` subcommand. \n\n```shell\n#to get runs associated with a speciffic file (sample)\ncosmosid runs --id=<file_id>\n```\n\n### Upload files\n\nThe CosmosID-HUB CLI supports uploading sample files into CosmosID for analysis.\nCosmosID supports the following file formats and extension names:\n.fasta, .fna, .fasta.gz, .fastq, .fq, .fastq.gz, bam, bam.gz, sra, sra.gz. (SRA files can be uploaded without extension)\n\nCosmosID supports the following types of analysis:\n\n* Metagenomics\n* Amplicon - 16S or ITS (only 16S and ITS supported for now)\n\n> Note: you can get usage help for each command and arguments of CosmosID-HUB CLI by simply runnig `cosmosid --help`\n> or `cosmosid <command> --help`\n\n```shell\n# cosmosid upload --help\nusage: cosmosid upload [-h] [--file FILE] [--parent PARENT] --type {metagenomics,amplicon-16s,amplicon-its}\n                       [-wf WORKFLOW] [--forward-primer FORWARD_PRIMER] [--reverse-primer REVERSE_PRIMER]\n                       [--amplicon-preset {v1_v3,v3_v4,v4}]\n                       [--host-name {human:2.0.0,human:1.0.0,dog:2.0.0,domestic_cat:2.0.0,cow:1.0.0,chicken:2.0.0,mouse:2.0.0,monkey:2.0.0,cattle:2.0.0,pig:2.0.0}]\n                       [--dir DIR]\n\nUpload files to cosmosid.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --file FILE, -f FILE\n                        file(s) for upload. Supported file types: fasta, fna, fasta.gz, fastq, fq, fastq.gz, bam, sra e.g. cosmosid upload\n                        -f /path/file1.fasta -f /path/file2.fn\n  --parent PARENT, -p PARENT\n                        cosmosid parent folder ID for upload\n  --type {metagenomics,amplicon-16s,amplicon-its}, -t {metagenomics,amplicon-16s,amplicon-its}\n                        Type of analysis for a file\n  -wf WORKFLOW, --workflow WORKFLOW\n                        To specify multiple workflows, define them coma separated without any additional symbols.For example: -wf\n                        amr_vir,taxa\n  --forward-primer FORWARD_PRIMER\n                        Only for \'ampliseq\' workflow\n  --reverse-primer REVERSE_PRIMER\n                        Only for \'ampliseq\' workflow\n  --amplicon-preset {v1_v3,v3_v4,v4}\n                        Only for \'ampliseq\' workflowv1_v3:\n                        - forward_primer: AGAGTTTGATCCTGGCTCAG\n                        - reverse_primer: ATTACCGCGGCTGCTGG\n                        v3_v4:\n                        - forward_primer: CCTACGGGRSGCAGCA\n                        - reverse_primer: GACTACHVGGGTATCTAATCC\n                        v4:\n                        - forward_primer: GTGYCAGCMGCCGCGGTAA\n                        - reverse_primer: GGACTACHVGGGTWTCTAAT\n  --host-name {human:2.0.0,human:1.0.0,dog:2.0.0,domestic_cat:2.0.0,cow:1.0.0,chicken:2.0.0,mouse:2.0.0,monkey:2.0.0,cattle:2.0.0,pig:2.0.0}\n                        Name for host removal.\n                        *Available only for type `metagenomics`\n                        human:2.0.0 - Human 2.0.0 (GCF_009914755.1_T2T-CHM13v2.0)\n                        human:1.0.0 - Human 1.0.0 (GRCh38_p6)\n                        dog:2.0.0 - Dog (GCF_014441545.1_ROS_Cfam_1.0)\n                        domestic_cat:2.0.0 - Domestic Cat (GCF_018350175.1_F.catus_Fca126_mat1.0)\n                        cow:1.0.0 - Cow (GCF_002263795l_1_ARS-UCD1_2)\n                        chicken:2.0.0 - Chicken (GCF_016699485.2_bGalGal1.mat.broiler.GRCg7b)\n                        mouse:2.0.0 - Mouse (GCF_000001635.27_GRCm39)\n                        monkey:2.0.0 - Monkey (GCF_003339765.1_Mmul_10)\n                        cattle:2.0.0 - Cattle (GCF002263795.2 - ARS-UCD1.3)\n                        pig:2.0.0 - Pig (GCF_000003025.6_Sscrofa11.1)\n  --dir DIR, -d DIR\n                        directory with files for upload e.g. cosmosid upload -d /path/my_dir\n\n```\n\nTo upload sample file to CosmosID run `cosmosid` command with `upload` subcommand. By default samples will be uploaded\ninto root folder. To upload sample into specific *existing* folder you must use id of the folder as parameter.\nThe CosmosID-HUB CLI supports uploading multiple Single-Read and Paired-End samples. For Paired-End samples, the CLI\nautomatically parse and merge samples in pairs if the samples follow the naming conventions like: xxx_R1.fastq and\nxxx_R2.fastq OR xxx_R1_001.fastq and xxx_R2_001.fastq. Note: Paired-End samples require "fastq" format\n\nTo upload all samples from folder run `cosmosid upload` command with path to folder specified by --dir/-d parameter\n> Note: _This command respects Paired-End samples grouping with the same rules as for regular upload_\n\n> Note: _The default workflow is `taxa`_, that is not allowed for amplicon samples, and should be overriden by `--workflow` argument.\n\nRunning example:\n\n`cosmosid upload --type metagenomics -f /pathtofile/test1_R1.fastq` -f /pathtofile/test1_R2.fastq -f\n/pathtofile/test2.fasta\n\n```shell\n#to upload one sample file for Metagenomics analysis\ncosmosid upload --file <path to file> --type metagenomics\n\n#to upload sample file into specific folder for Amplicon 16s analysis\ncosmosid upload --file <path to file-1> --parent <folder id> --type amplicon-16s\n\n#to upload all files from folder\ncosmosid upload -d /home/user/samples/ --type metagenomics\n\n#to upload with host-removal\ncosmosid upload --file <path to file> --type metagenomics --host-name <host name>\n\n#to upload ampliseq-batch\ncosmosid upload --file <path to file> --type amplicon-16s --workflow ampliseq --amplicon-preset <preset>\ncosmosid upload --file <path to file> --type amplicon-16s --workflow ampliseq --forward-primer <forward primer> --reverse-primer <reverse primer>\n\n```\n\n> Note: uploading of a big file takes time, please be patient\n> Available host names: human:2.0.0, human:1.0.0, dog:2.0.0, domestic_cat:2.0.0, cow:1.0.0, chicken:2.0.0, mouse:2.0.0, monkey:2.0.0, cattle:2.0.0, pig:2.0.0\n\nOnce file has been uploaded to CosmosID the analyzing process will automatically begin.\nYou can check the status of metagenomics analysis on the page [CosmosID Samples](https://app.cosmosid.com/samples).\nAmplicon analysis results available only from CosmosID-HUB CLI for now.\n\n### Retrieving Analysis Results\n\nAnalysis results can be retrieved from CosmosID by useing run id or file id. The latest run analysis results will be\nretrieved when file id used.\nTo retrieve analysis results for a specified run in CosmosID simply run `cosmosid` command with `analysis` subcommand.\n\n```shell\n$ cosmosid analysis --help\nusage: cosmosid analysis [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width <integer>]\n                         [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending] [--id ID] [--run_id RUN_ID]\n                         [--order {database,id,strains,strains_filtered,status}] [--up]\n\nShow Analysis for a given file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --id ID, -i ID\n                        ID of a file\n  --run_id RUN_ID, -r RUN_ID\n                        ID of a sample run\n  --order {database,id,strains,strains_filtered,status}, -o {database,id,strains,strains_filtered,status}\n                        field for ordering\n  --up                  order direction\n\noutput formatters:\n  output formatter options\n\n  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}\n                        the output format, defaults to table\n  -c COLUMN, --column COLUMN\n                        specify the column(s) to include, can be repeated to show multiple columns\n  --sort-column SORT_COLUMN\n                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated\n  --sort-ascending      sort the column(s) in ascending order\n  --sort-descending     sort the column(s) in descending order\n\nCSV Formatter:\n  --quote {all,minimal,none,nonnumeric}\n                        when to include quotes, defaults to nonnumeric\n\njson formatter:\n  --noindent            whether to disable indenting the JSON\n\ntable formatter:\n  --max-width <integer>\n                        Maximum display width, <1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.\n  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable\n  --print-empty         Print empty table if there is no data to show.\n```\n\n\nFor example:\n\n```shell\n#to get list of analysis for the latest run of file\ncosmosid analysis --id=<file ID>\n\n#to get list of analysis for a given run id\ncosmosid analysis --run_id=<run ID>\n\n#to get ordered list of analysis for a given file id simply use ordering argument with field name with/without order direction\ncosmosid analysis --id=<file ID> --order created --up\n```\n\n> Note: There is no analysis results for Amplicon 16S and Amplicon ITS sample. Use report generation instead of getting\n> list of analysis for Amplicon 16S and Amplicon ITS.\n\n### Generate Analysis Report Archive\n\nThe CosmosID-HUB CLI supports retrieving the archive of analysis reports from CosmosID for a given `File ID` with a\ngiven `Run ID` and saving the archive to a given file.\n\nTo retrieve an analysis report archive with TSV files run the `cosmosid` command with `reports` subcommand.\n\n```shell\n$ cosmosid reports --help\nusage: cosmosid reports [-h] --id ID [--output OUTPUT | --dir DIR]\n\nGet analysis reports TSV\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --id ID, -i ID\n                        ID of cosmosid sample.\n  --output OUTPUT, -o OUTPUT\n                        output file name. Must have .zip extension. Default: is equivalent to cosmosid file name.\n  --dir DIR, -d DIR\n                        Output directory for a file. Default: is current directory.\n```\n\nFor example:\n\n```shell\n# to create analysis report archive for the latest run of sample and save it in\n# a current directory with a name equivalent to file name in CosmosID\ncosmosid reports --id=<file ID>\n\n# to create analysis report archive for the given run of sample and save it in\n# a current directory with a name equivalent to file name in CosmosID\ncosmosid reports --id=<file ID> --run_id=<run ID>\n\n# to create analysis report archive for the given run of sample and save it\n# in a given directory\ncosmosid reports --id=<file ID> --run_id=<run ID> --dir ~/cosmosid/reports\n\n# to create analysis report archive for the given run of sample and save it\n# into a given local file\ncosmosid reports --id=<file ID> --output /tmp/analysis_report.zip\n```\n\n### Retrieving Artifacts Results\n\nArtifacts results can be retrieved from CosmosID by using run id.\nTo retrieve artifacts results for a specified run in CosmosID simply run `cosmosid` command with `artifacts` subcommand.\n```shell\n$ cosmosid artifacts --help\nusage: cosmosid artifacts [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width <integer>]\n                          [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending] --run_id RUN_ID [--type {fastqc-zip}]\n                          [--url] [--output OUTPUT] [--dir DIR]\n\nShow Artifacts for a given file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run_id RUN_ID, -r RUN_ID\n                        ID of a sample run\n  --type {fastqc-zip}, -t {fastqc-zip}\n                        Artifact type to download\n  --url                 show download url\n  --output OUTPUT, -o OUTPUT\n                        output file name. Must have .zip extension. Default: is equivalent to cosmosid file name.\n  --dir DIR, -d DIR\n                        Output directory for a file. Default: is current directory.\n\noutput formatters:\n  output formatter options\n\n  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}\n                        the output format, defaults to table\n  -c COLUMN, --column COLUMN\n                        specify the column(s) to include, can be repeated to show multiple columns\n  --sort-column SORT_COLUMN\n                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated\n  --sort-ascending      sort the column(s) in ascending order\n  --sort-descending     sort the column(s) in descending order\n\nCSV Formatter:\n  --quote {all,minimal,none,nonnumeric}\n                        when to include quotes, defaults to nonnumeric\n\njson formatter:\n  --noindent            whether to disable indenting the JSON\n\ntable formatter:\n  --max-width <integer>\n                        Maximum display width, <1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.\n  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable\n  --print-empty         Print empty table if there is no data to show.\n```\n\n\nFor example:\n\n```shell\n\n#to get list of artifacts for a given run id\ncosmosid artifacts --run_id=<run ID>\n\n##to create artifacts archive for the given run id of sample and store it to given path\ncosmosid artifacts --run_id=<run ID> --type=fastqc-zip --dir /home/user\n\n\n##to create artifacts archive for the given run id of sample and store it with given name in current dir\ncosmosid artifacts --run_id=<run ID> --type=fastqc-zip --output artifacts_report.zip\n\n##to create artifacts archive for the given run id of sample and store it with given name and given dir\ncosmosid artifacts --run_id=<run ID> --type=fastqc-zip --dir /home/user --output artifacts_report.zip\n\n#to get url to download the archive\ncosmosid artifacts --run_id=<run ID> --type=fastqc-zip --url\n```\n\n### Download Original Samples\n\nOriginal samples can be downloaded from CosmosID by using samples_ids.\nTo download samples for a specified samples_id in CosmosID simply run `cosmosids` command with `download` subcommand.\n\n> Note: We recommend installing pycurl for the best experience with a sample download,\n> see: http://pycurl.io/docs/latest/index.html#installation\n\n```shell\n$ cosmosid download --help\nusage: cosmosid download [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width <integer>]\n                         [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending] [--samples_ids SAMPLES_IDS]\n                         [--input-file INPUT_FILE] [--dir DIR] [--no-display] [--concurrent-downloads CONCURRENT_DOWNLOADS]\n\nDownload Samples for a given samples ids.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --samples_ids SAMPLES_IDS, -s SAMPLES_IDS\n                        Comma separated list of samples uuids\n  --input-file INPUT_FILE\n                        Path to file with samples\' ids\n  --dir DIR, -d DIR\n                        Output directory for a file. Default: is current directory.\n  --no-display          Disable displaying loading process\n  --concurrent-downloads CONCURRENT_DOWNLOADS\n                        Limit concurrent files downloads\n\noutput formatters:\n  output formatter options\n\n  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}\n                        the output format, defaults to table\n  -c COLUMN, --column COLUMN\n                        specify the column(s) to include, can be repeated to show multiple columns\n  --sort-column SORT_COLUMN\n                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated\n  --sort-ascending      sort the column(s) in ascending order\n  --sort-descending     sort the column(s) in descending order\n\nCSV Formatter:\n  --quote {all,minimal,none,nonnumeric}\n                        when to include quotes, defaults to nonnumeric\n\njson formatter:\n  --noindent            whether to disable indenting the JSON\n\ntable formatter:\n  --max-width <integer>\n                        Maximum display width, <1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.\n  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable\n  --print-empty         Print empty table if there is no data to show.\n```\n\n\nFor example:\n\n```shell\n\n#to download the original samples and save them in the current dir\ncosmosid download --samples_ids=<sample_id>\n\n#to download the originals samples and save them in the current dir\ncosmosid download --samples_ids=<sample_id>,<sample_id> #separated by comma ","\n\n#to download the originals samples and store them in the given path\ncosmosid download --samples_ids=<sample_id>,<sample_id> --dir=<path_to_directory>\n\n#to download the originals samples without displaying download progress\ncosmosid download --samples_ids=<samples_id>,<sample_id> --no-display\n\n#to download the original samples with specified quantity of concurrent files downloads\ncosmosid download --samples_ids=<sample_id>,<sample_id> --concurrent-downloads=<quantity>\n\n#to download the original samples using file with their ids\ncosmosid download --input-file=<path-to-file>\n\n```\n\n> Note: You can specify chunk size by CHUNK_SIZE environment variable\n\n### Comparative analysis\n\nIt\'s possible to view list of comparative analyses and download them.\n\n#### List commands\n\n```shell\n#print list of comparatives generated using metadata & cohorts menu\ncosmosid comparatives --help\ncosmosid comparatives --help\nusage: cosmosid comparatives [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent] [--max-width <integer>]\n                             [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending]\n\nList of comparatives\n\noptional arguments:\n  -h, --help            show this help message and exit\n\noutput formatters:\n  output formatter options\n\n  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}\n                        the output format, defaults to table\n  -c COLUMN, --column COLUMN\n                        specify the column(s) to include, can be repeated to show multiple columns\n  --sort-column SORT_COLUMN\n                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated\n  --sort-ascending      sort the column(s) in ascending order\n  --sort-descending     sort the column(s) in descending order\n\nCSV Formatter:\n  --quote {all,minimal,none,nonnumeric}\n                        when to include quotes, defaults to nonnumeric\n\njson formatter:\n  --noindent            whether to disable indenting the JSON\n\ntable formatter:\n  --max-width <integer>\n                        Maximum display width, <1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.\n  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable\n  --print-empty         Print empty table if there is no data to show.\n```\n\nPrint list of comparatives generated using the comparative analysis menu:\n\n```shell\n$ cosmosid comparative analyses --help\nusage: cosmosid comparative analyses [-h] [-f {csv,json,table,value,yaml}] [-c COLUMN] [--quote {all,minimal,none,nonnumeric}] [--noindent]\n                                     [--max-width <integer>] [--fit-width] [--print-empty] [--sort-column SORT_COLUMN] [--sort-ascending | --sort-descending]\n                                     [--comparative-id COMPARATIVE_ID]\n\nList of all comparative analyses outside comparatives (if there are no any comparative ids)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --comparative-id COMPARATIVE_ID\n                        Comparatives\' ids\n\noutput formatters:\n  output formatter options\n\n  -f {csv,json,table,value,yaml}, --format {csv,json,table,value,yaml}\n                        the output format, defaults to table\n  -c COLUMN, --column COLUMN\n                        specify the column(s) to include, can be repeated to show multiple columns\n  --sort-column SORT_COLUMN\n                        specify the column(s) to sort the data (columns specified first have a priority, non-existing columns are ignored), can be repeated\n  --sort-ascending      sort the column(s) in ascending order\n  --sort-descending     sort the column(s) in descending order\n\nCSV Formatter:\n  --quote {all,minimal,none,nonnumeric}\n                        when to include quotes, defaults to nonnumeric\n\njson formatter:\n  --noindent            whether to disable indenting the JSON\n\ntable formatter:\n  --max-width <integer>\n                        Maximum display width, <1 to disable. You can also use the CLIFF_MAX_TERM_WIDTH environment variable, but the parameter takes precedence.\n  --fit-width           Fit the table to the display width. Implied if --max-width greater than 0. Set the environment variable CLIFF_FIT_WIDTH=1 to always enable\n  --print-empty         Print empty table if there is no data to show.\n```\n\nExample: print list of child comparatives generated under a parent comparative using metadata & cohorts menu\n\n```shell\n$ cosmosid comparative analyses --comparative-id=<comparative_id>\n```\n\n#### Export commands\n\nExport comparative analyses without log scale\n\n```shell\n$ cosmosid comparative analyses export --help\nusage: cosmosid comparative analyses export [-h] --id ID [--tax-level {kingdom,order,phylum,class,family,genus,species,strain}] [--log-scale]\n                                            [--concurrent-downloads CONCURRENT_DOWNLOADS] [--dir DIR]\n\nDownload results of comparative analyses\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --id ID       IDs of comparative analyses\n  --tax-level {kingdom,order,phylum,class,family,genus,species,strain}\n                        Taxonomy\n  --log-scale           Includes results with logscale\n  --concurrent-downloads CONCURRENT_DOWNLOADS\n                        Limit concurrent files downloads\n  --dir DIR, -d DIR\n                        Output directory for a file. Default: is current directory.\n```\n\nExample export comparative analyses with specified taxonomy level (\'species\' by default):\n\n```shell\n$ cosmosid comparative analyses export --id=<analysis_id> --tax-level=class --tax-level=genus\n```',
    'author': 'CosmosID',
    'author_email': 'support@cosmosid.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://www.cosmosid.com',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.6.2,<4',
}


setup(**setup_kwargs)
