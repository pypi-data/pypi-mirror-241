from datetime import datetime
from typing import Never

from ._common import Option

class DateTime:
    def __init__(
        self, _use_new_method_instead_of_constructor_: Never
    ) -> None: ...
    @staticmethod
    def new(
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        min: int = 0,
        sec: int = 0,
        nano: int = 0,
        /,
    ) -> Option[DateTime]: ...
    @staticmethod
    def parse(s: str, /) -> Option[DateTime]: ...
    def timestamp(self) -> float: ...
    def timestamp_millis(self) -> float: ...
    @staticmethod
    def from_timestamp(i: int, /) -> Option[DateTime]: ...
    @staticmethod
    def from_timestamp_millis(i: int, /) -> Option[DateTime]: ...
    @property
    def year(self) -> int: ...
    @property
    def month(self) -> int: ...
    @property
    def day(self) -> int: ...
    @property
    def hour(self) -> int: ...
    @property
    def minute(self) -> int: ...
    @property
    def second(self) -> int: ...
    @property
    def nanosecond(self) -> int: ...
    def __lt__(self, other: DateTime) -> bool: ...
    def __le__(self, other: DateTime) -> bool: ...
    def __gt__(self, other: DateTime) -> bool: ...
    def __ge__(self, other: DateTime) -> bool: ...
    def __hash__(self) -> int: ...
    def to_py(self) -> datetime: ...
