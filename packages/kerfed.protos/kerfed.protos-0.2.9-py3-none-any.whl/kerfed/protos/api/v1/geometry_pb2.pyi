"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
geometry.proto
Contains RPC definitions for analysis
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import kerfed.protos.common.v1.brand_pb2
import kerfed.protos.common.v1.fab_pb2
import kerfed.protos.common.v1.fileblob_pb2
import kerfed.protos.common.v1.mill_pb2
import kerfed.protos.common.v1.scene_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class GeometryRequest(google.protobuf.message.Message):
    """Request a CAD file to be fully analyzed by the geometry pipeline."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SOURCE_FIELD_NUMBER: builtins.int
    UNITS_FIELD_NUMBER: builtins.int
    THICKNESS_FIELD_NUMBER: builtins.int
    PREVIEWS_FIELD_NUMBER: builtins.int
    BRAND_FIELD_NUMBER: builtins.int
    METHOD_ID_FIELD_NUMBER: builtins.int
    MILL_FIELD_NUMBER: builtins.int
    @property
    def source(self) -> kerfed.protos.common.v1.fileblob_pb2.FileBlob:
        """Raw CAD geometry to be analyzed in a supported format."""
    units: builtins.str
    """If the raw file is in a format that does not include unit
    information (i.e. SVG, DXF, STL, OBJ) specify the file's units
    through this request. If not passed the pipeline will "guess"
    which may or may not be correct.
    """
    thickness: builtins.float
    """If this file represents 2D CAD data what thickness
    should we apply to the geometry to treat it as a 3D part.
    """
    previews: builtins.bool
    """Should the pipeline render raster previews of each part?"""
    @property
    def brand(self) -> kerfed.protos.common.v1.brand_pb2.Brand:
        """Edit generated user-facing material to return drawings
        with a specific logo, display units (mm vs inch), address, etc.
        """
    @property
    def method_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Specify which methods you want the pipeline to analyze.
        If unspecified will run and return all methods.
        Valid options include:
        `mill`, `flat`, `bent`, `roll`, `add`, `cots`.
        """
    @property
    def mill(self) -> kerfed.protos.common.v1.mill_pb2.MillSettings:
        """Detailed settings for the milling geometry"""
    def __init__(
        self,
        *,
        source: kerfed.protos.common.v1.fileblob_pb2.FileBlob | None = ...,
        units: builtins.str = ...,
        thickness: builtins.float = ...,
        previews: builtins.bool = ...,
        brand: kerfed.protos.common.v1.brand_pb2.Brand | None = ...,
        method_id: collections.abc.Iterable[builtins.str] | None = ...,
        mill: kerfed.protos.common.v1.mill_pb2.MillSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["brand", b"brand", "mill", b"mill", "source", b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["brand", b"brand", "method_id", b"method_id", "mill", b"mill", "previews", b"previews", "source", b"source", "thickness", b"thickness", "units", b"units"]) -> None: ...

global___GeometryRequest = GeometryRequest

@typing_extensions.final
class GeometryResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ANALYSIS_FIELD_NUMBER: builtins.int
    SCENE_FIELD_NUMBER: builtins.int
    @property
    def analysis(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kerfed.protos.common.v1.fab_pb2.PartFabrication]:
        """The fabrication analysis."""
    @property
    def scene(self) -> kerfed.protos.common.v1.scene_pb2.Scene:
        """the loaded file in a neutral format"""
    def __init__(
        self,
        *,
        analysis: collections.abc.Iterable[kerfed.protos.common.v1.fab_pb2.PartFabrication] | None = ...,
        scene: kerfed.protos.common.v1.scene_pb2.Scene | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["scene", b"scene"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["analysis", b"analysis", "scene", b"scene"]) -> None: ...

global___GeometryResponse = GeometryResponse
