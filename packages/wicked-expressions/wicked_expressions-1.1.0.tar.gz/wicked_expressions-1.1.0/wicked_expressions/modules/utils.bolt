from beet import Function
from mecha import Mecha, AstRoot, AstChildren
from bolt import Runtime
import logging
from ./config import Config

mc = ctx.inject(Mecha)
logger = logging.getLogger(Config.LIBRARY_NAME)

def parse_holder(holder: str):
    return mc.parse(holder, using="score_holder", provide={"properties":{"amount":"single"}})

def defer(f):
    def wrapper(ctx):
        mc = ctx.inject(Mecha)
        runtime = ctx.inject(Runtime)
        current_path = runtime.modules.current_path
        yield
        with runtime.scope() as commands:
            f()
        result = mc.compile(AstRoot(commands=AstChildren(commands)), report=mc.diagnostics)
        # ctx.data.functions.setdefault(current_path, Function()).append(result)
    ctx.require(wrapper)
    return f

def raw(cmd: str):
    raw cmd
