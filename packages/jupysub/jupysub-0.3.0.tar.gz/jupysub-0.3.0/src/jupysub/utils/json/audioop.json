{
 "audioop.alaw2lin": "audioop.alaw2lin(fragment, width)",
 "audioop.tostereo": "audioop.tostereo(fragment, width, lfactor, rfactor)",
 "audioop.rms": "audioop.rms(fragment, width)",
 "audioop.findfit": "audioop.findfit(fragment, reference)",
 "audioop.bias": "audioop.bias(fragment, width, bias)",
 "audioop.findmax": "audioop.findmax(fragment, length)",
 "audioop.lin2alaw": "audioop.lin2alaw(fragment, width)",
 "audioop.byteswap": "audioop.byteswap(fragment, width)",
 "audioop.findfactor": "audioop.findfactor(fragment, reference)",
 "audioop.lin2ulaw": "audioop.lin2ulaw(fragment, width)",
 "audioop.lin2adpcm": "audioop.lin2adpcm(fragment, width, state)",
 "audioop.ratecv": "audioop.ratecv(fragment, width, nchannels, inrate, outrate, state[, weightA[, weightB]])",
 "audioop.getsample": "audioop.getsample(fragment, width, index)",
 "audioop.max": "audioop.max(fragment, width)",
 "audioop.maxpp": "audioop.maxpp(fragment, width)",
 "audioop.avgpp": "audioop.avgpp(fragment, width)",
 "audioop.tomono": "audioop.tomono(fragment, width, lfactor, rfactor)",
 "audioop.reverse": "audioop.reverse(fragment, width)",
 "audioop.lin2lin": "audioop.lin2lin(fragment, width, newwidth)",
 "audioop.cross": "audioop.cross(fragment, width)",
 "audioop.adpcm2lin": "audioop.adpcm2lin(adpcmfragment, width, state)",
 "audioop.add": "audioop.add(fragment1, fragment2, width)",
 "audioop.mul": "audioop.mul(fragment, width, factor)",
 "audioop.minmax": "audioop.minmax(fragment, width)",
 "audioop.avg": "audioop.avg(fragment, width)",
 "audioop.ulaw2lin": "audioop.ulaw2lin(fragment, width)"
}