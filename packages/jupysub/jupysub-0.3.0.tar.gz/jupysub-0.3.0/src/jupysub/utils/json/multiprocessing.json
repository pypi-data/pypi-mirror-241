{
 "multiprocessing.set_executable": "multiprocessing.set_executable(executable)",
 "multiprocessing.managers.BaseManager": "class multiprocessing.managers.BaseManager(address=None, authkey=None, serializer='pickle', ctx=None, *, shutdown_timeout=1.0)",
 "multiprocessing.managers.Namespace": "class multiprocessing.managers.Namespace",
 "multiprocessing.connection.answer_challenge": "multiprocessing.connection.answer_challenge(connection, authkey)",
 "multiprocessing.sharedctypes.RawValue": "multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)",
 "multiprocessing.connection.wait": "multiprocessing.connection.wait(object_list, timeout=None)",
 "multiprocessing.Condition": "class multiprocessing.Condition([lock])",
 "multiprocessing.Queue": "class multiprocessing.Queue([maxsize])",
 "multiprocessing.Semaphore": "class multiprocessing.Semaphore([value])",
 "multiprocessing.connection.deliver_challenge": "multiprocessing.connection.deliver_challenge(connection, authkey)",
 "multiprocessing.RLock": "class multiprocessing.RLock",
 "multiprocessing.get_logger": "multiprocessing.get_logger()",
 "multiprocessing.get_start_method": "multiprocessing.get_start_method(allow_none=False)",
 "multiprocessing.active_children": "multiprocessing.active_children()",
 "multiprocessing.parent_process": "multiprocessing.parent_process()",
 "multiprocessing.log_to_stderr": "multiprocessing.log_to_stderr(level=None)",
 "multiprocessing.shared_memory.SharedMemory": "class multiprocessing.shared_memory.SharedMemory(name=None, create=False, size=0)",
 "multiprocessing.get_context": "multiprocessing.get_context(method=None)",
 "multiprocessing.cpu_count": "multiprocessing.cpu_count()",
 "multiprocessing.Value": "multiprocessing.Value(typecode_or_type, *args, lock=True)",
 "multiprocessing.sharedctypes.synchronized": "multiprocessing.sharedctypes.synchronized(obj[, lock])",
 "multiprocessing.pool.ThreadPool": "class multiprocessing.pool.ThreadPool([processes[, initializer[, initargs]]])",
 "multiprocessing.managers.SharedMemoryManager": "class multiprocessing.managers.SharedMemoryManager([address[, authkey]])",
 "multiprocessing.sharedctypes.copy": "multiprocessing.sharedctypes.copy(obj)",
 "multiprocessing.Array": "multiprocessing.Array(typecode_or_type, size_or_initializer, *, lock=True)",
 "multiprocessing.shared_memory.ShareableList": "class multiprocessing.shared_memory.ShareableList(sequence=None, \\*, name=None)",
 "multiprocessing.connection.Listener": "class multiprocessing.connection.Listener([address[, family[, backlog[, authkey]]]])",
 "multiprocessing.Event": "class multiprocessing.Event",
 "multiprocessing.set_start_method": "multiprocessing.set_start_method(method, force=False)",
 "multiprocessing.managers.SyncManager": "class multiprocessing.managers.SyncManager",
 "multiprocessing.connection.Connection": "class multiprocessing.connection.Connection",
 "multiprocessing.get_all_start_methods": "multiprocessing.get_all_start_methods()",
 "multiprocessing.managers.BaseProxy": "class multiprocessing.managers.BaseProxy",
 "multiprocessing.Barrier": "class multiprocessing.Barrier(parties[, action[, timeout]])",
 "multiprocessing.pool.Pool": "class multiprocessing.pool.Pool([processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])",
 "multiprocessing.freeze_support": "multiprocessing.freeze_support()",
 "multiprocessing.JoinableQueue": "class multiprocessing.JoinableQueue([maxsize])",
 "multiprocessing.sharedctypes.Array": "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, *, lock=True)",
 "multiprocessing.Manager": "multiprocessing.Manager()",
 "multiprocessing.connection.Client": "multiprocessing.connection.Client(address[, family[, authkey]])",
 "multiprocessing.sharedctypes.Value": "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)",
 "multiprocessing.Lock": "class multiprocessing.Lock",
 "multiprocessing.sharedctypes.RawArray": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)",
 "multiprocessing.SimpleQueue": "class multiprocessing.SimpleQueue",
 "multiprocessing.current_process": "multiprocessing.current_process()",
 "multiprocessing.Pipe": "multiprocessing.Pipe([duplex])",
 "multiprocessing.BoundedSemaphore": "class multiprocessing.BoundedSemaphore([value])",
 "multiprocessing.Process": "class multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)",
 "multiprocessing.pool.AsyncResult": "class multiprocessing.pool.AsyncResult"
}