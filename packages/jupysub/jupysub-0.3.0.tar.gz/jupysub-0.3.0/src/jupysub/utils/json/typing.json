{
 "typing.Hashable": "class typing.Hashable",
 "typing.FrozenSet": "class typing.FrozenSet(frozenset, AbstractSet[T_co])",
 "typing.Counter": "class typing.Counter(collections.Counter, Dict[T, int])",
 "typing.Pattern": "class typing.Pattern",
 "typing.no_type_check": "@typing.no_type_check",
 "typing.NamedTuple": "class typing.NamedTuple",
 "typing.TypeVar": "class typing.TypeVar(name, *constraints, bound=None, covariant=False, contravariant=False)",
 "typing.Iterable": "class typing.Iterable(Generic[T_co])",
 "typing.Sequence": "class typing.Sequence(Reversible[T_co], Collection[T_co])",
 "typing.runtime_checkable": "@typing.runtime_checkable",
 "typing.Protocol": "class typing.Protocol(Generic)",
 "typing.SupportsBytes": "class typing.SupportsBytes",
 "typing.KeysView": "class typing.KeysView(MappingView, AbstractSet[KT_co])",
 "typing.Deque": "class typing.Deque(deque, MutableSequence[T])",
 "typing.ItemsView": "class typing.ItemsView(MappingView, AbstractSet[tuple[KT_co, VT_co]])",
 "typing.Iterator": "class typing.Iterator(Iterable[T_co])",
 "typing.OrderedDict": "class typing.OrderedDict(collections.OrderedDict, MutableMapping[KT, VT])",
 "typing.ParamSpec": "class typing.ParamSpec(name, *, bound=None, covariant=False, contravariant=False)",
 "typing.Dict": "class typing.Dict(dict, MutableMapping[KT, VT])",
 "typing.SupportsFloat": "class typing.SupportsFloat",
 "typing.assert_never": "typing.assert_never(arg, /)",
 "typing.Type": "class typing.Type(Generic[CT_co])",
 "typing.no_type_check_decorator": "@typing.no_type_check_decorator",
 "typing.get_type_hints": "typing.get_type_hints(obj, globalns=None, localns=None, include_extras=False)",
 "typing.ForwardRef": "class typing.ForwardRef",
 "typing.ContextManager": "class typing.ContextManager(Generic[T_co])",
 "typing.Awaitable": "class typing.Awaitable(Generic[T_co])",
 "typing.Coroutine": "class typing.Coroutine(Awaitable[ReturnType], Generic[YieldType, SendType, ReturnType])",
 "typing.IO": "class typing.IO",
 "typing.AsyncContextManager": "class typing.AsyncContextManager(Generic[T_co])",
 "typing.MutableSequence": "class typing.MutableSequence(Sequence[T])",
 "typing.ChainMap": "class typing.ChainMap(collections.ChainMap, MutableMapping[KT, VT])",
 "typing.Set": "class typing.Set(set, MutableSet[T])",
 "typing.AsyncIterable": "class typing.AsyncIterable(Generic[T_co])",
 "typing.reveal_type": "typing.reveal_type(obj, /)",
 "typing.TypeVarTuple": "class typing.TypeVarTuple(name)",
 "typing.get_origin": "typing.get_origin(tp)",
 "typing.Text": "class typing.Text",
 "typing.dataclass_transform": "@typing.dataclass_transform(*, eq_default=True, order_default=False, kw_only_default=False, field_specifiers=(), **kwargs)",
 "typing.Mapping": "class typing.Mapping(Collection[KT], Generic[KT, VT_co])",
 "typing.clear_overloads": "typing.clear_overloads()",
 "typing.assert_type": "typing.assert_type(val, typ, /)",
 "typing.AbstractSet": "class typing.AbstractSet(Collection[T_co])",
 "typing.SupportsIndex": "class typing.SupportsIndex",
 "typing.SupportsInt": "class typing.SupportsInt",
 "typing.type_check_only": "@typing.type_check_only",
 "typing.SupportsComplex": "class typing.SupportsComplex",
 "typing.Sized": "class typing.Sized",
 "typing.final": "@typing.final",
 "typing.get_overloads": "typing.get_overloads(func)",
 "typing.is_typeddict": "typing.is_typeddict(tp)",
 "typing.AsyncIterator": "class typing.AsyncIterator(AsyncIterable[T_co])",
 "typing.AsyncGenerator": "class typing.AsyncGenerator(AsyncIterator[YieldType], Generic[YieldType, SendType])",
 "typing.SupportsRound": "class typing.SupportsRound",
 "typing.NewType": "class typing.NewType(name, tp)",
 "typing.ValuesView": "class typing.ValuesView(MappingView, Collection[_VT_co])",
 "typing.Generator": "class typing.Generator(Iterator[YieldType], Generic[YieldType, SendType, ReturnType])",
 "typing.TypedDict": "class typing.TypedDict(dict)",
 "typing.List": "class typing.List(list, MutableSequence[T])",
 "typing.Container": "class typing.Container(Generic[T_co])",
 "typing.MappingView": "class typing.MappingView(Sized)",
 "typing.cast": "typing.cast(typ, val)",
 "typing.Reversible": "class typing.Reversible(Iterable[T_co])",
 "typing.get_args": "typing.get_args(tp)",
 "typing.Collection": "class typing.Collection(Sized, Iterable[T_co], Container[T_co])",
 "typing.SupportsAbs": "class typing.SupportsAbs",
 "typing.Generic": "class typing.Generic",
 "typing.MutableSet": "class typing.MutableSet(AbstractSet[T])",
 "typing.MutableMapping": "class typing.MutableMapping(Mapping[KT, VT])",
 "typing.ByteString": "class typing.ByteString(Sequence[int])",
 "typing.overload": "@typing.overload",
 "typing.DefaultDict": "class typing.DefaultDict(collections.defaultdict, MutableMapping[KT, VT])"
}