{
 "test.support.get_attribute": "test.support.get_attribute(obj, name)",
 "test.support.missing_compiler_executable": "test.support.missing_compiler_executable(cmd_names=[])",
 "test.support.threading_helper.reap_threads": "@test.support.threading_helper.reap_threads",
 "test.support.threading_helper.catch_threading_exception": "test.support.threading_helper.catch_threading_exception()",
 "test.support.python_is_optimized": "test.support.python_is_optimized()",
 "test.support.gc_collect": "test.support.gc_collect()",
 "test.support.run_with_locale": "@test.support.run_with_locale(catstr, *locales)",
 "test.support.requires_gzip": "@test.support.requires_gzip",
 "test.support.run_with_tz": "@test.support.run_with_tz(tz)",
 "test.support.Matcher": "class test.support.Matcher",
 "test.support.bigaddrspacetest": "@test.support.bigaddrspacetest",
 "test.support.SuppressCrashReport": "class test.support.SuppressCrashReport",
 "test.support.check_impl_detail": "test.support.check_impl_detail(**guards)",
 "test.support.captured_stdin": "test.support.captured_stdin()",
 "test.support.import_helper.modules_setup": "test.support.import_helper.modules_setup()",
 "test.support.os_helper.create_empty_file": "test.support.os_helper.create_empty_file(filename)",
 "test.support.import_helper.unload": "test.support.import_helper.unload(name)",
 "test.support.check_disallow_instantiation": "test.support.check_disallow_instantiation(test_case, tp, *args, **kwds)",
 "test.support.socket_helper.bind_port": "test.support.socket_helper.bind_port(sock, host=HOST)",
 "test.support.open_urlresource": "test.support.open_urlresource(url, *args, **kw)",
 "test.support.requires_bz2": "@test.support.requires_bz2",
 "test.support.os_helper.make_bad_fd": "test.support.os_helper.make_bad_fd()",
 "test.support.requires_docstrings": "@test.support.requires_docstrings",
 "test.support.is_resource_enabled": "test.support.is_resource_enabled(resource)",
 "test.support.os_helper.rmdir": "test.support.os_helper.rmdir(filename)",
 "test.support.threading_helper.start_threads": "test.support.threading_helper.start_threads(threads, unlock=None)",
 "test.support.cpython_only": "@test.support.cpython_only",
 "test.support.script_helper.run_python_until_end": "test.support.script_helper.run_python_until_end(*args, **env_vars)",
 "test.support.impl_detail": "@test.support.impl_detail(msg=None, **guards)",
 "test.support.warnings_helper.check_syntax_warning": "test.support.warnings_helper.check_syntax_warning(testcase, statement, errtext='', *, lineno=1, offset=None)",
 "test.support.SaveSignals": "class test.support.SaveSignals",
 "test.support.print_warning": "test.support.print_warning(msg)",
 "test.support.BasicTestRunner": "class test.support.BasicTestRunner",
 "test.support.requires_resource": "@test.support.requires_resource(resource)",
 "test.support.patch": "test.support.patch(test_instance, object_to_patch, attr_name, new_value)",
 "test.support.script_helper.assert_python_ok": "test.support.script_helper.assert_python_ok(*args, **env_vars)",
 "test.support.anticipate_failure": "@test.support.anticipate_failure(condition)",
 "test.support.os_helper.rmtree": "test.support.os_helper.rmtree(path)",
 "test.support.requires": "test.support.requires(resource, msg=None)",
 "test.support.threading_helper.join_thread": "test.support.threading_helper.join_thread(thread, timeout=None)",
 "test.support.import_helper.make_legacy_pyc": "test.support.import_helper.make_legacy_pyc(source)",
 "test.support.script_helper.interpreter_requires_environment": "test.support.script_helper.interpreter_requires_environment()",
 "test.support.script_helper.spawn_python": "test.support.script_helper.spawn_python(*args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, **kw)",
 "test.support.disable_gc": "test.support.disable_gc()",
 "test.support.os_helper.temp_dir": "test.support.os_helper.temp_dir(path=None, quiet=False)",
 "test.support.requires_freebsd_version": "@test.support.requires_freebsd_version(*min_version)",
 "test.support.requires_IEEE_754": "@test.support.requires_IEEE_754",
 "test.support.calcvobjsize": "test.support.calcvobjsize(fmt)",
 "test.support.os_helper.can_symlink": "test.support.os_helper.can_symlink()",
 "test.support.warnings_helper.check_no_resource_warning": "test.support.warnings_helper.check_no_resource_warning(testcase)",
 "test.support.swap_attr": "test.support.swap_attr(obj, attr, new_val)",
 "test.support.run_doctest": "test.support.run_doctest(module, verbosity=None, optionflags=0)",
 "test.support.with_pymalloc": "test.support.with_pymalloc()",
 "test.support.catch_unraisable_exception": "test.support.catch_unraisable_exception()",
 "test.support.setswitchinterval": "test.support.setswitchinterval(interval)",
 "test.support.detect_api_mismatch": "test.support.detect_api_mismatch(ref_api, other_api, *, ignore=())",
 "test.support.warnings_helper.check_warnings": "test.support.warnings_helper.check_warnings(*filters, quiet=True)",
 "test.support.os_helper.EnvironmentVarGuard": "class test.support.os_helper.EnvironmentVarGuard",
 "test.support.get_original_stdout": "test.support.get_original_stdout()",
 "test.support.record_original_stdout": "test.support.record_original_stdout(stdout)",
 "test.support.os_helper.can_xattr": "test.support.os_helper.can_xattr()",
 "test.support.check__all__": "test.support.check__all__(test_case, module, name_of_module=None, extra=(), not_exported=())",
 "test.support.no_tracing": "@test.support.no_tracing",
 "test.support.socket_helper.bind_unix_socket": "test.support.socket_helper.bind_unix_socket(sock, addr)",
 "test.support.import_helper.modules_cleanup": "test.support.import_helper.modules_cleanup(oldmodules)",
 "test.support.os_helper.unlink": "test.support.os_helper.unlink(filename)",
 "test.support.args_from_interpreter_flags": "test.support.args_from_interpreter_flags()",
 "test.support.match_test": "test.support.match_test(test)",
 "test.support.socket_helper.transient_internet": "test.support.socket_helper.transient_internet(resource_name, *, timeout=30.0, errnos=())",
 "test.support.load_package_tests": "test.support.load_package_tests(pkg_dir, loader, standard_tests, pattern)",
 "test.support.script_helper.make_zip_pkg": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1, compiled=False)",
 "test.support.swap_item": "test.support.swap_item(obj, attr, new_val)",
 "test.support.os_helper.fd_count": "test.support.os_helper.fd_count()",
 "test.support.requires_mac_version": "@test.support.requires_mac_version(*min_version)",
 "test.support.script_helper.assert_python_failure": "test.support.script_helper.assert_python_failure(*args, **env_vars)",
 "test.support.check_syntax_error": "test.support.check_syntax_error(testcase, statement, errtext='', *, lineno=None, offset=None)",
 "test.support.import_helper.import_fresh_module": "test.support.import_helper.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)",
 "test.support.socket_helper.skip_unless_bind_unix_socket": "@test.support.socket_helper.skip_unless_bind_unix_socket",
 "test.support.wait_process": "test.support.wait_process(pid, *, exitcode, timeout=None)",
 "test.support.script_helper.kill_python": "test.support.script_helper.kill_python(p)",
 "test.support.skip_if_broken_multiprocessing_synchronize": "test.support.skip_if_broken_multiprocessing_synchronize()",
 "test.support.set_memlimit": "test.support.set_memlimit(limit)",
 "test.support.reap_children": "test.support.reap_children()",
 "test.support.import_helper.CleanImport": "class test.support.import_helper.CleanImport(*module_names)",
 "test.support.check_free_after_iterating": "test.support.check_free_after_iterating(test, iter, cls, args=())",
 "test.support.os_helper.skip_unless_symlink": "@test.support.os_helper.skip_unless_symlink",
 "test.support.threading_helper.threading_cleanup": "test.support.threading_helper.threading_cleanup(*original_values)",
 "test.support.calcobjsize": "test.support.calcobjsize(fmt)",
 "test.support.checksizeof": "test.support.checksizeof(test, o, size)",
 "test.support.refcount_test": "@test.support.refcount_test",
 "test.support.requires_zlib": "@test.support.requires_zlib",
 "test.support.run_unittest": "test.support.run_unittest(*classes)",
 "test.support.set_match_tests": "test.support.set_match_tests(accept_patterns=None, ignore_patterns=None)",
 "test.support.flush_std_streams": "test.support.flush_std_streams()",
 "test.support.threading_helper.threading_setup": "test.support.threading_helper.threading_setup()",
 "test.support.system_must_validate_cert": "test.support.system_must_validate_cert(f)",
 "test.support.os_helper.FakePath": "class test.support.os_helper.FakePath(path)",
 "test.support.requires_linux_version": "@test.support.requires_linux_version(*min_version)",
 "test.support.os_helper.fs_is_case_insensitive": "test.support.os_helper.fs_is_case_insensitive(directory)",
 "test.support.os_helper.temp_umask": "test.support.os_helper.temp_umask(umask)",
 "test.support.warnings_helper.WarningsRecorder": "class test.support.warnings_helper.WarningsRecorder",
 "test.support.socket_helper.find_unused_port": "test.support.socket_helper.find_unused_port(family=socket.AF_INET, socktype=socket.SOCK_STREAM)",
 "test.support.os_helper.change_cwd": "test.support.os_helper.change_cwd(path, quiet=False)",
 "test.support.run_in_subinterp": "test.support.run_in_subinterp(code)",
 "test.support.os_helper.temp_cwd": "test.support.os_helper.temp_cwd(name='tempcwd', quiet=False)",
 "test.support.script_helper.make_zip_script": "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)",
 "test.support.os_helper.skip_unless_xattr": "@test.support.os_helper.skip_unless_xattr",
 "test.support.optim_args_from_interpreter_flags": "test.support.optim_args_from_interpreter_flags()",
 "test.support.bytecode_helper.BytecodeTestCase": "class test.support.bytecode_helper.BytecodeTestCase(unittest.TestCase)",
 "test.support.findfile": "test.support.findfile(filename, subdir=None)",
 "test.support.adjust_int_max_str_digits": "test.support.adjust_int_max_str_digits(max_digits)",
 "test.support.warnings_helper.ignore_warnings": "test.support.warnings_helper.ignore_warnings(*, category)",
 "test.support.script_helper.make_pkg": "test.support.script_helper.make_pkg(pkg_dir, init_source='')",
 "test.support.requires_lzma": "@test.support.requires_lzma",
 "test.support.threading_helper.wait_threads_exit": "test.support.threading_helper.wait_threads_exit(timeout=None)",
 "test.support.import_helper.DirsOnSysPath": "class test.support.import_helper.DirsOnSysPath(*paths)",
 "test.support.import_helper.import_module": "test.support.import_helper.import_module(name, deprecated=False, *, required_on=())",
 "test.support.bigmemtest": "@test.support.bigmemtest(size, memuse, dry_run=True)",
 "test.support.script_helper.make_script": "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)",
 "test.support.import_helper.forget": "test.support.import_helper.forget(module_name)",
 "test.support.sortdict": "test.support.sortdict(dict)",
 "test.support.disable_faulthandler": "test.support.disable_faulthandler()"
}