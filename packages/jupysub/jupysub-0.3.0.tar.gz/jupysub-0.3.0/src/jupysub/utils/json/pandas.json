{
 "pandas.api.extensions.register_dataframe_accessor": "pandas.api.extensions.register_dataframe_accessor(name)",
 "pandas.api.extensions.register_extension_dtype": "pandas.api.extensions.register_extension_dtype(cls)",
 "pandas.api.extensions.register_index_accessor": "pandas.api.extensions.register_index_accessor(name)",
 "pandas.api.extensions.register_series_accessor": "pandas.api.extensions.register_series_accessor(name)",
 "pandas.api.indexers.check_array_indexer": "pandas.api.indexers.check_array_indexer(array, indexer)",
 "pandas.api.interchange.from_dataframe": "pandas.api.interchange.from_dataframe(df, allow_copy=True)",
 "pandas.api.types.infer_dtype": "pandas.api.types.infer_dtype()",
 "pandas.api.types.is_any_real_numeric_dtype": "pandas.api.types.is_any_real_numeric_dtype(arr_or_dtype)",
 "pandas.api.types.is_bool": "pandas.api.types.is_bool()",
 "pandas.api.types.is_bool_dtype": "pandas.api.types.is_bool_dtype(arr_or_dtype)",
 "pandas.api.types.is_categorical_dtype": "pandas.api.types.is_categorical_dtype(arr_or_dtype)",
 "pandas.api.types.is_complex": "pandas.api.types.is_complex()",
 "pandas.api.types.is_complex_dtype": "pandas.api.types.is_complex_dtype(arr_or_dtype)",
 "pandas.api.types.is_datetime64tz_dtype": "pandas.api.types.is_datetime64tz_dtype(arr_or_dtype)",
 "pandas.api.types.is_datetime64_any_dtype": "pandas.api.types.is_datetime64_any_dtype(arr_or_dtype)",
 "pandas.api.types.is_datetime64_dtype": "pandas.api.types.is_datetime64_dtype(arr_or_dtype)",
 "pandas.api.types.is_datetime64_ns_dtype": "pandas.api.types.is_datetime64_ns_dtype(arr_or_dtype)",
 "pandas.api.types.is_dict_like": "pandas.api.types.is_dict_like(obj)",
 "pandas.api.types.is_extension_array_dtype": "pandas.api.types.is_extension_array_dtype(arr_or_dtype)",
 "pandas.api.types.is_file_like": "pandas.api.types.is_file_like(obj)",
 "pandas.api.types.is_float": "pandas.api.types.is_float()",
 "pandas.api.types.is_float_dtype": "pandas.api.types.is_float_dtype(arr_or_dtype)",
 "pandas.api.types.is_hashable": "pandas.api.types.is_hashable(obj)",
 "pandas.api.types.is_int64_dtype": "pandas.api.types.is_int64_dtype(arr_or_dtype)",
 "pandas.api.types.is_integer": "pandas.api.types.is_integer()",
 "pandas.api.types.is_integer_dtype": "pandas.api.types.is_integer_dtype(arr_or_dtype)",
 "pandas.api.types.is_interval": "pandas.api.types.is_interval()",
 "pandas.api.types.is_interval_dtype": "pandas.api.types.is_interval_dtype(arr_or_dtype)",
 "pandas.api.types.is_iterator": "pandas.api.types.is_iterator()",
 "pandas.api.types.is_list_like": "pandas.api.types.is_list_like()",
 "pandas.api.types.is_named_tuple": "pandas.api.types.is_named_tuple(obj)",
 "pandas.api.types.is_number": "pandas.api.types.is_number(obj)",
 "pandas.api.types.is_numeric_dtype": "pandas.api.types.is_numeric_dtype(arr_or_dtype)",
 "pandas.api.types.is_object_dtype": "pandas.api.types.is_object_dtype(arr_or_dtype)",
 "pandas.api.types.is_period_dtype": "pandas.api.types.is_period_dtype(arr_or_dtype)",
 "pandas.api.types.is_re": "pandas.api.types.is_re(obj)",
 "pandas.api.types.is_re_compilable": "pandas.api.types.is_re_compilable(obj)",
 "pandas.api.types.is_scalar": "pandas.api.types.is_scalar()",
 "pandas.api.types.is_signed_integer_dtype": "pandas.api.types.is_signed_integer_dtype(arr_or_dtype)",
 "pandas.api.types.is_sparse": "pandas.api.types.is_sparse(arr)",
 "pandas.api.types.is_string_dtype": "pandas.api.types.is_string_dtype(arr_or_dtype)",
 "pandas.api.types.is_timedelta64_dtype": "pandas.api.types.is_timedelta64_dtype(arr_or_dtype)",
 "pandas.api.types.is_timedelta64_ns_dtype": "pandas.api.types.is_timedelta64_ns_dtype(arr_or_dtype)",
 "pandas.api.types.is_unsigned_integer_dtype": "pandas.api.types.is_unsigned_integer_dtype(arr_or_dtype)",
 "pandas.api.types.pandas_dtype": "pandas.api.types.pandas_dtype(dtype)",
 "pandas.api.types.union_categoricals": "pandas.api.types.union_categoricals(to_union, sort_categories=False, ignore_order=False)",
 "pandas.array": "pandas.array(data, dtype=None, copy=True)",
 "pandas.bdate_range": "pandas.bdate_range(start=None, end=None, periods=None, freq='B', tz=None, normalize=True, name=None, weekmask=None, holidays=None, inclusive='both', **kwargs)",
 "pandas.concat": "pandas.concat(objs, *, axis=0, join='outer', ignore_index=False, keys=None, levels=None, names=None, verify_integrity=False, sort=False, copy=None)",
 "pandas.crosstab": "pandas.crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name='All', dropna=True, normalize=False)",
 "pandas.cut": "pandas.cut(x, bins, right=True, labels=None, retbins=False, precision=3, include_lowest=False, duplicates='raise', ordered=True)",
 "pandas.date_range": "pandas.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, inclusive='both', *, unit=None, **kwargs)",
 "pandas.describe_option": "pandas.describe_option(pat, _print_desc=False) = <pandas._config.config.CallableDynamicDoc object>",
 "pandas.eval": "pandas.eval(expr, parser='pandas', engine=None, local_dict=None, global_dict=None, resolvers=(), level=0, target=None, inplace=False)",
 "pandas.factorize": "pandas.factorize(values, sort=False, use_na_sentinel=True, size_hint=None)",
 "pandas.from_dummies": "pandas.from_dummies(data, sep=None, default_category=None)",
 "pandas.get_dummies": "pandas.get_dummies(data, prefix=None, prefix_sep='_', dummy_na=False, columns=None, sparse=False, drop_first=False, dtype=None)",
 "pandas.get_option": "pandas.get_option(pat) = <pandas._config.config.CallableDynamicDoc object>",
 "pandas.infer_freq": "pandas.infer_freq(index)",
 "pandas.interval_range": "pandas.interval_range(start=None, end=None, periods=None, freq=None, name=None, closed='right')",
 "pandas.io.json.build_table_schema": "pandas.io.json.build_table_schema(data, index=True, primary_key=None, version=True)",
 "pandas.isna": "pandas.isna(obj)",
 "pandas.isnull": "pandas.isnull(obj)",
 "pandas.json_normalize": "pandas.json_normalize(data, record_path=None, meta=None, meta_prefix=None, record_prefix=None, errors='raise', sep='.', max_level=None)",
 "pandas.lreshape": "pandas.lreshape(data, groups, dropna=True)",
 "pandas.melt": "pandas.melt(frame, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None, ignore_index=True)",
 "pandas.merge": "pandas.merge(left, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=None, indicator=False, validate=None)",
 "pandas.merge_asof": "pandas.merge_asof(left, right, on=None, left_on=None, right_on=None, left_index=False, right_index=False, by=None, left_by=None, right_by=None, suffixes=('_x', '_y'), tolerance=None, allow_exact_matches=True, direction='backward')",
 "pandas.merge_ordered": "pandas.merge_ordered(left, right, on=None, left_on=None, right_on=None, left_by=None, right_by=None, fill_method=None, suffixes=('_x', '_y'), how='outer')",
 "pandas.notna": "pandas.notna(obj)",
 "pandas.notnull": "pandas.notnull(obj)",
 "pandas.option_context": "class pandas.option_context(*args)",
 "pandas.period_range": "pandas.period_range(start=None, end=None, periods=None, freq=None, name=None)",
 "pandas.pivot": "pandas.pivot(data, *, columns, index=_NoDefault.no_default, values=_NoDefault.no_default)",
 "pandas.pivot_table": "pandas.pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False, sort=True)",
 "pandas.plotting.andrews_curves": "pandas.plotting.andrews_curves(frame, class_column, ax=None, samples=200, color=None, colormap=None, **kwargs)",
 "pandas.plotting.autocorrelation_plot": "pandas.plotting.autocorrelation_plot(series, ax=None, **kwargs)",
 "pandas.plotting.bootstrap_plot": "pandas.plotting.bootstrap_plot(series, fig=None, size=50, samples=500, **kwds)",
 "pandas.plotting.boxplot": "pandas.plotting.boxplot(data, column=None, by=None, ax=None, fontsize=None, rot=0, grid=True, figsize=None, layout=None, return_type=None, **kwargs)",
 "pandas.plotting.deregister_matplotlib_converters": "pandas.plotting.deregister_matplotlib_converters()",
 "pandas.plotting.lag_plot": "pandas.plotting.lag_plot(series, lag=1, ax=None, **kwds)",
 "pandas.plotting.parallel_coordinates": "pandas.plotting.parallel_coordinates(frame, class_column, cols=None, ax=None, color=None, use_columns=False, xticks=None, colormap=None, axvlines=True, axvlines_kwds=None, sort_labels=False, **kwargs)",
 "pandas.plotting.plot_params": "pandas.plotting.plot_params = {'xaxis.compat': False}",
 "pandas.plotting.radviz": "pandas.plotting.radviz(frame, class_column, ax=None, color=None, colormap=None, **kwds)",
 "pandas.plotting.register_matplotlib_converters": "pandas.plotting.register_matplotlib_converters()",
 "pandas.plotting.scatter_matrix": "pandas.plotting.scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, grid=False, diagonal='hist', marker='.', density_kwds=None, hist_kwds=None, range_padding=0.05, **kwargs)",
 "pandas.plotting.table": "pandas.plotting.table(ax, data, **kwargs)",
 "pandas.qcut": "pandas.qcut(x, q, labels=None, retbins=False, precision=3, duplicates='raise')",
 "pandas.read_clipboard": "pandas.read_clipboard(sep='\\\\s+', dtype_backend=_NoDefault.no_default, **kwargs)",
 "pandas.read_csv": "pandas.read_csv(filepath_or_buffer, *, sep=_NoDefault.no_default, delimiter=None, header='infer', names=_NoDefault.no_default, index_col=None, usecols=None, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=None, infer_datetime_format=_NoDefault.no_default, keep_date_col=False, date_parser=_NoDefault.no_default, date_format=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression='infer', thousands=None, decimal='.', lineterminator=None, quotechar='\"', quoting=0, doublequote=True, escapechar=None, comment=None, encoding=None, encoding_errors='strict', dialect=None, on_bad_lines='error', delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None, storage_options=None, dtype_backend=_NoDefault.no_default)",
 "pandas.read_excel": "pandas.read_excel(io, sheet_name=0, *, header=0, names=None, index_col=None, usecols=None, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, parse_dates=False, date_parser=_NoDefault.no_default, date_format=None, thousands=None, decimal='.', comment=None, skipfooter=0, storage_options=None, dtype_backend=_NoDefault.no_default, engine_kwargs=None)",
 "pandas.read_feather": "pandas.read_feather(path, columns=None, use_threads=True, storage_options=None, dtype_backend=_NoDefault.no_default)",
 "pandas.read_fwf": "pandas.read_fwf(filepath_or_buffer, *, colspecs='infer', widths=None, infer_nrows=100, dtype_backend=_NoDefault.no_default, **kwds)",
 "pandas.read_gbq": "pandas.read_gbq(query, project_id=None, index_col=None, col_order=None, reauth=False, auth_local_webserver=True, dialect=None, location=None, configuration=None, credentials=None, use_bqstorage_api=None, max_results=None, progress_bar_type=None)",
 "pandas.read_hdf": "pandas.read_hdf(path_or_buf, key=None, mode='r', errors='strict', where=None, start=None, stop=None, columns=None, iterator=False, chunksize=None, **kwargs)",
 "pandas.read_html": "pandas.read_html(io, *, match='.+', flavor=None, header=None, index_col=None, skiprows=None, attrs=None, parse_dates=False, thousands=',', encoding=None, decimal='.', converters=None, na_values=None, keep_default_na=True, displayed_only=True, extract_links=None, dtype_backend=_NoDefault.no_default, storage_options=None)",
 "pandas.read_json": "pandas.read_json(path_or_buf, *, orient=None, typ='frame', dtype=None, convert_axes=None, convert_dates=True, keep_default_dates=True, precise_float=False, date_unit=None, encoding=None, encoding_errors='strict', lines=False, chunksize=None, compression='infer', nrows=None, storage_options=None, dtype_backend=_NoDefault.no_default, engine='ujson')",
 "pandas.read_orc": "pandas.read_orc(path, columns=None, dtype_backend=_NoDefault.no_default, filesystem=None, **kwargs)",
 "pandas.read_parquet": "pandas.read_parquet(path, engine='auto', columns=None, storage_options=None, use_nullable_dtypes=_NoDefault.no_default, dtype_backend=_NoDefault.no_default, filesystem=None, filters=None, **kwargs)",
 "pandas.read_pickle": "pandas.read_pickle(filepath_or_buffer, compression='infer', storage_options=None)",
 "pandas.read_sas": "pandas.read_sas(filepath_or_buffer, *, format=None, index=None, encoding=None, chunksize=None, iterator=False, compression='infer')",
 "pandas.read_spss": "pandas.read_spss(path, usecols=None, convert_categoricals=True, dtype_backend=_NoDefault.no_default)",
 "pandas.read_sql": "pandas.read_sql(sql, con, index_col=None, coerce_float=True, params=None, parse_dates=None, columns=None, chunksize=None, dtype_backend=_NoDefault.no_default, dtype=None)",
 "pandas.read_sql_query": "pandas.read_sql_query(sql, con, index_col=None, coerce_float=True, params=None, parse_dates=None, chunksize=None, dtype=None, dtype_backend=_NoDefault.no_default)",
 "pandas.read_sql_table": "pandas.read_sql_table(table_name, con, schema=None, index_col=None, coerce_float=True, parse_dates=None, columns=None, chunksize=None, dtype_backend=_NoDefault.no_default)",
 "pandas.read_stata": "pandas.read_stata(filepath_or_buffer, *, convert_dates=True, convert_categoricals=True, index_col=None, convert_missing=False, preserve_dtypes=True, columns=None, order_categoricals=True, chunksize=None, iterator=False, compression='infer', storage_options=None)",
 "pandas.read_table": "pandas.read_table(filepath_or_buffer, *, sep=_NoDefault.no_default, delimiter=None, header='infer', names=_NoDefault.no_default, index_col=None, usecols=None, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=_NoDefault.no_default, keep_date_col=False, date_parser=_NoDefault.no_default, date_format=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression='infer', thousands=None, decimal='.', lineterminator=None, quotechar='\"', quoting=0, doublequote=True, escapechar=None, comment=None, encoding=None, encoding_errors='strict', dialect=None, on_bad_lines='error', delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None, storage_options=None, dtype_backend=_NoDefault.no_default)",
 "pandas.read_xml": "pandas.read_xml(path_or_buffer, *, xpath='./*', namespaces=None, elems_only=False, attrs_only=False, names=None, dtype=None, converters=None, parse_dates=None, encoding='utf-8', parser='lxml', stylesheet=None, iterparse=None, compression='infer', storage_options=None, dtype_backend=_NoDefault.no_default)",
 "pandas.reset_option": "pandas.reset_option(pat) = <pandas._config.config.CallableDynamicDoc object>",
 "pandas.set_eng_float_format": "pandas.set_eng_float_format(accuracy=3, use_eng_prefix=False)",
 "pandas.set_option": "pandas.set_option(pat, value) = <pandas._config.config.CallableDynamicDoc object>",
 "pandas.show_versions": "pandas.show_versions(as_json=False)",
 "pandas.test": "pandas.test(extra_args=None, run_doctests=False)",
 "pandas.testing.assert_extension_array_equal": "pandas.testing.assert_extension_array_equal(left, right, check_dtype=True, index_values=None, check_exact=False, rtol=1e-05, atol=1e-08, obj='ExtensionArray')",
 "pandas.testing.assert_frame_equal": "pandas.testing.assert_frame_equal(left, right, check_dtype=True, check_index_type='equiv', check_column_type='equiv', check_frame_type=True, check_names=True, by_blocks=False, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_like=False, check_freq=True, check_flags=True, rtol=1e-05, atol=1e-08, obj='DataFrame')",
 "pandas.testing.assert_index_equal": "pandas.testing.assert_index_equal(left, right, exact='equiv', check_names=True, check_exact=True, check_categorical=True, check_order=True, rtol=1e-05, atol=1e-08, obj='Index')",
 "pandas.testing.assert_series_equal": "pandas.testing.assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_category_order=True, check_freq=True, check_flags=True, rtol=1e-05, atol=1e-08, obj='Series', *, check_index=True, check_like=False)",
 "pandas.timedelta_range": "pandas.timedelta_range(start=None, end=None, periods=None, freq=None, name=None, closed=None, *, unit=None)",
 "pandas.to_datetime": "pandas.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=False, format=None, exact=_NoDefault.no_default, unit=None, infer_datetime_format=_NoDefault.no_default, origin='unix', cache=True)",
 "pandas.to_numeric": "pandas.to_numeric(arg, errors='raise', downcast=None, dtype_backend=_NoDefault.no_default)",
 "pandas.to_timedelta": "pandas.to_timedelta(arg, unit=None, errors='raise')",
 "pandas.tseries.frequencies.to_offset": "pandas.tseries.frequencies.to_offset()",
 "pandas.unique": "pandas.unique(values)",
 "pandas.util.hash_array": "pandas.util.hash_array(vals, encoding='utf8', hash_key='0123456789123456', categorize=True)",
 "pandas.util.hash_pandas_object": "pandas.util.hash_pandas_object(obj, index=True, encoding='utf8', hash_key='0123456789123456', categorize=True)",
 "pandas.wide_to_long": "pandas.wide_to_long(df, stubnames, i, j, sep='', suffix='\\\\d+')"
}