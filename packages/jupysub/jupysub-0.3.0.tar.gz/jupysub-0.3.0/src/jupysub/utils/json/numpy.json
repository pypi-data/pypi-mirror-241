{
 "numpy.absolute": "numpy.absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'absolute'>",
 "numpy.add": "numpy.add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'add'>",
 "numpy.all": "numpy.all(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>)",
 "numpy.allclose": "numpy.allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)",
 "numpy.amax": "numpy.amax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.amin": "numpy.amin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.angle": "numpy.angle(z, deg=False)",
 "numpy.any": "numpy.any(a, axis=None, out=None, keepdims=<no value>, *, where=<no value>)",
 "numpy.append": "numpy.append(arr, values, axis=None)",
 "numpy.apply_along_axis": "numpy.apply_along_axis(func1d, axis, arr, *args, **kwargs)",
 "numpy.apply_over_axes": "numpy.apply_over_axes(func, a, axes)",
 "numpy.arange": "numpy.arange([start, ]stop, [step, ]dtype=None, *, like=None)",
 "numpy.arccos": "numpy.arccos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arccos'>",
 "numpy.arccosh": "numpy.arccosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arccosh'>",
 "numpy.arcsin": "numpy.arcsin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arcsin'>",
 "numpy.arcsinh": "numpy.arcsinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arcsinh'>",
 "numpy.arctan": "numpy.arctan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctan'>",
 "numpy.arctan2": "numpy.arctan2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctan2'>",
 "numpy.arctanh": "numpy.arctanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'arctanh'>",
 "numpy.argmax": "numpy.argmax(a, axis=None, out=None, *, keepdims=<no value>)",
 "numpy.argmin": "numpy.argmin(a, axis=None, out=None, *, keepdims=<no value>)",
 "numpy.argpartition": "numpy.argpartition(a, kth, axis=-1, kind='introselect', order=None)",
 "numpy.argsort": "numpy.argsort(a, axis=-1, kind=None, order=None)",
 "numpy.argwhere": "numpy.argwhere(a)",
 "numpy.around": "numpy.around(a, decimals=0, out=None)",
 "numpy.array": "numpy.array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)",
 "numpy.array2string": "numpy.array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<no value>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None)",
 "numpy.array_equal": "numpy.array_equal(a1, a2, equal_nan=False)",
 "numpy.array_equiv": "numpy.array_equiv(a1, a2)",
 "numpy.array_repr": "numpy.array_repr(arr, max_line_width=None, precision=None, suppress_small=None)",
 "numpy.array_split": "numpy.array_split(ary, indices_or_sections, axis=0)",
 "numpy.array_str": "numpy.array_str(a, max_line_width=None, precision=None, suppress_small=None)",
 "numpy.asanyarray": "numpy.asanyarray(a, dtype=None, order=None, *, like=None)",
 "numpy.asarray": "numpy.asarray(a, dtype=None, order=None, *, like=None)",
 "numpy.asarray_chkfinite": "numpy.asarray_chkfinite(a, dtype=None, order=None)",
 "numpy.ascontiguousarray": "numpy.ascontiguousarray(a, dtype=None, *, like=None)",
 "numpy.asfarray": "numpy.asfarray(a, dtype=<class 'numpy.double'>)",
 "numpy.asfortranarray": "numpy.asfortranarray(a, dtype=None, *, like=None)",
 "numpy.asmatrix": "numpy.asmatrix(data, dtype=None)",
 "numpy.atleast_1d": "numpy.atleast_1d(*arys)",
 "numpy.atleast_2d": "numpy.atleast_2d(*arys)",
 "numpy.atleast_3d": "numpy.atleast_3d(*arys)",
 "numpy.average": "numpy.average(a, axis=None, weights=None, returned=False, *, keepdims=<no value>)",
 "numpy.bartlett": "numpy.bartlett(M)",
 "numpy.base_repr": "numpy.base_repr(number, base=2, padding=0)",
 "numpy.binary_repr": "numpy.binary_repr(num, width=None)",
 "numpy.bincount": "numpy.bincount(x, /, weights=None, minlength=0)",
 "numpy.bitwise_and": "numpy.bitwise_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_and'>",
 "numpy.bitwise_or": "numpy.bitwise_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_or'>",
 "numpy.bitwise_xor": "numpy.bitwise_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'bitwise_xor'>",
 "numpy.blackman": "numpy.blackman(M)",
 "numpy.block": "numpy.block(arrays)",
 "numpy.bmat": "numpy.bmat(obj, ldict=None, gdict=None)",
 "numpy.broadcast": "class numpy.broadcast",
 "numpy.broadcast.index": "broadcast.index",
 "numpy.broadcast.iters": "broadcast.iters",
 "numpy.broadcast.nd": "broadcast.nd",
 "numpy.broadcast.ndim": "broadcast.ndim",
 "numpy.broadcast.numiter": "broadcast.numiter",
 "numpy.broadcast.reset": "broadcast.reset()",
 "numpy.broadcast.shape": "broadcast.shape",
 "numpy.broadcast.size": "broadcast.size",
 "numpy.broadcast_arrays": "numpy.broadcast_arrays(*args, subok=False)",
 "numpy.broadcast_shapes": "numpy.broadcast_shapes(*args)",
 "numpy.broadcast_to": "numpy.broadcast_to(array, shape, subok=False)",
 "numpy.busdaycalendar.holidays": "busdaycalendar.holidays",
 "numpy.busdaycalendar": "class numpy.busdaycalendar(weekmask='1111100', holidays=None)",
 "numpy.busdaycalendar.weekmask": "busdaycalendar.weekmask",
 "numpy.busday_count": "numpy.busday_count(begindates, enddates, weekmask='1111100', holidays=[], busdaycal=None, out=None)",
 "numpy.busday_offset": "numpy.busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None, out=None)",
 "numpy.byte_bounds": "numpy.byte_bounds(a)",
 "numpy.can_cast": "numpy.can_cast(from_, to, casting='safe')",
 "numpy.cbrt": "numpy.cbrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cbrt'>",
 "numpy.ceil": "numpy.ceil(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'ceil'>",
 "numpy.char.add": "char.add(x1, x2)",
 "numpy.char.array": "char.array(obj, itemsize=None, copy=True, unicode=None, order=None)",
 "numpy.char.asarray": "char.asarray(obj, itemsize=None, unicode=None, order=None)",
 "numpy.char.capitalize": "char.capitalize(a)",
 "numpy.char.center": "char.center(a, width, fillchar=' ')",
 "numpy.char.chararray.all": "char.chararray.all(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.char.chararray.any": "char.chararray.any(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.char.chararray.argmax": "char.chararray.argmax(axis=None, out=None, *, keepdims=False)",
 "numpy.char.chararray.argmin": "char.chararray.argmin(axis=None, out=None, *, keepdims=False)",
 "numpy.char.chararray.argpartition": "char.chararray.argpartition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.char.chararray.argsort": "char.chararray.argsort(axis=-1, kind=None, order=None)",
 "numpy.char.chararray.astype": "char.chararray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
 "numpy.char.chararray.base": "char.chararray.base",
 "numpy.char.chararray.byteswap": "char.chararray.byteswap(inplace=False)",
 "numpy.char.chararray.capitalize": "char.chararray.capitalize()",
 "numpy.char.chararray.center": "char.chararray.center(width, fillchar=' ')",
 "numpy.char.chararray.choose": "char.chararray.choose(choices, out=None, mode='raise')",
 "numpy.char.chararray.clip": "char.chararray.clip(min=None, max=None, out=None, **kwargs)",
 "numpy.char.chararray.compress": "char.chararray.compress(condition, axis=None, out=None)",
 "numpy.char.chararray.conj": "char.chararray.conj()",
 "numpy.char.chararray.conjugate": "char.chararray.conjugate()",
 "numpy.char.chararray.copy": "char.chararray.copy(order='C')",
 "numpy.char.chararray.count": "char.chararray.count(sub, start=0, end=None)",
 "numpy.char.chararray.ctypes": "char.chararray.ctypes",
 "numpy.char.chararray.cumprod": "char.chararray.cumprod(axis=None, dtype=None, out=None)",
 "numpy.char.chararray.cumsum": "char.chararray.cumsum(axis=None, dtype=None, out=None)",
 "numpy.char.chararray.data": "char.chararray.data",
 "numpy.char.chararray.decode": "char.chararray.decode(encoding=None, errors=None)",
 "numpy.char.chararray.diagonal": "char.chararray.diagonal(offset=0, axis1=0, axis2=1)",
 "numpy.char.chararray.dot": "char.chararray.dot()",
 "numpy.char.chararray.dtype": "char.chararray.dtype",
 "numpy.char.chararray.dump": "char.chararray.dump(file)",
 "numpy.char.chararray.dumps": "char.chararray.dumps()",
 "numpy.char.chararray.encode": "char.chararray.encode(encoding=None, errors=None)",
 "numpy.char.chararray.endswith": "char.chararray.endswith(suffix, start=0, end=None)",
 "numpy.char.chararray.expandtabs": "char.chararray.expandtabs(tabsize=8)",
 "numpy.char.chararray.fill": "char.chararray.fill(value)",
 "numpy.char.chararray.find": "char.chararray.find(sub, start=0, end=None)",
 "numpy.char.chararray.flags": "char.chararray.flags",
 "numpy.char.chararray.flat": "char.chararray.flat",
 "numpy.char.chararray.flatten": "char.chararray.flatten(order='C')",
 "numpy.char.chararray.getfield": "char.chararray.getfield(dtype, offset=0)",
 "numpy.char.chararray": "class numpy.char.chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)",
 "numpy.char.chararray.imag": "char.chararray.imag",
 "numpy.char.chararray.index": "char.chararray.index(sub, start=0, end=None)",
 "numpy.char.chararray.isalnum": "char.chararray.isalnum()",
 "numpy.char.chararray.isalpha": "char.chararray.isalpha()",
 "numpy.char.chararray.isdecimal": "char.chararray.isdecimal()",
 "numpy.char.chararray.isdigit": "char.chararray.isdigit()",
 "numpy.char.chararray.islower": "char.chararray.islower()",
 "numpy.char.chararray.isnumeric": "char.chararray.isnumeric()",
 "numpy.char.chararray.isspace": "char.chararray.isspace()",
 "numpy.char.chararray.istitle": "char.chararray.istitle()",
 "numpy.char.chararray.isupper": "char.chararray.isupper()",
 "numpy.char.chararray.item": "char.chararray.item(*args)",
 "numpy.char.chararray.itemset": "char.chararray.itemset(*args)",
 "numpy.char.chararray.itemsize": "char.chararray.itemsize",
 "numpy.char.chararray.join": "char.chararray.join(seq)",
 "numpy.char.chararray.ljust": "char.chararray.ljust(width, fillchar=' ')",
 "numpy.char.chararray.lower": "char.chararray.lower()",
 "numpy.char.chararray.lstrip": "char.chararray.lstrip(chars=None)",
 "numpy.char.chararray.max": "char.chararray.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.char.chararray.mean": "char.chararray.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
 "numpy.char.chararray.min": "char.chararray.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.char.chararray.nbytes": "char.chararray.nbytes",
 "numpy.char.chararray.ndim": "char.chararray.ndim",
 "numpy.char.chararray.newbyteorder": "char.chararray.newbyteorder(new_order='S', /)",
 "numpy.char.chararray.nonzero": "char.chararray.nonzero()",
 "numpy.char.chararray.partition": "char.chararray.partition(sep)",
 "numpy.char.chararray.prod": "char.chararray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
 "numpy.char.chararray.ptp": "char.chararray.ptp(axis=None, out=None, keepdims=False)",
 "numpy.char.chararray.put": "char.chararray.put(indices, values, mode='raise')",
 "numpy.char.chararray.ravel": "char.chararray.ravel([order])",
 "numpy.char.chararray.real": "char.chararray.real",
 "numpy.char.chararray.repeat": "char.chararray.repeat(repeats, axis=None)",
 "numpy.char.chararray.replace": "char.chararray.replace(old, new, count=None)",
 "numpy.char.chararray.reshape": "char.chararray.reshape(shape, order='C')",
 "numpy.char.chararray.resize": "char.chararray.resize(new_shape, refcheck=True)",
 "numpy.char.chararray.rfind": "char.chararray.rfind(sub, start=0, end=None)",
 "numpy.char.chararray.rindex": "char.chararray.rindex(sub, start=0, end=None)",
 "numpy.char.chararray.rjust": "char.chararray.rjust(width, fillchar=' ')",
 "numpy.char.chararray.round": "char.chararray.round(decimals=0, out=None)",
 "numpy.char.chararray.rpartition": "char.chararray.rpartition(sep)",
 "numpy.char.chararray.rsplit": "char.chararray.rsplit(sep=None, maxsplit=None)",
 "numpy.char.chararray.rstrip": "char.chararray.rstrip(chars=None)",
 "numpy.char.chararray.searchsorted": "char.chararray.searchsorted(v, side='left', sorter=None)",
 "numpy.char.chararray.setfield": "char.chararray.setfield(val, dtype, offset=0)",
 "numpy.char.chararray.setflags": "char.chararray.setflags(write=None, align=None, uic=None)",
 "numpy.char.chararray.shape": "char.chararray.shape",
 "numpy.char.chararray.size": "char.chararray.size",
 "numpy.char.chararray.sort": "char.chararray.sort(axis=-1, kind=None, order=None)",
 "numpy.char.chararray.split": "char.chararray.split(sep=None, maxsplit=None)",
 "numpy.char.chararray.splitlines": "char.chararray.splitlines(keepends=None)",
 "numpy.char.chararray.squeeze": "char.chararray.squeeze(axis=None)",
 "numpy.char.chararray.startswith": "char.chararray.startswith(prefix, start=0, end=None)",
 "numpy.char.chararray.std": "char.chararray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.char.chararray.strides": "char.chararray.strides",
 "numpy.char.chararray.strip": "char.chararray.strip(chars=None)",
 "numpy.char.chararray.sum": "char.chararray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
 "numpy.char.chararray.swapaxes": "char.chararray.swapaxes(axis1, axis2)",
 "numpy.char.chararray.swapcase": "char.chararray.swapcase()",
 "numpy.char.chararray.take": "char.chararray.take(indices, axis=None, out=None, mode='raise')",
 "numpy.char.chararray.title": "char.chararray.title()",
 "numpy.char.chararray.tobytes": "char.chararray.tobytes(order='C')",
 "numpy.char.chararray.tofile": "char.chararray.tofile(fid, sep='', format='%s')",
 "numpy.char.chararray.tolist": "char.chararray.tolist()",
 "numpy.char.chararray.tostring": "char.chararray.tostring(order='C')",
 "numpy.char.chararray.trace": "char.chararray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
 "numpy.char.chararray.translate": "char.chararray.translate(table, deletechars=None)",
 "numpy.char.chararray.transpose": "char.chararray.transpose(*axes)",
 "numpy.char.chararray.upper": "char.chararray.upper()",
 "numpy.char.chararray.var": "char.chararray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.char.chararray.view": "char.chararray.view([dtype][, type])",
 "numpy.char.chararray.zfill": "char.chararray.zfill(width)",
 "numpy.char.compare_chararrays": "char.compare_chararrays(a1, a2, cmp, rstrip)",
 "numpy.char.count": "char.count(a, sub, start=0, end=None)",
 "numpy.char.decode": "char.decode(a, encoding=None, errors=None)",
 "numpy.char.encode": "char.encode(a, encoding=None, errors=None)",
 "numpy.char.endswith": "char.endswith(a, suffix, start=0, end=None)",
 "numpy.char.equal": "char.equal(x1, x2)",
 "numpy.char.expandtabs": "char.expandtabs(a, tabsize=8)",
 "numpy.char.find": "char.find(a, sub, start=0, end=None)",
 "numpy.char.greater": "char.greater(x1, x2)",
 "numpy.char.greater_equal": "char.greater_equal(x1, x2)",
 "numpy.char.index": "char.index(a, sub, start=0, end=None)",
 "numpy.char.isalnum": "char.isalnum(a)",
 "numpy.char.isalpha": "char.isalpha(a)",
 "numpy.char.isdecimal": "char.isdecimal(a)",
 "numpy.char.isdigit": "char.isdigit(a)",
 "numpy.char.islower": "char.islower(a)",
 "numpy.char.isnumeric": "char.isnumeric(a)",
 "numpy.char.isspace": "char.isspace(a)",
 "numpy.char.istitle": "char.istitle(a)",
 "numpy.char.isupper": "char.isupper(a)",
 "numpy.char.join": "char.join(sep, seq)",
 "numpy.char.less": "char.less(x1, x2)",
 "numpy.char.less_equal": "char.less_equal(x1, x2)",
 "numpy.char.ljust": "char.ljust(a, width, fillchar=' ')",
 "numpy.char.lower": "char.lower(a)",
 "numpy.char.lstrip": "char.lstrip(a, chars=None)",
 "numpy.char.mod": "char.mod(a, values)",
 "numpy.char.multiply": "char.multiply(a, i)",
 "numpy.char.not_equal": "char.not_equal(x1, x2)",
 "numpy.char.partition": "char.partition(a, sep)",
 "numpy.char.replace": "char.replace(a, old, new, count=None)",
 "numpy.char.rfind": "char.rfind(a, sub, start=0, end=None)",
 "numpy.char.rindex": "char.rindex(a, sub, start=0, end=None)",
 "numpy.char.rjust": "char.rjust(a, width, fillchar=' ')",
 "numpy.char.rpartition": "char.rpartition(a, sep)",
 "numpy.char.rsplit": "char.rsplit(a, sep=None, maxsplit=None)",
 "numpy.char.rstrip": "char.rstrip(a, chars=None)",
 "numpy.char.split": "char.split(a, sep=None, maxsplit=None)",
 "numpy.char.splitlines": "char.splitlines(a, keepends=None)",
 "numpy.char.startswith": "char.startswith(a, prefix, start=0, end=None)",
 "numpy.char.strip": "char.strip(a, chars=None)",
 "numpy.char.str_len": "char.str_len(a)",
 "numpy.char.swapcase": "char.swapcase(a)",
 "numpy.char.title": "char.title(a)",
 "numpy.char.translate": "char.translate(a, table, deletechars=None)",
 "numpy.char.upper": "char.upper(a)",
 "numpy.char.zfill": "char.zfill(a, width)",
 "numpy.chararray.all": "chararray.all(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.chararray.any": "chararray.any(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.chararray.argmax": "chararray.argmax(axis=None, out=None, *, keepdims=False)",
 "numpy.chararray.argmin": "chararray.argmin(axis=None, out=None, *, keepdims=False)",
 "numpy.chararray.argpartition": "chararray.argpartition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.chararray.argsort": "chararray.argsort(axis=-1, kind=None, order=None)",
 "numpy.chararray.astype": "chararray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
 "numpy.chararray.base": "chararray.base",
 "numpy.chararray.byteswap": "chararray.byteswap(inplace=False)",
 "numpy.chararray.capitalize": "chararray.capitalize()",
 "numpy.chararray.center": "chararray.center(width, fillchar=' ')",
 "numpy.chararray.choose": "chararray.choose(choices, out=None, mode='raise')",
 "numpy.chararray.clip": "chararray.clip(min=None, max=None, out=None, **kwargs)",
 "numpy.chararray.compress": "chararray.compress(condition, axis=None, out=None)",
 "numpy.chararray.conj": "chararray.conj()",
 "numpy.chararray.conjugate": "chararray.conjugate()",
 "numpy.chararray.copy": "chararray.copy(order='C')",
 "numpy.chararray.count": "chararray.count(sub, start=0, end=None)",
 "numpy.chararray.ctypes": "chararray.ctypes",
 "numpy.chararray.cumprod": "chararray.cumprod(axis=None, dtype=None, out=None)",
 "numpy.chararray.cumsum": "chararray.cumsum(axis=None, dtype=None, out=None)",
 "numpy.chararray.data": "chararray.data",
 "numpy.chararray.decode": "chararray.decode(encoding=None, errors=None)",
 "numpy.chararray.diagonal": "chararray.diagonal(offset=0, axis1=0, axis2=1)",
 "numpy.chararray.dot": "chararray.dot()",
 "numpy.chararray.dtype": "chararray.dtype",
 "numpy.chararray.dump": "chararray.dump(file)",
 "numpy.chararray.dumps": "chararray.dumps()",
 "numpy.chararray.encode": "chararray.encode(encoding=None, errors=None)",
 "numpy.chararray.endswith": "chararray.endswith(suffix, start=0, end=None)",
 "numpy.chararray.expandtabs": "chararray.expandtabs(tabsize=8)",
 "numpy.chararray.fill": "chararray.fill(value)",
 "numpy.chararray.find": "chararray.find(sub, start=0, end=None)",
 "numpy.chararray.flags": "chararray.flags",
 "numpy.chararray.flat": "chararray.flat",
 "numpy.chararray.flatten": "chararray.flatten(order='C')",
 "numpy.chararray.getfield": "chararray.getfield(dtype, offset=0)",
 "numpy.chararray": "class numpy.chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0, strides=None, order=None)",
 "numpy.chararray.imag": "chararray.imag",
 "numpy.chararray.index": "chararray.index(sub, start=0, end=None)",
 "numpy.chararray.isalnum": "chararray.isalnum()",
 "numpy.chararray.isalpha": "chararray.isalpha()",
 "numpy.chararray.isdecimal": "chararray.isdecimal()",
 "numpy.chararray.isdigit": "chararray.isdigit()",
 "numpy.chararray.islower": "chararray.islower()",
 "numpy.chararray.isnumeric": "chararray.isnumeric()",
 "numpy.chararray.isspace": "chararray.isspace()",
 "numpy.chararray.istitle": "chararray.istitle()",
 "numpy.chararray.isupper": "chararray.isupper()",
 "numpy.chararray.item": "chararray.item(*args)",
 "numpy.chararray.itemset": "chararray.itemset(*args)",
 "numpy.chararray.itemsize": "chararray.itemsize",
 "numpy.chararray.join": "chararray.join(seq)",
 "numpy.chararray.ljust": "chararray.ljust(width, fillchar=' ')",
 "numpy.chararray.lower": "chararray.lower()",
 "numpy.chararray.lstrip": "chararray.lstrip(chars=None)",
 "numpy.chararray.max": "chararray.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.chararray.mean": "chararray.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
 "numpy.chararray.min": "chararray.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.chararray.nbytes": "chararray.nbytes",
 "numpy.chararray.ndim": "chararray.ndim",
 "numpy.chararray.newbyteorder": "chararray.newbyteorder(new_order='S', /)",
 "numpy.chararray.nonzero": "chararray.nonzero()",
 "numpy.chararray.partition": "chararray.partition(sep)",
 "numpy.chararray.prod": "chararray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
 "numpy.chararray.ptp": "chararray.ptp(axis=None, out=None, keepdims=False)",
 "numpy.chararray.put": "chararray.put(indices, values, mode='raise')",
 "numpy.chararray.ravel": "chararray.ravel([order])",
 "numpy.chararray.real": "chararray.real",
 "numpy.chararray.repeat": "chararray.repeat(repeats, axis=None)",
 "numpy.chararray.replace": "chararray.replace(old, new, count=None)",
 "numpy.chararray.reshape": "chararray.reshape(shape, order='C')",
 "numpy.chararray.resize": "chararray.resize(new_shape, refcheck=True)",
 "numpy.chararray.rfind": "chararray.rfind(sub, start=0, end=None)",
 "numpy.chararray.rindex": "chararray.rindex(sub, start=0, end=None)",
 "numpy.chararray.rjust": "chararray.rjust(width, fillchar=' ')",
 "numpy.chararray.round": "chararray.round(decimals=0, out=None)",
 "numpy.chararray.rpartition": "chararray.rpartition(sep)",
 "numpy.chararray.rsplit": "chararray.rsplit(sep=None, maxsplit=None)",
 "numpy.chararray.rstrip": "chararray.rstrip(chars=None)",
 "numpy.chararray.searchsorted": "chararray.searchsorted(v, side='left', sorter=None)",
 "numpy.chararray.setfield": "chararray.setfield(val, dtype, offset=0)",
 "numpy.chararray.setflags": "chararray.setflags(write=None, align=None, uic=None)",
 "numpy.chararray.shape": "chararray.shape",
 "numpy.chararray.size": "chararray.size",
 "numpy.chararray.sort": "chararray.sort(axis=-1, kind=None, order=None)",
 "numpy.chararray.split": "chararray.split(sep=None, maxsplit=None)",
 "numpy.chararray.splitlines": "chararray.splitlines(keepends=None)",
 "numpy.chararray.squeeze": "chararray.squeeze(axis=None)",
 "numpy.chararray.startswith": "chararray.startswith(prefix, start=0, end=None)",
 "numpy.chararray.std": "chararray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.chararray.strides": "chararray.strides",
 "numpy.chararray.strip": "chararray.strip(chars=None)",
 "numpy.chararray.sum": "chararray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
 "numpy.chararray.swapaxes": "chararray.swapaxes(axis1, axis2)",
 "numpy.chararray.swapcase": "chararray.swapcase()",
 "numpy.chararray.take": "chararray.take(indices, axis=None, out=None, mode='raise')",
 "numpy.chararray.title": "chararray.title()",
 "numpy.chararray.tobytes": "chararray.tobytes(order='C')",
 "numpy.chararray.tofile": "chararray.tofile(fid, sep='', format='%s')",
 "numpy.chararray.tolist": "chararray.tolist()",
 "numpy.chararray.tostring": "chararray.tostring(order='C')",
 "numpy.chararray.trace": "chararray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
 "numpy.chararray.translate": "chararray.translate(table, deletechars=None)",
 "numpy.chararray.transpose": "chararray.transpose(*axes)",
 "numpy.chararray.upper": "chararray.upper()",
 "numpy.chararray.var": "chararray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.chararray.view": "chararray.view([dtype][, type])",
 "numpy.chararray.zfill": "chararray.zfill(width)",
 "numpy.choose": "numpy.choose(a, choices, out=None, mode='raise')",
 "numpy.clip": "numpy.clip(a, a_min, a_max, out=None, **kwargs)",
 "numpy.column_stack": "numpy.column_stack(tup)",
 "numpy.common_type": "numpy.common_type(*arrays)",
 "numpy.compress": "numpy.compress(condition, a, axis=None, out=None)",
 "numpy.concatenate": "numpy.concatenate((a1, a2, ...), axis=0, out=None, dtype=None, casting=\"same_kind\")",
 "numpy.conj": "numpy.conj(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'conjugate'>",
 "numpy.conjugate": "numpy.conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'conjugate'>",
 "numpy.convolve": "numpy.convolve(a, v, mode='full')",
 "numpy.copy": "numpy.copy(a, order='K', subok=False)",
 "numpy.copysign": "numpy.copysign(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'copysign'>",
 "numpy.copyto": "numpy.copyto(dst, src, casting='same_kind', where=True)",
 "numpy.core.defchararray.array": "core.defchararray.array(obj, itemsize=None, copy=True, unicode=None, order=None)",
 "numpy.core.defchararray.asarray": "core.defchararray.asarray(obj, itemsize=None, unicode=None, order=None)",
 "numpy.core.records.array": "core.records.array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True)",
 "numpy.core.records.fromarrays": "core.records.fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)",
 "numpy.core.records.fromfile": "core.records.fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)",
 "numpy.core.records.fromrecords": "core.records.fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)",
 "numpy.core.records.fromstring": "core.records.fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)",
 "numpy.corrcoef": "numpy.corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>, *, dtype=None)",
 "numpy.correlate": "numpy.correlate(a, v, mode='valid')",
 "numpy.cos": "numpy.cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cos'>",
 "numpy.cosh": "numpy.cosh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'cosh'>",
 "numpy.count_nonzero": "numpy.count_nonzero(a, axis=None, *, keepdims=False)",
 "numpy.cov": "numpy.cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None)",
 "numpy.cross": "numpy.cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)",
 "numpy.cumprod": "numpy.cumprod(a, axis=None, dtype=None, out=None)",
 "numpy.cumsum": "numpy.cumsum(a, axis=None, dtype=None, out=None)",
 "numpy.datetime_as_string": "numpy.datetime_as_string(arr, unit=None, timezone='naive', casting='same_kind')",
 "numpy.datetime_data": "numpy.datetime_data(dtype, /)",
 "numpy.deg2rad": "numpy.deg2rad(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'deg2rad'>",
 "numpy.degrees": "numpy.degrees(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'degrees'>",
 "numpy.delete": "numpy.delete(arr, obj, axis=None)",
 "numpy.deprecate": "numpy.deprecate(*args, **kwargs)",
 "numpy.deprecate_with_doc": "numpy.deprecate_with_doc(msg)",
 "numpy.diag": "numpy.diag(v, k=0)",
 "numpy.diagflat": "numpy.diagflat(v, k=0)",
 "numpy.diagonal": "numpy.diagonal(a, offset=0, axis1=0, axis2=1)",
 "numpy.diag_indices": "numpy.diag_indices(n, ndim=2)",
 "numpy.diag_indices_from": "numpy.diag_indices_from(arr)",
 "numpy.diff": "numpy.diff(a, n=1, axis=-1, prepend=<no value>, append=<no value>)",
 "numpy.digitize": "numpy.digitize(x, bins, right=False)",
 "numpy.disp": "numpy.disp(mesg, device=None, linefeed=True)",
 "numpy.distutils.ccompiler.gen_lib_options": "distutils.ccompiler.gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)",
 "numpy.distutils.ccompiler.new_compiler": "distutils.ccompiler.new_compiler(plat=None, compiler=None, verbose=None, dry_run=0, force=0)",
 "numpy.distutils.ccompiler.replace_method": "distutils.ccompiler.replace_method(klass, method_name, func)",
 "numpy.distutils.ccompiler.simple_version_match": "distutils.ccompiler.simple_version_match(pat='[-.\\\\d]+', ignore='', start='')",
 "numpy.distutils.ccompiler_opt.new_ccompiler_opt": "distutils.ccompiler_opt.new_ccompiler_opt(compiler, dispatch_hpath, **kwargs)",
 "numpy.distutils.cpuinfo.cpu": "distutils.cpuinfo.cpu = <numpy.distutils.cpuinfo.LinuxCPUInfo object>",
 "numpy.distutils.exec_command.exec_command": "distutils.exec_command.exec_command(command, execute_in='', use_shell=None, use_tee=None, _with_python=1, **env)",
 "numpy.distutils.exec_command.filepath_from_subprocess_output": "distutils.exec_command.filepath_from_subprocess_output(output)",
 "numpy.distutils.exec_command.find_executable": "distutils.exec_command.find_executable(exe, path=None, _cache={})",
 "numpy.distutils.exec_command.forward_bytes_to_stdout": "distutils.exec_command.forward_bytes_to_stdout(val)",
 "numpy.distutils.exec_command.get_pythonexe": "distutils.exec_command.get_pythonexe()",
 "numpy.distutils.exec_command.temp_file_name": "distutils.exec_command.temp_file_name()",
 "numpy.distutils.log.set_verbosity": "distutils.log.set_verbosity(v, force=False)",
 "numpy.distutils.system_info.get_info": "distutils.system_info.get_info(name, notfound_action=0)",
 "numpy.distutils.system_info.get_standard_file": "distutils.system_info.get_standard_file(fname)",
 "numpy.divide": "numpy.divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'divide'>",
 "numpy.divmod": "numpy.divmod(x1, x2, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'divmod'>",
 "numpy.dot": "numpy.dot(a, b, out=None)",
 "numpy.dsplit": "numpy.dsplit(ary, indices_or_sections)",
 "numpy.dstack": "numpy.dstack(tup)",
 "numpy.dtype.alignment": "dtype.alignment",
 "numpy.dtype.base": "dtype.base",
 "numpy.dtype.byteorder": "dtype.byteorder",
 "numpy.dtype.char": "dtype.char",
 "numpy.dtype.descr": "dtype.descr",
 "numpy.dtype.fields": "dtype.fields",
 "numpy.dtype.flags": "dtype.flags",
 "numpy.dtype.hasobject": "dtype.hasobject",
 "numpy.dtype": "class numpy.dtype(dtype, align=False, copy=False[, metadata])",
 "numpy.dtype.isalignedstruct": "dtype.isalignedstruct",
 "numpy.dtype.isbuiltin": "dtype.isbuiltin",
 "numpy.dtype.isnative": "dtype.isnative",
 "numpy.dtype.itemsize": "dtype.itemsize",
 "numpy.dtype.kind": "dtype.kind",
 "numpy.dtype.metadata": "dtype.metadata",
 "numpy.dtype.name": "dtype.name",
 "numpy.dtype.names": "dtype.names",
 "numpy.dtype.ndim": "dtype.ndim",
 "numpy.dtype.newbyteorder": "dtype.newbyteorder(new_order='S', /)",
 "numpy.dtype.num": "dtype.num",
 "numpy.dtype.shape": "dtype.shape",
 "numpy.dtype.str": "dtype.str",
 "numpy.dtype.subdtype": "dtype.subdtype",
 "numpy.dtype.type": "dtype.type = None",
 "numpy.ediff1d": "numpy.ediff1d(ary, to_end=None, to_begin=None)",
 "numpy.einsum": "numpy.einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False)",
 "numpy.einsum_path": "numpy.einsum_path(subscripts, *operands, optimize='greedy')",
 "numpy.emath.arccos": "emath.arccos(x)",
 "numpy.emath.arcsin": "emath.arcsin(x)",
 "numpy.emath.arctanh": "emath.arctanh(x)",
 "numpy.emath.log": "emath.log(x)",
 "numpy.emath.log10": "emath.log10(x)",
 "numpy.emath.log2": "emath.log2(x)",
 "numpy.emath.logn": "emath.logn(n, x)",
 "numpy.emath.power": "emath.power(x, p)",
 "numpy.emath.sqrt": "emath.sqrt(x)",
 "numpy.empty": "numpy.empty(shape, dtype=float, order='C', *, like=None)",
 "numpy.empty_like": "numpy.empty_like(prototype, dtype=None, order='K', subok=True, shape=None)",
 "numpy.equal": "numpy.equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'equal'>",
 "numpy.errstate": "class numpy.errstate(**kwargs)",
 "numpy.exp": "numpy.exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'exp'>",
 "numpy.exp2": "numpy.exp2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'exp2'>",
 "numpy.expand_dims": "numpy.expand_dims(a, axis)",
 "numpy.expm1": "numpy.expm1(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'expm1'>",
 "numpy.extract": "numpy.extract(condition, arr)",
 "numpy.eye": "numpy.eye(N, M=None, k=0, dtype=<class 'float'>, order='C', *, like=None)",
 "numpy.fabs": "numpy.fabs(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fabs'>",
 "numpy.fft.fft": "fft.fft(a, n=None, axis=-1, norm=None)",
 "numpy.fft.fft2": "fft.fft2(a, s=None, axes=(-2, -1), norm=None)",
 "numpy.fft.fftfreq": "fft.fftfreq(n, d=1.0)",
 "numpy.fft.fftn": "fft.fftn(a, s=None, axes=None, norm=None)",
 "numpy.fft.fftshift": "fft.fftshift(x, axes=None)",
 "numpy.fft.hfft": "fft.hfft(a, n=None, axis=-1, norm=None)",
 "numpy.fft.ifft": "fft.ifft(a, n=None, axis=-1, norm=None)",
 "numpy.fft.ifft2": "fft.ifft2(a, s=None, axes=(-2, -1), norm=None)",
 "numpy.fft.ifftn": "fft.ifftn(a, s=None, axes=None, norm=None)",
 "numpy.fft.ifftshift": "fft.ifftshift(x, axes=None)",
 "numpy.fft.ihfft": "fft.ihfft(a, n=None, axis=-1, norm=None)",
 "numpy.fft.irfft": "fft.irfft(a, n=None, axis=-1, norm=None)",
 "numpy.fft.irfft2": "fft.irfft2(a, s=None, axes=(-2, -1), norm=None)",
 "numpy.fft.irfftn": "fft.irfftn(a, s=None, axes=None, norm=None)",
 "numpy.fft.rfft": "fft.rfft(a, n=None, axis=-1, norm=None)",
 "numpy.fft.rfft2": "fft.rfft2(a, s=None, axes=(-2, -1), norm=None)",
 "numpy.fft.rfftfreq": "fft.rfftfreq(n, d=1.0)",
 "numpy.fft.rfftn": "fft.rfftn(a, s=None, axes=None, norm=None)",
 "numpy.fill_diagonal": "numpy.fill_diagonal(a, val, wrap=False)",
 "numpy.find_common_type": "numpy.find_common_type(array_types, scalar_types)",
 "numpy.finfo": "class numpy.finfo(dtype)",
 "numpy.finfo.smallest_normal": "property finfo.smallest_normal",
 "numpy.finfo.tiny": "property finfo.tiny",
 "numpy.fix": "numpy.fix(x, out=None)",
 "numpy.flatiter.base": "flatiter.base",
 "numpy.flatiter.coords": "flatiter.coords",
 "numpy.flatiter.copy": "flatiter.copy()",
 "numpy.flatiter": "class numpy.flatiter",
 "numpy.flatiter.index": "flatiter.index",
 "numpy.flatnonzero": "numpy.flatnonzero(a)",
 "numpy.flip": "numpy.flip(m, axis=None)",
 "numpy.fliplr": "numpy.fliplr(m)",
 "numpy.flipud": "numpy.flipud(m)",
 "numpy.float_power": "numpy.float_power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'float_power'>",
 "numpy.floor": "numpy.floor(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'floor'>",
 "numpy.floor_divide": "numpy.floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'floor_divide'>",
 "numpy.fmax": "numpy.fmax(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmax'>",
 "numpy.fmin": "numpy.fmin(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmin'>",
 "numpy.fmod": "numpy.fmod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'fmod'>",
 "numpy.format_float_positional": "numpy.format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None)",
 "numpy.format_float_scientific": "numpy.format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None)",
 "numpy.format_parser": "class numpy.format_parser(formats, names, titles, aligned=False, byteorder=None)",
 "numpy.frexp": "numpy.frexp(x, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'frexp'>",
 "numpy.frombuffer": "numpy.frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None)",
 "numpy.fromfile": "numpy.fromfile(file, dtype=float, count=-1, sep='', offset=0, *, like=None)",
 "numpy.fromfunction": "numpy.fromfunction(function, shape, *, dtype=<class 'float'>, like=None, **kwargs)",
 "numpy.fromiter": "numpy.fromiter(iter, dtype, count=-1, *, like=None)",
 "numpy.frompyfunc": "numpy.frompyfunc(func, /, nin, nout, *[, identity])",
 "numpy.fromregex": "numpy.fromregex(file, regexp, dtype, encoding=None)",
 "numpy.fromstring": "numpy.fromstring(string, dtype=float, count=-1, *, sep, like=None)",
 "numpy.from_dlpack": "numpy.from_dlpack(x, /)",
 "numpy.full": "numpy.full(shape, fill_value, dtype=None, order='C', *, like=None)",
 "numpy.full_like": "numpy.full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None)",
 "numpy.gcd": "numpy.gcd(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'gcd'>",
 "numpy.generic.base": "generic.base",
 "numpy.generic.byteswap": "generic.byteswap()",
 "numpy.generic.data": "generic.data",
 "numpy.generic.dtype": "generic.dtype",
 "numpy.generic.flags": "generic.flags",
 "numpy.generic.flat": "generic.flat",
 "numpy.generic.imag": "generic.imag",
 "numpy.generic.itemsize": "generic.itemsize",
 "numpy.generic.ndim": "generic.ndim",
 "numpy.generic.real": "generic.real",
 "numpy.generic.setflags": "generic.setflags()",
 "numpy.generic.shape": "generic.shape",
 "numpy.generic.size": "generic.size",
 "numpy.generic.squeeze": "generic.squeeze()",
 "numpy.generic.strides": "generic.strides",
 "numpy.genfromtxt": "numpy.genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\" !#$%&'()*+, -./:;<=>?@[\\\\]^{|}~\", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, ndmin=0, like=None)",
 "numpy.geomspace": "numpy.geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0)",
 "numpy.getbufsize": "numpy.getbufsize()",
 "numpy.geterr": "numpy.geterr()",
 "numpy.geterrcall": "numpy.geterrcall()",
 "numpy.geterrobj": "numpy.geterrobj()",
 "numpy.get_include": "numpy.get_include()",
 "numpy.get_printoptions": "numpy.get_printoptions()",
 "numpy.gradient": "numpy.gradient(f, *varargs, axis=None, edge_order=1)",
 "numpy.greater": "numpy.greater(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'greater'>",
 "numpy.greater_equal": "numpy.greater_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'greater_equal'>",
 "numpy.hamming": "numpy.hamming(M)",
 "numpy.hanning": "numpy.hanning(M)",
 "numpy.heaviside": "numpy.heaviside(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'heaviside'>",
 "numpy.histogram": "numpy.histogram(a, bins=10, range=None, density=None, weights=None)",
 "numpy.histogram2d": "numpy.histogram2d(x, y, bins=10, range=None, density=None, weights=None)",
 "numpy.histogramdd": "numpy.histogramdd(sample, bins=10, range=None, density=None, weights=None)",
 "numpy.histogram_bin_edges": "numpy.histogram_bin_edges(a, bins=10, range=None, weights=None)",
 "numpy.hsplit": "numpy.hsplit(ary, indices_or_sections)",
 "numpy.hstack": "numpy.hstack(tup, *, dtype=None, casting='same_kind')",
 "numpy.hypot": "numpy.hypot(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'hypot'>",
 "numpy.i0": "numpy.i0(x)",
 "numpy.identity": "numpy.identity(n, dtype=None, *, like=None)",
 "numpy.iinfo": "class numpy.iinfo(type)",
 "numpy.iinfo.max": "property iinfo.max",
 "numpy.iinfo.min": "property iinfo.min",
 "numpy.imag": "numpy.imag(val)",
 "numpy.in1d": "numpy.in1d(ar1, ar2, assume_unique=False, invert=False, *, kind=None)",
 "numpy.indices": "numpy.indices(dimensions, dtype=<class 'int'>, sparse=False)",
 "numpy.info": "numpy.info(object=None, maxwidth=76, output=None, toplevel='numpy')",
 "numpy.inner": "numpy.inner(a, b, /)",
 "numpy.insert": "numpy.insert(arr, obj, values, axis=None)",
 "numpy.interp": "numpy.interp(x, xp, fp, left=None, right=None, period=None)",
 "numpy.intersect1d": "numpy.intersect1d(ar1, ar2, assume_unique=False, return_indices=False)",
 "numpy.invert": "numpy.invert(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'invert'>",
 "numpy.isclose": "numpy.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)",
 "numpy.iscomplex": "numpy.iscomplex(x)",
 "numpy.iscomplexobj": "numpy.iscomplexobj(x)",
 "numpy.isfinite": "numpy.isfinite(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isfinite'>",
 "numpy.isfortran": "numpy.isfortran(a)",
 "numpy.isin": "numpy.isin(element, test_elements, assume_unique=False, invert=False, *, kind=None)",
 "numpy.isinf": "numpy.isinf(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isinf'>",
 "numpy.isnan": "numpy.isnan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isnan'>",
 "numpy.isnat": "numpy.isnat(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'isnat'>",
 "numpy.isneginf": "numpy.isneginf(x, out=None)",
 "numpy.isposinf": "numpy.isposinf(x, out=None)",
 "numpy.isreal": "numpy.isreal(x)",
 "numpy.isrealobj": "numpy.isrealobj(x)",
 "numpy.isscalar": "numpy.isscalar(element)",
 "numpy.issctype": "numpy.issctype(rep)",
 "numpy.issubdtype": "numpy.issubdtype(arg1, arg2)",
 "numpy.issubsctype": "numpy.issubsctype(arg1, arg2)",
 "numpy.is_busday": "numpy.is_busday(dates, weekmask='1111100', holidays=None, busdaycal=None, out=None)",
 "numpy.iterable": "numpy.iterable(y)",
 "numpy.kaiser": "numpy.kaiser(M, beta)",
 "numpy.kron": "numpy.kron(a, b)",
 "numpy.lcm": "numpy.lcm(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'lcm'>",
 "numpy.ldexp": "numpy.ldexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'ldexp'>",
 "numpy.left_shift": "numpy.left_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'left_shift'>",
 "numpy.less": "numpy.less(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'less'>",
 "numpy.less_equal": "numpy.less_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'less_equal'>",
 "numpy.lexsort": "numpy.lexsort(keys, axis=-1)",
 "numpy.lib.format.descr_to_dtype": "lib.format.descr_to_dtype(descr)",
 "numpy.lib.format.dtype_to_descr": "lib.format.dtype_to_descr(dtype)",
 "numpy.lib.format.header_data_from_array_1_0": "lib.format.header_data_from_array_1_0(array)",
 "numpy.lib.format.magic": "lib.format.magic(major, minor)",
 "numpy.lib.format.open_memmap": "lib.format.open_memmap(filename, mode='r+', dtype=None, shape=None, fortran_order=False, version=None, *, max_header_size=10000)",
 "numpy.lib.format.read_array": "lib.format.read_array(fp, allow_pickle=False, pickle_kwargs=None, *, max_header_size=10000)",
 "numpy.lib.format.read_array_header_1_0": "lib.format.read_array_header_1_0(fp, max_header_size=10000)",
 "numpy.lib.format.read_array_header_2_0": "lib.format.read_array_header_2_0(fp, max_header_size=10000)",
 "numpy.lib.format.read_magic": "lib.format.read_magic(fp)",
 "numpy.lib.format.write_array": "lib.format.write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None)",
 "numpy.lib.format.write_array_header_1_0": "lib.format.write_array_header_1_0(fp, d)",
 "numpy.lib.format.write_array_header_2_0": "lib.format.write_array_header_2_0(fp, d)",
 "numpy.lib.stride_tricks.as_strided": "lib.stride_tricks.as_strided(x, shape=None, strides=None, subok=False, writeable=True)",
 "numpy.lib.stride_tricks.sliding_window_view": "lib.stride_tricks.sliding_window_view(x, window_shape, axis=None, *, subok=False, writeable=False)",
 "numpy.lib.user_array.container.astype": "lib.user_array.container.astype(typecode)",
 "numpy.lib.user_array.container.byteswap": "lib.user_array.container.byteswap()",
 "numpy.lib.user_array.container.copy": "lib.user_array.container.copy()",
 "numpy.lib.user_array.container": "class numpy.lib.user_array.container(data, dtype=None, copy=True)",
 "numpy.lib.user_array.container.tobytes": "lib.user_array.container.tobytes()",
 "numpy.lib.user_array.container.tostring": "lib.user_array.container.tostring()",
 "numpy.linalg.cholesky": "linalg.cholesky(a)",
 "numpy.linalg.cond": "linalg.cond(x, p=None)",
 "numpy.linalg.det": "linalg.det(a)",
 "numpy.linalg.eig": "linalg.eig(a)",
 "numpy.linalg.eigh": "linalg.eigh(a, UPLO='L')",
 "numpy.linalg.eigvals": "linalg.eigvals(a)",
 "numpy.linalg.eigvalsh": "linalg.eigvalsh(a, UPLO='L')",
 "numpy.linalg.inv": "linalg.inv(a)",
 "numpy.linalg.lstsq": "linalg.lstsq(a, b, rcond='warn')",
 "numpy.linalg.matrix_power": "linalg.matrix_power(a, n)",
 "numpy.linalg.matrix_rank": "linalg.matrix_rank(A, tol=None, hermitian=False)",
 "numpy.linalg.multi_dot": "linalg.multi_dot(arrays, *, out=None)",
 "numpy.linalg.norm": "linalg.norm(x, ord=None, axis=None, keepdims=False)",
 "numpy.linalg.pinv": "linalg.pinv(a, rcond=1e-15, hermitian=False)",
 "numpy.linalg.qr": "linalg.qr(a, mode='reduced')",
 "numpy.linalg.slogdet": "linalg.slogdet(a)",
 "numpy.linalg.solve": "linalg.solve(a, b)",
 "numpy.linalg.svd": "linalg.svd(a, full_matrices=True, compute_uv=True, hermitian=False)",
 "numpy.linalg.tensorinv": "linalg.tensorinv(a, ind=2)",
 "numpy.linalg.tensorsolve": "linalg.tensorsolve(a, b, axes=None)",
 "numpy.linspace": "numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)",
 "numpy.load": "numpy.load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII', *, max_header_size=10000)",
 "numpy.loadtxt": "numpy.loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, quotechar=None, like=None)",
 "numpy.log": "numpy.log(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log'>",
 "numpy.log10": "numpy.log10(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log10'>",
 "numpy.log1p": "numpy.log1p(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log1p'>",
 "numpy.log2": "numpy.log2(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'log2'>",
 "numpy.logaddexp": "numpy.logaddexp(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logaddexp'>",
 "numpy.logaddexp2": "numpy.logaddexp2(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logaddexp2'>",
 "numpy.logical_and": "numpy.logical_and(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_and'>",
 "numpy.logical_not": "numpy.logical_not(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_not'>",
 "numpy.logical_or": "numpy.logical_or(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_or'>",
 "numpy.logical_xor": "numpy.logical_xor(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'logical_xor'>",
 "numpy.logspace": "numpy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)",
 "numpy.lookfor": "numpy.lookfor(what, module=None, import_modules=True, regenerate=False, output=None)",
 "numpy.ma.all": "ma.all(self, axis=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>",
 "numpy.ma.allclose": "ma.allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08)",
 "numpy.ma.allequal": "ma.allequal(a, b, fill_value=True)",
 "numpy.ma.anom": "ma.anom(self, axis=None, dtype=None) = <numpy.ma.core._frommethod object>",
 "numpy.ma.anomalies": "ma.anomalies(self, axis=None, dtype=None) = <numpy.ma.core._frommethod object>",
 "numpy.ma.any": "ma.any(self, axis=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>",
 "numpy.ma.append": "ma.append(a, b, axis=None)",
 "numpy.ma.apply_along_axis": "ma.apply_along_axis(func1d, axis, arr, *args, **kwargs)",
 "numpy.ma.apply_over_axes": "ma.apply_over_axes(func, a, axes)",
 "numpy.ma.arange": "ma.arange([start, ]stop, [step, ]dtype=None, *, like=None) = <numpy.ma.core._convert2ma object>",
 "numpy.ma.argmax": "ma.argmax(self, axis=None, fill_value=None, out=None) = <numpy.ma.core._frommethod object>",
 "numpy.ma.argmin": "ma.argmin(self, axis=None, fill_value=None, out=None) = <numpy.ma.core._frommethod object>",
 "numpy.ma.argsort": "ma.argsort(a, axis=<no value>, kind=None, order=None, endwith=True, fill_value=None)",
 "numpy.ma.around": "ma.around = <numpy.ma.core._MaskedUnaryOperation object>",
 "numpy.ma.array": "ma.array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0)",
 "numpy.ma.asanyarray": "ma.asanyarray(a, dtype=None)",
 "numpy.ma.asarray": "ma.asarray(a, dtype=None, order=None)",
 "numpy.ma.atleast_1d": "ma.atleast_1d = <numpy.ma.extras._fromnxfunction_allargs object>",
 "numpy.ma.atleast_2d": "ma.atleast_2d = <numpy.ma.extras._fromnxfunction_allargs object>",
 "numpy.ma.atleast_3d": "ma.atleast_3d = <numpy.ma.extras._fromnxfunction_allargs object>",
 "numpy.ma.average": "ma.average(a, axis=None, weights=None, returned=False, *, keepdims=<no value>)",
 "numpy.ma.choose": "ma.choose(indices, choices, out=None, mode='raise')",
 "numpy.ma.clip": "ma.clip = <numpy.ma.core._convert2ma object>",
 "numpy.ma.clump_masked": "ma.clump_masked(a)",
 "numpy.ma.clump_unmasked": "ma.clump_unmasked(a)",
 "numpy.ma.column_stack": "ma.column_stack = <numpy.ma.extras._fromnxfunction_seq object>",
 "numpy.ma.common_fill_value": "ma.common_fill_value(a, b)",
 "numpy.ma.compressed": "ma.compressed(x)",
 "numpy.ma.compress_cols": "ma.compress_cols(a)",
 "numpy.ma.compress_rowcols": "ma.compress_rowcols(x, axis=None)",
 "numpy.ma.compress_rows": "ma.compress_rows(a)",
 "numpy.ma.concatenate": "ma.concatenate(arrays, axis=0)",
 "numpy.ma.conjugate": "ma.conjugate(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <numpy.ma.core._MaskedUnaryOperation object>",
 "numpy.ma.copy": "ma.copy(self, *args, **params) a.copy(order='C') = <numpy.ma.core._frommethod object>",
 "numpy.ma.corrcoef": "ma.corrcoef(x, y=None, rowvar=True, bias=<no value>, allow_masked=True, ddof=<no value>)",
 "numpy.ma.count": "ma.count(self, axis=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>",
 "numpy.ma.count_masked": "ma.count_masked(arr, axis=None)",
 "numpy.ma.cov": "ma.cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None)",
 "numpy.ma.cumprod": "ma.cumprod(self, axis=None, dtype=None, out=None) = <numpy.ma.core._frommethod object>",
 "numpy.ma.cumsum": "ma.cumsum(self, axis=None, dtype=None, out=None) = <numpy.ma.core._frommethod object>",
 "numpy.ma.default_fill_value": "ma.default_fill_value(obj)",
 "numpy.ma.diag": "ma.diag(v, k=0)",
 "numpy.ma.diagflat": "ma.diagflat = <numpy.ma.extras._fromnxfunction_single object>",
 "numpy.ma.diff": "ma.diff(a, /, n=1, axis=-1, prepend=<no value>, append=<no value>)",
 "numpy.ma.dot": "ma.dot(a, b, strict=False, out=None)",
 "numpy.ma.dstack": "ma.dstack = <numpy.ma.extras._fromnxfunction_seq object>",
 "numpy.ma.ediff1d": "ma.ediff1d(arr, to_end=None, to_begin=None)",
 "numpy.ma.empty": "ma.empty(shape, dtype=float, order='C', *, like=None) = <numpy.ma.core._convert2ma object>",
 "numpy.ma.empty_like": "ma.empty_like(prototype, dtype=None, order='K', subok=True, shape=None) = <numpy.ma.core._convert2ma object>",
 "numpy.ma.expand_dims": "ma.expand_dims(a, axis)",
 "numpy.ma.filled": "ma.filled(a, fill_value=None)",
 "numpy.ma.fix_invalid": "ma.fix_invalid(a, mask=False, copy=True, fill_value=None)",
 "numpy.ma.flatnotmasked_contiguous": "ma.flatnotmasked_contiguous(a)",
 "numpy.ma.flatnotmasked_edges": "ma.flatnotmasked_edges(a)",
 "numpy.ma.frombuffer": "ma.frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None) = <numpy.ma.core._convert2ma object>",
 "numpy.ma.fromfunction": "ma.fromfunction(function, shape, **dtype) = <numpy.ma.core._convert2ma object>",
 "numpy.ma.getdata": "ma.getdata(a, subok=True)",
 "numpy.ma.getmask": "ma.getmask(a)",
 "numpy.ma.getmaskarray": "ma.getmaskarray(arr)",
 "numpy.ma.harden_mask": "ma.harden_mask(self) = <numpy.ma.core._frommethod object>",
 "numpy.ma.hsplit": "ma.hsplit = <numpy.ma.extras._fromnxfunction_single object>",
 "numpy.ma.hstack": "ma.hstack = <numpy.ma.extras._fromnxfunction_seq object>",
 "numpy.ma.identity": "ma.identity(n, dtype=None) = <numpy.ma.core._convert2ma object>",
 "numpy.ma.in1d": "ma.in1d(ar1, ar2, assume_unique=False, invert=False)",
 "numpy.ma.indices": "ma.indices(dimensions, dtype=<class 'int'>, sparse=False) = <numpy.ma.core._convert2ma object>",
 "numpy.ma.inner": "ma.inner(a, b, /)",
 "numpy.ma.innerproduct": "ma.innerproduct(a, b, /)",
 "numpy.ma.intersect1d": "ma.intersect1d(ar1, ar2, assume_unique=False)",
 "numpy.ma.isarray": "ma.isarray(x)",
 "numpy.ma.isin": "ma.isin(element, test_elements, assume_unique=False, invert=False)",
 "numpy.ma.is_mask": "ma.is_mask(m)",
 "numpy.ma.is_masked": "ma.is_masked(x)",
 "numpy.ma.make_mask": "ma.make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>)",
 "numpy.ma.make_mask_descr": "ma.make_mask_descr(ndtype)",
 "numpy.ma.make_mask_none": "ma.make_mask_none(newshape, dtype=None)",
 "numpy.ma.masked_all": "ma.masked_all(shape, dtype=<class 'float'>)",
 "numpy.ma.masked_all_like": "ma.masked_all_like(arr)",
 "numpy.ma.masked_array.all": "ma.masked_array.all(axis=None, out=None, keepdims=<no value>)",
 "numpy.ma.masked_array.anom": "ma.masked_array.anom(axis=None, dtype=None)",
 "numpy.ma.masked_array.any": "ma.masked_array.any(axis=None, out=None, keepdims=<no value>)",
 "numpy.ma.masked_array.argmax": "ma.masked_array.argmax(axis=None, fill_value=None, out=None, *, keepdims=<no value>)",
 "numpy.ma.masked_array.argmin": "ma.masked_array.argmin(axis=None, fill_value=None, out=None, *, keepdims=<no value>)",
 "numpy.ma.masked_array.argpartition": "ma.masked_array.argpartition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.ma.masked_array.argsort": "ma.masked_array.argsort(axis=<no value>, kind=None, order=None, endwith=True, fill_value=None)",
 "numpy.ma.masked_array.astype": "ma.masked_array.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
 "numpy.ma.masked_array.base": "ma.masked_array.base",
 "numpy.ma.masked_array.baseclass": "property ma.masked_array.baseclass",
 "numpy.ma.masked_array.byteswap": "ma.masked_array.byteswap(inplace=False)",
 "numpy.ma.masked_array.choose": "ma.masked_array.choose(choices, out=None, mode='raise')",
 "numpy.ma.masked_array.clip": "ma.masked_array.clip(min=None, max=None, out=None, **kwargs)",
 "numpy.ma.masked_array.compress": "ma.masked_array.compress(condition, axis=None, out=None)",
 "numpy.ma.masked_array.compressed": "ma.masked_array.compressed()",
 "numpy.ma.masked_array.conj": "ma.masked_array.conj()",
 "numpy.ma.masked_array.conjugate": "ma.masked_array.conjugate()",
 "numpy.ma.masked_array.copy": "ma.masked_array.copy(order='C')",
 "numpy.ma.masked_array.count": "ma.masked_array.count(axis=None, keepdims=<no value>)",
 "numpy.ma.masked_array.ctypes": "ma.masked_array.ctypes",
 "numpy.ma.masked_array.cumprod": "ma.masked_array.cumprod(axis=None, dtype=None, out=None)",
 "numpy.ma.masked_array.cumsum": "ma.masked_array.cumsum(axis=None, dtype=None, out=None)",
 "numpy.ma.masked_array.data": "property ma.masked_array.data",
 "numpy.ma.masked_array.diagonal": "ma.masked_array.diagonal(offset=0, axis1=0, axis2=1)",
 "numpy.ma.masked_array.dot": "ma.masked_array.dot(b, out=None)",
 "numpy.ma.masked_array.dtype": "property ma.masked_array.dtype",
 "numpy.ma.masked_array.dump": "ma.masked_array.dump(file)",
 "numpy.ma.masked_array.dumps": "ma.masked_array.dumps()",
 "numpy.ma.masked_array.fill": "ma.masked_array.fill(value)",
 "numpy.ma.masked_array.filled": "ma.masked_array.filled(fill_value=None)",
 "numpy.ma.masked_array.fill_value": "property ma.masked_array.fill_value",
 "numpy.ma.masked_array.flags": "ma.masked_array.flags",
 "numpy.ma.masked_array.flat": "property ma.masked_array.flat",
 "numpy.ma.masked_array.flatten": "ma.masked_array.flatten(order='C')",
 "numpy.ma.masked_array.getfield": "ma.masked_array.getfield(dtype, offset=0)",
 "numpy.ma.masked_array.get_fill_value": "ma.masked_array.get_fill_value()",
 "numpy.ma.masked_array.get_imag": "ma.masked_array.get_imag()",
 "numpy.ma.masked_array.get_real": "ma.masked_array.get_real()",
 "numpy.ma.masked_array.harden_mask": "ma.masked_array.harden_mask()",
 "numpy.ma.masked_array.hardmask": "property ma.masked_array.hardmask",
 "numpy.ma.masked_array": "numpy.ma.masked_array",
 "numpy.ma.masked_array.ids": "ma.masked_array.ids()",
 "numpy.ma.masked_array.imag": "property ma.masked_array.imag",
 "numpy.ma.masked_array.iscontiguous": "ma.masked_array.iscontiguous()",
 "numpy.ma.masked_array.item": "ma.masked_array.item(*args)",
 "numpy.ma.masked_array.itemset": "ma.masked_array.itemset(*args)",
 "numpy.ma.masked_array.itemsize": "ma.masked_array.itemsize",
 "numpy.ma.masked_array.mask": "property ma.masked_array.mask",
 "numpy.ma.masked_array.max": "ma.masked_array.max(axis=None, out=None, fill_value=None, keepdims=<no value>)",
 "numpy.ma.masked_array.mean": "ma.masked_array.mean(axis=None, dtype=None, out=None, keepdims=<no value>)",
 "numpy.ma.masked_array.min": "ma.masked_array.min(axis=None, out=None, fill_value=None, keepdims=<no value>)",
 "numpy.ma.masked_array.nbytes": "ma.masked_array.nbytes",
 "numpy.ma.masked_array.ndim": "ma.masked_array.ndim",
 "numpy.ma.masked_array.newbyteorder": "ma.masked_array.newbyteorder(new_order='S', /)",
 "numpy.ma.masked_array.nonzero": "ma.masked_array.nonzero()",
 "numpy.ma.masked_array.partition": "ma.masked_array.partition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.ma.masked_array.prod": "ma.masked_array.prod(axis=None, dtype=None, out=None, keepdims=<no value>)",
 "numpy.ma.masked_array.product": "ma.masked_array.product(axis=None, dtype=None, out=None, keepdims=<no value>)",
 "numpy.ma.masked_array.ptp": "ma.masked_array.ptp(axis=None, out=None, fill_value=None, keepdims=False)",
 "numpy.ma.masked_array.put": "ma.masked_array.put(indices, values, mode='raise')",
 "numpy.ma.masked_array.ravel": "ma.masked_array.ravel(order='C')",
 "numpy.ma.masked_array.real": "property ma.masked_array.real",
 "numpy.ma.masked_array.recordmask": "property ma.masked_array.recordmask",
 "numpy.ma.masked_array.repeat": "ma.masked_array.repeat(repeats, axis=None)",
 "numpy.ma.masked_array.reshape": "ma.masked_array.reshape(*s, **kwargs)",
 "numpy.ma.masked_array.resize": "ma.masked_array.resize(newshape, refcheck=True, order=False)",
 "numpy.ma.masked_array.round": "ma.masked_array.round(decimals=0, out=None)",
 "numpy.ma.masked_array.searchsorted": "ma.masked_array.searchsorted(v, side='left', sorter=None)",
 "numpy.ma.masked_array.setfield": "ma.masked_array.setfield(val, dtype, offset=0)",
 "numpy.ma.masked_array.setflags": "ma.masked_array.setflags(write=None, align=None, uic=None)",
 "numpy.ma.masked_array.set_fill_value": "ma.masked_array.set_fill_value(value=None)",
 "numpy.ma.masked_array.shape": "property ma.masked_array.shape",
 "numpy.ma.masked_array.sharedmask": "property ma.masked_array.sharedmask",
 "numpy.ma.masked_array.shrink_mask": "ma.masked_array.shrink_mask()",
 "numpy.ma.masked_array.size": "ma.masked_array.size",
 "numpy.ma.masked_array.soften_mask": "ma.masked_array.soften_mask()",
 "numpy.ma.masked_array.sort": "ma.masked_array.sort(axis=-1, kind=None, order=None, endwith=True, fill_value=None)",
 "numpy.ma.masked_array.squeeze": "ma.masked_array.squeeze(axis=None)",
 "numpy.ma.masked_array.std": "ma.masked_array.std(axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)",
 "numpy.ma.masked_array.strides": "ma.masked_array.strides",
 "numpy.ma.masked_array.sum": "ma.masked_array.sum(axis=None, dtype=None, out=None, keepdims=<no value>)",
 "numpy.ma.masked_array.swapaxes": "ma.masked_array.swapaxes(axis1, axis2)",
 "numpy.ma.masked_array.take": "ma.masked_array.take(indices, axis=None, out=None, mode='raise')",
 "numpy.ma.masked_array.tobytes": "ma.masked_array.tobytes(fill_value=None, order='C')",
 "numpy.ma.masked_array.tofile": "ma.masked_array.tofile(fid, sep='', format='%s')",
 "numpy.ma.masked_array.toflex": "ma.masked_array.toflex()",
 "numpy.ma.masked_array.tolist": "ma.masked_array.tolist(fill_value=None)",
 "numpy.ma.masked_array.torecords": "ma.masked_array.torecords()",
 "numpy.ma.masked_array.tostring": "ma.masked_array.tostring(fill_value=None, order='C')",
 "numpy.ma.masked_array.trace": "ma.masked_array.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
 "numpy.ma.masked_array.transpose": "ma.masked_array.transpose(*axes)",
 "numpy.ma.masked_array.unshare_mask": "ma.masked_array.unshare_mask()",
 "numpy.ma.masked_array.var": "ma.masked_array.var(axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)",
 "numpy.ma.masked_array.view": "ma.masked_array.view(dtype=None, type=None, fill_value=None)",
 "numpy.ma.masked_equal": "ma.masked_equal(x, value, copy=True)",
 "numpy.ma.masked_greater": "ma.masked_greater(x, value, copy=True)",
 "numpy.ma.masked_greater_equal": "ma.masked_greater_equal(x, value, copy=True)",
 "numpy.ma.masked_inside": "ma.masked_inside(x, v1, v2, copy=True)",
 "numpy.ma.masked_invalid": "ma.masked_invalid(a, copy=True)",
 "numpy.ma.masked_less": "ma.masked_less(x, value, copy=True)",
 "numpy.ma.masked_less_equal": "ma.masked_less_equal(x, value, copy=True)",
 "numpy.ma.masked_not_equal": "ma.masked_not_equal(x, value, copy=True)",
 "numpy.ma.masked_object": "ma.masked_object(x, value, copy=True, shrink=True)",
 "numpy.ma.masked_outside": "ma.masked_outside(x, v1, v2, copy=True)",
 "numpy.ma.masked_values": "ma.masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True)",
 "numpy.ma.masked_where": "ma.masked_where(condition, a, copy=True)",
 "numpy.ma.mask_cols": "ma.mask_cols(a, axis=<no value>)",
 "numpy.ma.mask_or": "ma.mask_or(m1, m2, copy=False, shrink=True)",
 "numpy.ma.mask_rowcols": "ma.mask_rowcols(a, axis=None)",
 "numpy.ma.mask_rows": "ma.mask_rows(a, axis=<no value>)",
 "numpy.ma.max": "ma.max(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)",
 "numpy.ma.maximum_fill_value": "ma.maximum_fill_value(obj)",
 "numpy.ma.mean": "ma.mean(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>",
 "numpy.ma.median": "ma.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)",
 "numpy.ma.min": "ma.min(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)",
 "numpy.ma.minimum_fill_value": "ma.minimum_fill_value(obj)",
 "numpy.ma.ndenumerate": "ma.ndenumerate(a, compressed=True)",
 "numpy.ma.nonzero": "ma.nonzero(self) = <numpy.ma.core._frommethod object>",
 "numpy.ma.notmasked_contiguous": "ma.notmasked_contiguous(a, axis=None)",
 "numpy.ma.notmasked_edges": "ma.notmasked_edges(a, axis=None)",
 "numpy.ma.ones": "ma.ones(shape, dtype=None, order='C') = <numpy.ma.core._convert2ma object>",
 "numpy.ma.ones_like": "ma.ones_like = <numpy.ma.core._convert2ma object>",
 "numpy.ma.outer": "ma.outer(a, b)",
 "numpy.ma.outerproduct": "ma.outerproduct(a, b)",
 "numpy.ma.polyfit": "ma.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)",
 "numpy.ma.power": "ma.power(a, b, third=None)",
 "numpy.ma.prod": "ma.prod(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>",
 "numpy.ma.ptp": "ma.ptp(obj, axis=None, out=None, fill_value=None, keepdims=<no value>)",
 "numpy.ma.ravel": "ma.ravel(self, order='C') = <numpy.ma.core._frommethod object>",
 "numpy.ma.reshape": "ma.reshape(a, new_shape, order='C')",
 "numpy.ma.resize": "ma.resize(x, new_shape)",
 "numpy.ma.round": "ma.round(a, decimals=0, out=None)",
 "numpy.ma.row_stack": "ma.row_stack = <numpy.ma.extras._fromnxfunction_seq object>",
 "numpy.ma.setdiff1d": "ma.setdiff1d(ar1, ar2, assume_unique=False)",
 "numpy.ma.setxor1d": "ma.setxor1d(ar1, ar2, assume_unique=False)",
 "numpy.ma.set_fill_value": "ma.set_fill_value(a, fill_value)",
 "numpy.ma.shape": "ma.shape(obj)",
 "numpy.ma.size": "ma.size(obj, axis=None)",
 "numpy.ma.soften_mask": "ma.soften_mask(self) = <numpy.ma.core._frommethod object>",
 "numpy.ma.sort": "ma.sort(a, axis=-1, kind=None, order=None, endwith=True, fill_value=None)",
 "numpy.ma.squeeze": "ma.squeeze = <numpy.ma.core._convert2ma object>",
 "numpy.ma.stack": "ma.stack = <numpy.ma.extras._fromnxfunction_seq object>",
 "numpy.ma.std": "ma.std(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) = <numpy.ma.core._frommethod object>",
 "numpy.ma.sum": "ma.sum(self, axis=None, dtype=None, out=None, keepdims=<no value>) = <numpy.ma.core._frommethod object>",
 "numpy.ma.swapaxes": "ma.swapaxes(self, *args, **params) a.swapaxes(axis1, axis2) = <numpy.ma.core._frommethod object>",
 "numpy.ma.trace": "ma.trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None) a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None) = <numpy.ma.core._frommethod object>",
 "numpy.ma.transpose": "ma.transpose(a, axes=None)",
 "numpy.ma.union1d": "ma.union1d(ar1, ar2)",
 "numpy.ma.unique": "ma.unique(ar1, return_index=False, return_inverse=False)",
 "numpy.ma.vander": "ma.vander(x, n=None)",
 "numpy.ma.var": "ma.var(self, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>) = <numpy.ma.core._frommethod object>",
 "numpy.ma.vstack": "ma.vstack = <numpy.ma.extras._fromnxfunction_seq object>",
 "numpy.ma.where": "ma.where(condition, x=<no value>, y=<no value>)",
 "numpy.ma.zeros": "ma.zeros(shape, dtype=float, order='C', *, like=None) = <numpy.ma.core._convert2ma object>",
 "numpy.ma.zeros_like": "ma.zeros_like = <numpy.ma.core._convert2ma object>",
 "numpy.mask_indices": "numpy.mask_indices(n, mask_func, k=0)",
 "numpy.mat": "numpy.mat(data, dtype=None)",
 "numpy.matlib.empty": "matlib.empty(shape, dtype=None, order='C')",
 "numpy.matlib.eye": "matlib.eye(n, M=None, k=0, dtype=<class 'float'>, order='C')",
 "numpy.matlib.identity": "matlib.identity(n, dtype=None)",
 "numpy.matlib.ones": "matlib.ones(shape, dtype=None, order='C')",
 "numpy.matlib.rand": "matlib.rand(*args)",
 "numpy.matlib.randn": "matlib.randn(*args)",
 "numpy.matlib.repmat": "matlib.repmat(a, m, n)",
 "numpy.matlib.zeros": "matlib.zeros(shape, dtype=None, order='C')",
 "numpy.matmul": "numpy.matmul(x1, x2, /, out=None, *, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj, axes, axis]) = <ufunc 'matmul'>",
 "numpy.matrix.all": "matrix.all(axis=None, out=None)",
 "numpy.matrix.any": "matrix.any(axis=None, out=None)",
 "numpy.matrix.argmax": "matrix.argmax(axis=None, out=None)",
 "numpy.matrix.argmin": "matrix.argmin(axis=None, out=None)",
 "numpy.matrix.argpartition": "matrix.argpartition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.matrix.argsort": "matrix.argsort(axis=-1, kind=None, order=None)",
 "numpy.matrix.astype": "matrix.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
 "numpy.matrix.base": "matrix.base",
 "numpy.matrix.byteswap": "matrix.byteswap(inplace=False)",
 "numpy.matrix.choose": "matrix.choose(choices, out=None, mode='raise')",
 "numpy.matrix.clip": "matrix.clip(min=None, max=None, out=None, **kwargs)",
 "numpy.matrix.compress": "matrix.compress(condition, axis=None, out=None)",
 "numpy.matrix.conj": "matrix.conj()",
 "numpy.matrix.conjugate": "matrix.conjugate()",
 "numpy.matrix.copy": "matrix.copy(order='C')",
 "numpy.matrix.ctypes": "matrix.ctypes",
 "numpy.matrix.cumprod": "matrix.cumprod(axis=None, dtype=None, out=None)",
 "numpy.matrix.cumsum": "matrix.cumsum(axis=None, dtype=None, out=None)",
 "numpy.matrix.data": "matrix.data",
 "numpy.matrix.diagonal": "matrix.diagonal(offset=0, axis1=0, axis2=1)",
 "numpy.matrix.dot": "matrix.dot()",
 "numpy.matrix.dtype": "matrix.dtype",
 "numpy.matrix.dump": "matrix.dump(file)",
 "numpy.matrix.dumps": "matrix.dumps()",
 "numpy.matrix.fill": "matrix.fill(value)",
 "numpy.matrix.flags": "matrix.flags",
 "numpy.matrix.flat": "matrix.flat",
 "numpy.matrix.flatten": "matrix.flatten(order='C')",
 "numpy.matrix.getfield": "matrix.getfield(dtype, offset=0)",
 "numpy.matrix": "class numpy.matrix(data, dtype=None, copy=True)",
 "numpy.matrix.imag": "matrix.imag",
 "numpy.matrix.item": "matrix.item(*args)",
 "numpy.matrix.itemset": "matrix.itemset(*args)",
 "numpy.matrix.itemsize": "matrix.itemsize",
 "numpy.matrix.max": "matrix.max(axis=None, out=None)",
 "numpy.matrix.mean": "matrix.mean(axis=None, dtype=None, out=None)",
 "numpy.matrix.min": "matrix.min(axis=None, out=None)",
 "numpy.matrix.nbytes": "matrix.nbytes",
 "numpy.matrix.ndim": "matrix.ndim",
 "numpy.matrix.newbyteorder": "matrix.newbyteorder(new_order='S', /)",
 "numpy.matrix.nonzero": "matrix.nonzero()",
 "numpy.matrix.partition": "matrix.partition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.matrix.prod": "matrix.prod(axis=None, dtype=None, out=None)",
 "numpy.matrix.ptp": "matrix.ptp(axis=None, out=None)",
 "numpy.matrix.put": "matrix.put(indices, values, mode='raise')",
 "numpy.matrix.ravel": "matrix.ravel(order='C')",
 "numpy.matrix.real": "matrix.real",
 "numpy.matrix.repeat": "matrix.repeat(repeats, axis=None)",
 "numpy.matrix.reshape": "matrix.reshape(shape, order='C')",
 "numpy.matrix.resize": "matrix.resize(new_shape, refcheck=True)",
 "numpy.matrix.round": "matrix.round(decimals=0, out=None)",
 "numpy.matrix.searchsorted": "matrix.searchsorted(v, side='left', sorter=None)",
 "numpy.matrix.setfield": "matrix.setfield(val, dtype, offset=0)",
 "numpy.matrix.setflags": "matrix.setflags(write=None, align=None, uic=None)",
 "numpy.matrix.shape": "matrix.shape",
 "numpy.matrix.size": "matrix.size",
 "numpy.matrix.sort": "matrix.sort(axis=-1, kind=None, order=None)",
 "numpy.matrix.squeeze": "matrix.squeeze(axis=None)",
 "numpy.matrix.std": "matrix.std(axis=None, dtype=None, out=None, ddof=0)",
 "numpy.matrix.strides": "matrix.strides",
 "numpy.matrix.sum": "matrix.sum(axis=None, dtype=None, out=None)",
 "numpy.matrix.swapaxes": "matrix.swapaxes(axis1, axis2)",
 "numpy.matrix.take": "matrix.take(indices, axis=None, out=None, mode='raise')",
 "numpy.matrix.tobytes": "matrix.tobytes(order='C')",
 "numpy.matrix.tofile": "matrix.tofile(fid, sep='', format='%s')",
 "numpy.matrix.tolist": "matrix.tolist()",
 "numpy.matrix.tostring": "matrix.tostring(order='C')",
 "numpy.matrix.trace": "matrix.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
 "numpy.matrix.transpose": "matrix.transpose(*axes)",
 "numpy.matrix.var": "matrix.var(axis=None, dtype=None, out=None, ddof=0)",
 "numpy.matrix.view": "matrix.view([dtype][, type])",
 "numpy.max": "numpy.max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.maximum": "numpy.maximum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'maximum'>",
 "numpy.maximum_sctype": "numpy.maximum_sctype(t)",
 "numpy.may_share_memory": "numpy.may_share_memory(a, b, /, max_work=None)",
 "numpy.mean": "numpy.mean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>)",
 "numpy.median": "numpy.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)",
 "numpy.memmap.all": "memmap.all(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.memmap.any": "memmap.any(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.memmap.argmax": "memmap.argmax(axis=None, out=None, *, keepdims=False)",
 "numpy.memmap.argmin": "memmap.argmin(axis=None, out=None, *, keepdims=False)",
 "numpy.memmap.argpartition": "memmap.argpartition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.memmap.argsort": "memmap.argsort(axis=-1, kind=None, order=None)",
 "numpy.memmap.astype": "memmap.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
 "numpy.memmap.base": "memmap.base",
 "numpy.memmap.byteswap": "memmap.byteswap(inplace=False)",
 "numpy.memmap.choose": "memmap.choose(choices, out=None, mode='raise')",
 "numpy.memmap.clip": "memmap.clip(min=None, max=None, out=None, **kwargs)",
 "numpy.memmap.compress": "memmap.compress(condition, axis=None, out=None)",
 "numpy.memmap.conj": "memmap.conj()",
 "numpy.memmap.conjugate": "memmap.conjugate()",
 "numpy.memmap.copy": "memmap.copy(order='C')",
 "numpy.memmap.ctypes": "memmap.ctypes",
 "numpy.memmap.cumprod": "memmap.cumprod(axis=None, dtype=None, out=None)",
 "numpy.memmap.cumsum": "memmap.cumsum(axis=None, dtype=None, out=None)",
 "numpy.memmap.data": "memmap.data",
 "numpy.memmap.diagonal": "memmap.diagonal(offset=0, axis1=0, axis2=1)",
 "numpy.memmap.dot": "memmap.dot()",
 "numpy.memmap.dtype": "memmap.dtype",
 "numpy.memmap.dump": "memmap.dump(file)",
 "numpy.memmap.dumps": "memmap.dumps()",
 "numpy.memmap.fill": "memmap.fill(value)",
 "numpy.memmap.flags": "memmap.flags",
 "numpy.memmap.flat": "memmap.flat",
 "numpy.memmap.flatten": "memmap.flatten(order='C')",
 "numpy.memmap.flush": "memmap.flush()",
 "numpy.memmap.getfield": "memmap.getfield(dtype, offset=0)",
 "numpy.memmap": "class numpy.memmap(filename, dtype=<class 'numpy.ubyte'>, mode='r+', offset=0, shape=None, order='C')",
 "numpy.memmap.imag": "memmap.imag",
 "numpy.memmap.item": "memmap.item(*args)",
 "numpy.memmap.itemset": "memmap.itemset(*args)",
 "numpy.memmap.itemsize": "memmap.itemsize",
 "numpy.memmap.max": "memmap.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.memmap.mean": "memmap.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
 "numpy.memmap.min": "memmap.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.memmap.nbytes": "memmap.nbytes",
 "numpy.memmap.ndim": "memmap.ndim",
 "numpy.memmap.newbyteorder": "memmap.newbyteorder(new_order='S', /)",
 "numpy.memmap.nonzero": "memmap.nonzero()",
 "numpy.memmap.partition": "memmap.partition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.memmap.prod": "memmap.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
 "numpy.memmap.ptp": "memmap.ptp(axis=None, out=None, keepdims=False)",
 "numpy.memmap.put": "memmap.put(indices, values, mode='raise')",
 "numpy.memmap.ravel": "memmap.ravel([order])",
 "numpy.memmap.real": "memmap.real",
 "numpy.memmap.repeat": "memmap.repeat(repeats, axis=None)",
 "numpy.memmap.reshape": "memmap.reshape(shape, order='C')",
 "numpy.memmap.resize": "memmap.resize(new_shape, refcheck=True)",
 "numpy.memmap.round": "memmap.round(decimals=0, out=None)",
 "numpy.memmap.searchsorted": "memmap.searchsorted(v, side='left', sorter=None)",
 "numpy.memmap.setfield": "memmap.setfield(val, dtype, offset=0)",
 "numpy.memmap.setflags": "memmap.setflags(write=None, align=None, uic=None)",
 "numpy.memmap.shape": "memmap.shape",
 "numpy.memmap.size": "memmap.size",
 "numpy.memmap.sort": "memmap.sort(axis=-1, kind=None, order=None)",
 "numpy.memmap.squeeze": "memmap.squeeze(axis=None)",
 "numpy.memmap.std": "memmap.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.memmap.strides": "memmap.strides",
 "numpy.memmap.sum": "memmap.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
 "numpy.memmap.swapaxes": "memmap.swapaxes(axis1, axis2)",
 "numpy.memmap.take": "memmap.take(indices, axis=None, out=None, mode='raise')",
 "numpy.memmap.tobytes": "memmap.tobytes(order='C')",
 "numpy.memmap.tofile": "memmap.tofile(fid, sep='', format='%s')",
 "numpy.memmap.tolist": "memmap.tolist()",
 "numpy.memmap.tostring": "memmap.tostring(order='C')",
 "numpy.memmap.trace": "memmap.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
 "numpy.memmap.transpose": "memmap.transpose(*axes)",
 "numpy.memmap.var": "memmap.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.memmap.view": "memmap.view([dtype][, type])",
 "numpy.meshgrid": "numpy.meshgrid(*xi, copy=True, sparse=False, indexing='xy')",
 "numpy.mgrid": "numpy.mgrid = <numpy.lib.index_tricks.MGridClass object>",
 "numpy.min": "numpy.min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.minimum": "numpy.minimum(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'minimum'>",
 "numpy.mintypecode": "numpy.mintypecode(typechars, typeset='GDFgdf', default='d')",
 "numpy.min_scalar_type": "numpy.min_scalar_type(a, /)",
 "numpy.mod": "numpy.mod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'remainder'>",
 "numpy.modf": "numpy.modf(x, [out1, out2, ]/, [out=(None, None), ]*, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'modf'>",
 "numpy.moveaxis": "numpy.moveaxis(a, source, destination)",
 "numpy.multiply": "numpy.multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'multiply'>",
 "numpy.nanargmax": "numpy.nanargmax(a, axis=None, out=None, *, keepdims=<no value>)",
 "numpy.nanargmin": "numpy.nanargmin(a, axis=None, out=None, *, keepdims=<no value>)",
 "numpy.nancumprod": "numpy.nancumprod(a, axis=None, dtype=None, out=None)",
 "numpy.nancumsum": "numpy.nancumsum(a, axis=None, dtype=None, out=None)",
 "numpy.nanmax": "numpy.nanmax(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.nanmean": "numpy.nanmean(a, axis=None, dtype=None, out=None, keepdims=<no value>, *, where=<no value>)",
 "numpy.nanmedian": "numpy.nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<no value>)",
 "numpy.nanmin": "numpy.nanmin(a, axis=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.nanpercentile": "numpy.nanpercentile(a, q, axis=None, out=None, overwrite_input=False, method='linear', keepdims=<no value>, *, interpolation=None)",
 "numpy.nanprod": "numpy.nanprod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.nanquantile": "numpy.nanquantile(a, q, axis=None, out=None, overwrite_input=False, method='linear', keepdims=<no value>, *, interpolation=None)",
 "numpy.nanstd": "numpy.nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)",
 "numpy.nansum": "numpy.nansum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.nanvar": "numpy.nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)",
 "numpy.nan_to_num": "numpy.nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None)",
 "numpy.ndarray.all": "ndarray.all(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.ndarray.any": "ndarray.any(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.ndarray.argmax": "ndarray.argmax(axis=None, out=None, *, keepdims=False)",
 "numpy.ndarray.argmin": "ndarray.argmin(axis=None, out=None, *, keepdims=False)",
 "numpy.ndarray.argpartition": "ndarray.argpartition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.ndarray.argsort": "ndarray.argsort(axis=-1, kind=None, order=None)",
 "numpy.ndarray.astype": "ndarray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
 "numpy.ndarray.base": "ndarray.base",
 "numpy.ndarray.byteswap": "ndarray.byteswap(inplace=False)",
 "numpy.ndarray.choose": "ndarray.choose(choices, out=None, mode='raise')",
 "numpy.ndarray.clip": "ndarray.clip(min=None, max=None, out=None, **kwargs)",
 "numpy.ndarray.compress": "ndarray.compress(condition, axis=None, out=None)",
 "numpy.ndarray.conj": "ndarray.conj()",
 "numpy.ndarray.conjugate": "ndarray.conjugate()",
 "numpy.ndarray.copy": "ndarray.copy(order='C')",
 "numpy.ndarray.ctypes": "ndarray.ctypes",
 "numpy.ndarray.cumprod": "ndarray.cumprod(axis=None, dtype=None, out=None)",
 "numpy.ndarray.cumsum": "ndarray.cumsum(axis=None, dtype=None, out=None)",
 "numpy.ndarray.data": "ndarray.data",
 "numpy.ndarray.diagonal": "ndarray.diagonal(offset=0, axis1=0, axis2=1)",
 "numpy.ndarray.dot": "ndarray.dot()",
 "numpy.ndarray.dtype": "ndarray.dtype",
 "numpy.ndarray.dump": "ndarray.dump(file)",
 "numpy.ndarray.dumps": "ndarray.dumps()",
 "numpy.ndarray.fill": "ndarray.fill(value)",
 "numpy.ndarray.flags": "ndarray.flags",
 "numpy.ndarray.flat": "ndarray.flat",
 "numpy.ndarray.flatten": "ndarray.flatten(order='C')",
 "numpy.ndarray.getfield": "ndarray.getfield(dtype, offset=0)",
 "numpy.ndarray": "class numpy.ndarray(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)",
 "numpy.ndarray.imag": "ndarray.imag",
 "numpy.ndarray.item": "ndarray.item(*args)",
 "numpy.ndarray.itemset": "ndarray.itemset(*args)",
 "numpy.ndarray.itemsize": "ndarray.itemsize",
 "numpy.ndarray.max": "ndarray.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.ndarray.mean": "ndarray.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
 "numpy.ndarray.min": "ndarray.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.ndarray.nbytes": "ndarray.nbytes",
 "numpy.ndarray.ndim": "ndarray.ndim",
 "numpy.ndarray.newbyteorder": "ndarray.newbyteorder(new_order='S', /)",
 "numpy.ndarray.nonzero": "ndarray.nonzero()",
 "numpy.ndarray.partition": "ndarray.partition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.ndarray.prod": "ndarray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
 "numpy.ndarray.ptp": "ndarray.ptp(axis=None, out=None, keepdims=False)",
 "numpy.ndarray.put": "ndarray.put(indices, values, mode='raise')",
 "numpy.ndarray.ravel": "ndarray.ravel([order])",
 "numpy.ndarray.real": "ndarray.real",
 "numpy.ndarray.repeat": "ndarray.repeat(repeats, axis=None)",
 "numpy.ndarray.reshape": "ndarray.reshape(shape, order='C')",
 "numpy.ndarray.resize": "ndarray.resize(new_shape, refcheck=True)",
 "numpy.ndarray.round": "ndarray.round(decimals=0, out=None)",
 "numpy.ndarray.searchsorted": "ndarray.searchsorted(v, side='left', sorter=None)",
 "numpy.ndarray.setfield": "ndarray.setfield(val, dtype, offset=0)",
 "numpy.ndarray.setflags": "ndarray.setflags(write=None, align=None, uic=None)",
 "numpy.ndarray.shape": "ndarray.shape",
 "numpy.ndarray.size": "ndarray.size",
 "numpy.ndarray.sort": "ndarray.sort(axis=-1, kind=None, order=None)",
 "numpy.ndarray.squeeze": "ndarray.squeeze(axis=None)",
 "numpy.ndarray.std": "ndarray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.ndarray.strides": "ndarray.strides",
 "numpy.ndarray.sum": "ndarray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
 "numpy.ndarray.swapaxes": "ndarray.swapaxes(axis1, axis2)",
 "numpy.ndarray.take": "ndarray.take(indices, axis=None, out=None, mode='raise')",
 "numpy.ndarray.tobytes": "ndarray.tobytes(order='C')",
 "numpy.ndarray.tofile": "ndarray.tofile(fid, sep='', format='%s')",
 "numpy.ndarray.tolist": "ndarray.tolist()",
 "numpy.ndarray.tostring": "ndarray.tostring(order='C')",
 "numpy.ndarray.trace": "ndarray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
 "numpy.ndarray.transpose": "ndarray.transpose(*axes)",
 "numpy.ndarray.var": "ndarray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.ndarray.view": "ndarray.view([dtype][, type])",
 "numpy.ndenumerate": "class numpy.ndenumerate(arr)",
 "numpy.ndindex": "class numpy.ndindex(*shape)",
 "numpy.ndindex.ndincr": "ndindex.ndincr()",
 "numpy.nditer.close": "nditer.close()",
 "numpy.nditer.copy": "nditer.copy()",
 "numpy.nditer.debug_print": "nditer.debug_print()",
 "numpy.nditer.dtypes": "nditer.dtypes",
 "numpy.nditer.enable_external_loop": "nditer.enable_external_loop()",
 "numpy.nditer.finished": "nditer.finished",
 "numpy.nditer.has_delayed_bufalloc": "nditer.has_delayed_bufalloc",
 "numpy.nditer.has_index": "nditer.has_index",
 "numpy.nditer.has_multi_index": "nditer.has_multi_index",
 "numpy.nditer": "class numpy.nditer(op, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', op_axes=None, itershape=None, buffersize=0)",
 "numpy.nditer.index": "nditer.index",
 "numpy.nditer.iterationneedsapi": "nditer.iterationneedsapi",
 "numpy.nditer.iterindex": "nditer.iterindex",
 "numpy.nditer.iternext": "nditer.iternext()",
 "numpy.nditer.iterrange": "nditer.iterrange",
 "numpy.nditer.itersize": "nditer.itersize",
 "numpy.nditer.itviews": "nditer.itviews",
 "numpy.nditer.multi_index": "nditer.multi_index",
 "numpy.nditer.ndim": "nditer.ndim",
 "numpy.nditer.nop": "nditer.nop",
 "numpy.nditer.operands": "nditer.operands",
 "numpy.nditer.remove_axis": "nditer.remove_axis(i, /)",
 "numpy.nditer.remove_multi_index": "nditer.remove_multi_index()",
 "numpy.nditer.reset": "nditer.reset()",
 "numpy.nditer.shape": "nditer.shape",
 "numpy.nditer.value": "nditer.value",
 "numpy.negative": "numpy.negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'negative'>",
 "numpy.nested_iters": "numpy.nested_iters(op, axes, flags=None, op_flags=None, op_dtypes=None, order='K', casting='safe', buffersize=0)",
 "numpy.nextafter": "numpy.nextafter(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'nextafter'>",
 "numpy.nonzero": "numpy.nonzero(a)",
 "numpy.not_equal": "numpy.not_equal(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'not_equal'>",
 "numpy.obj2sctype": "numpy.obj2sctype(rep, default=None)",
 "numpy.ogrid": "numpy.ogrid = <numpy.lib.index_tricks.OGridClass object>",
 "numpy.ones": "numpy.ones(shape, dtype=None, order='C', *, like=None)",
 "numpy.ones_like": "numpy.ones_like(a, dtype=None, order='K', subok=True, shape=None)",
 "numpy.outer": "numpy.outer(a, b, out=None)",
 "numpy.packbits": "numpy.packbits(a, /, axis=None, bitorder='big')",
 "numpy.pad": "numpy.pad(array, pad_width, mode='constant', **kwargs)",
 "numpy.partition": "numpy.partition(a, kth, axis=-1, kind='introselect', order=None)",
 "numpy.percentile": "numpy.percentile(a, q, axis=None, out=None, overwrite_input=False, method='linear', keepdims=False, *, interpolation=None)",
 "numpy.piecewise": "numpy.piecewise(x, condlist, funclist, *args, **kw)",
 "numpy.place": "numpy.place(arr, mask, vals)",
 "numpy.poly": "numpy.poly(seq_of_zeros)",
 "numpy.poly1d.c": "property poly1d.c",
 "numpy.poly1d.coef": "property poly1d.coef",
 "numpy.poly1d.coefficients": "property poly1d.coefficients",
 "numpy.poly1d.coeffs": "property poly1d.coeffs",
 "numpy.poly1d.deriv": "poly1d.deriv(m=1)",
 "numpy.poly1d": "class numpy.poly1d(c_or_r, r=False, variable=None)",
 "numpy.poly1d.integ": "poly1d.integ(m=1, k=0)",
 "numpy.poly1d.o": "property poly1d.o",
 "numpy.poly1d.order": "property poly1d.order",
 "numpy.poly1d.r": "property poly1d.r",
 "numpy.poly1d.roots": "property poly1d.roots",
 "numpy.poly1d.variable": "property poly1d.variable",
 "numpy.polyadd": "numpy.polyadd(a1, a2)",
 "numpy.polyder": "numpy.polyder(p, m=1)",
 "numpy.polydiv": "numpy.polydiv(u, v)",
 "numpy.polyfit": "numpy.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)",
 "numpy.polyint": "numpy.polyint(p, m=1, k=None)",
 "numpy.polymul": "numpy.polymul(a1, a2)",
 "numpy.polynomial.chebyshev.cheb2poly": "polynomial.chebyshev.cheb2poly(c)",
 "numpy.polynomial.chebyshev.chebadd": "polynomial.chebyshev.chebadd(c1, c2)",
 "numpy.polynomial.chebyshev.chebcompanion": "polynomial.chebyshev.chebcompanion(c)",
 "numpy.polynomial.chebyshev.chebder": "polynomial.chebyshev.chebder(c, m=1, scl=1, axis=0)",
 "numpy.polynomial.chebyshev.chebdiv": "polynomial.chebyshev.chebdiv(c1, c2)",
 "numpy.polynomial.chebyshev.chebdomain": "polynomial.chebyshev.chebdomain = array([-1,\u00a0 1])",
 "numpy.polynomial.chebyshev.chebfit": "polynomial.chebyshev.chebfit(x, y, deg, rcond=None, full=False, w=None)",
 "numpy.polynomial.chebyshev.chebfromroots": "polynomial.chebyshev.chebfromroots(roots)",
 "numpy.polynomial.chebyshev.chebgauss": "polynomial.chebyshev.chebgauss(deg)",
 "numpy.polynomial.chebyshev.chebgrid2d": "polynomial.chebyshev.chebgrid2d(x, y, c)",
 "numpy.polynomial.chebyshev.chebgrid3d": "polynomial.chebyshev.chebgrid3d(x, y, z, c)",
 "numpy.polynomial.chebyshev.chebint": "polynomial.chebyshev.chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0)",
 "numpy.polynomial.chebyshev.chebinterpolate": "polynomial.chebyshev.chebinterpolate(func, deg, args=())",
 "numpy.polynomial.chebyshev.chebline": "polynomial.chebyshev.chebline(off, scl)",
 "numpy.polynomial.chebyshev.chebmul": "polynomial.chebyshev.chebmul(c1, c2)",
 "numpy.polynomial.chebyshev.chebmulx": "polynomial.chebyshev.chebmulx(c)",
 "numpy.polynomial.chebyshev.chebone": "polynomial.chebyshev.chebone = array([1])",
 "numpy.polynomial.chebyshev.chebpow": "polynomial.chebyshev.chebpow(c, pow, maxpower=16)",
 "numpy.polynomial.chebyshev.chebpts1": "polynomial.chebyshev.chebpts1(npts)",
 "numpy.polynomial.chebyshev.chebpts2": "polynomial.chebyshev.chebpts2(npts)",
 "numpy.polynomial.chebyshev.chebroots": "polynomial.chebyshev.chebroots(c)",
 "numpy.polynomial.chebyshev.chebsub": "polynomial.chebyshev.chebsub(c1, c2)",
 "numpy.polynomial.chebyshev.chebtrim": "polynomial.chebyshev.chebtrim(c, tol=0)",
 "numpy.polynomial.chebyshev.chebval": "polynomial.chebyshev.chebval(x, c, tensor=True)",
 "numpy.polynomial.chebyshev.chebval2d": "polynomial.chebyshev.chebval2d(x, y, c)",
 "numpy.polynomial.chebyshev.chebval3d": "polynomial.chebyshev.chebval3d(x, y, z, c)",
 "numpy.polynomial.chebyshev.chebvander": "polynomial.chebyshev.chebvander(x, deg)",
 "numpy.polynomial.chebyshev.chebvander2d": "polynomial.chebyshev.chebvander2d(x, y, deg)",
 "numpy.polynomial.chebyshev.chebvander3d": "polynomial.chebyshev.chebvander3d(x, y, z, deg)",
 "numpy.polynomial.chebyshev.chebweight": "polynomial.chebyshev.chebweight(x)",
 "numpy.polynomial.chebyshev.chebx": "polynomial.chebyshev.chebx = array([0, 1])",
 "numpy.polynomial.chebyshev.chebzero": "polynomial.chebyshev.chebzero = array([0])",
 "numpy.polynomial.chebyshev.poly2cheb": "polynomial.chebyshev.poly2cheb(pol)",
 "numpy.polynomial.hermite.herm2poly": "polynomial.hermite.herm2poly(c)",
 "numpy.polynomial.hermite.hermadd": "polynomial.hermite.hermadd(c1, c2)",
 "numpy.polynomial.hermite.hermcompanion": "polynomial.hermite.hermcompanion(c)",
 "numpy.polynomial.hermite.hermder": "polynomial.hermite.hermder(c, m=1, scl=1, axis=0)",
 "numpy.polynomial.hermite.hermdiv": "polynomial.hermite.hermdiv(c1, c2)",
 "numpy.polynomial.hermite.hermdomain": "polynomial.hermite.hermdomain = array([-1,\u00a0 1])",
 "numpy.polynomial.hermite.hermfit": "polynomial.hermite.hermfit(x, y, deg, rcond=None, full=False, w=None)",
 "numpy.polynomial.hermite.hermfromroots": "polynomial.hermite.hermfromroots(roots)",
 "numpy.polynomial.hermite.hermgauss": "polynomial.hermite.hermgauss(deg)",
 "numpy.polynomial.hermite.hermgrid2d": "polynomial.hermite.hermgrid2d(x, y, c)",
 "numpy.polynomial.hermite.hermgrid3d": "polynomial.hermite.hermgrid3d(x, y, z, c)",
 "numpy.polynomial.hermite.hermint": "polynomial.hermite.hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0)",
 "numpy.polynomial.hermite.hermline": "polynomial.hermite.hermline(off, scl)",
 "numpy.polynomial.hermite.hermmul": "polynomial.hermite.hermmul(c1, c2)",
 "numpy.polynomial.hermite.hermmulx": "polynomial.hermite.hermmulx(c)",
 "numpy.polynomial.hermite.hermone": "polynomial.hermite.hermone = array([1])",
 "numpy.polynomial.hermite.hermpow": "polynomial.hermite.hermpow(c, pow, maxpower=16)",
 "numpy.polynomial.hermite.hermroots": "polynomial.hermite.hermroots(c)",
 "numpy.polynomial.hermite.hermsub": "polynomial.hermite.hermsub(c1, c2)",
 "numpy.polynomial.hermite.hermtrim": "polynomial.hermite.hermtrim(c, tol=0)",
 "numpy.polynomial.hermite.hermval": "polynomial.hermite.hermval(x, c, tensor=True)",
 "numpy.polynomial.hermite.hermval2d": "polynomial.hermite.hermval2d(x, y, c)",
 "numpy.polynomial.hermite.hermval3d": "polynomial.hermite.hermval3d(x, y, z, c)",
 "numpy.polynomial.hermite.hermvander": "polynomial.hermite.hermvander(x, deg)",
 "numpy.polynomial.hermite.hermvander2d": "polynomial.hermite.hermvander2d(x, y, deg)",
 "numpy.polynomial.hermite.hermvander3d": "polynomial.hermite.hermvander3d(x, y, z, deg)",
 "numpy.polynomial.hermite.hermweight": "polynomial.hermite.hermweight(x)",
 "numpy.polynomial.hermite.hermx": "polynomial.hermite.hermx = array([0. , 0.5])",
 "numpy.polynomial.hermite.hermzero": "polynomial.hermite.hermzero = array([0])",
 "numpy.polynomial.hermite.poly2herm": "polynomial.hermite.poly2herm(pol)",
 "numpy.polynomial.hermite_e.herme2poly": "polynomial.hermite_e.herme2poly(c)",
 "numpy.polynomial.hermite_e.hermeadd": "polynomial.hermite_e.hermeadd(c1, c2)",
 "numpy.polynomial.hermite_e.hermecompanion": "polynomial.hermite_e.hermecompanion(c)",
 "numpy.polynomial.hermite_e.hermeder": "polynomial.hermite_e.hermeder(c, m=1, scl=1, axis=0)",
 "numpy.polynomial.hermite_e.hermediv": "polynomial.hermite_e.hermediv(c1, c2)",
 "numpy.polynomial.hermite_e.hermedomain": "polynomial.hermite_e.hermedomain = array([-1,\u00a0 1])",
 "numpy.polynomial.hermite_e.hermefit": "polynomial.hermite_e.hermefit(x, y, deg, rcond=None, full=False, w=None)",
 "numpy.polynomial.hermite_e.hermefromroots": "polynomial.hermite_e.hermefromroots(roots)",
 "numpy.polynomial.hermite_e.hermegauss": "polynomial.hermite_e.hermegauss(deg)",
 "numpy.polynomial.hermite_e.hermegrid2d": "polynomial.hermite_e.hermegrid2d(x, y, c)",
 "numpy.polynomial.hermite_e.hermegrid3d": "polynomial.hermite_e.hermegrid3d(x, y, z, c)",
 "numpy.polynomial.hermite_e.hermeint": "polynomial.hermite_e.hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0)",
 "numpy.polynomial.hermite_e.hermeline": "polynomial.hermite_e.hermeline(off, scl)",
 "numpy.polynomial.hermite_e.hermemul": "polynomial.hermite_e.hermemul(c1, c2)",
 "numpy.polynomial.hermite_e.hermemulx": "polynomial.hermite_e.hermemulx(c)",
 "numpy.polynomial.hermite_e.hermeone": "polynomial.hermite_e.hermeone = array([1])",
 "numpy.polynomial.hermite_e.hermepow": "polynomial.hermite_e.hermepow(c, pow, maxpower=16)",
 "numpy.polynomial.hermite_e.hermeroots": "polynomial.hermite_e.hermeroots(c)",
 "numpy.polynomial.hermite_e.hermesub": "polynomial.hermite_e.hermesub(c1, c2)",
 "numpy.polynomial.hermite_e.hermetrim": "polynomial.hermite_e.hermetrim(c, tol=0)",
 "numpy.polynomial.hermite_e.hermeval": "polynomial.hermite_e.hermeval(x, c, tensor=True)",
 "numpy.polynomial.hermite_e.hermeval2d": "polynomial.hermite_e.hermeval2d(x, y, c)",
 "numpy.polynomial.hermite_e.hermeval3d": "polynomial.hermite_e.hermeval3d(x, y, z, c)",
 "numpy.polynomial.hermite_e.hermevander": "polynomial.hermite_e.hermevander(x, deg)",
 "numpy.polynomial.hermite_e.hermevander2d": "polynomial.hermite_e.hermevander2d(x, y, deg)",
 "numpy.polynomial.hermite_e.hermevander3d": "polynomial.hermite_e.hermevander3d(x, y, z, deg)",
 "numpy.polynomial.hermite_e.hermeweight": "polynomial.hermite_e.hermeweight(x)",
 "numpy.polynomial.hermite_e.hermex": "polynomial.hermite_e.hermex = array([0, 1])",
 "numpy.polynomial.hermite_e.hermezero": "polynomial.hermite_e.hermezero = array([0])",
 "numpy.polynomial.hermite_e.poly2herme": "polynomial.hermite_e.poly2herme(pol)",
 "numpy.polynomial.laguerre.lag2poly": "polynomial.laguerre.lag2poly(c)",
 "numpy.polynomial.laguerre.lagadd": "polynomial.laguerre.lagadd(c1, c2)",
 "numpy.polynomial.laguerre.lagcompanion": "polynomial.laguerre.lagcompanion(c)",
 "numpy.polynomial.laguerre.lagder": "polynomial.laguerre.lagder(c, m=1, scl=1, axis=0)",
 "numpy.polynomial.laguerre.lagdiv": "polynomial.laguerre.lagdiv(c1, c2)",
 "numpy.polynomial.laguerre.lagdomain": "polynomial.laguerre.lagdomain = array([0, 1])",
 "numpy.polynomial.laguerre.lagfit": "polynomial.laguerre.lagfit(x, y, deg, rcond=None, full=False, w=None)",
 "numpy.polynomial.laguerre.lagfromroots": "polynomial.laguerre.lagfromroots(roots)",
 "numpy.polynomial.laguerre.laggauss": "polynomial.laguerre.laggauss(deg)",
 "numpy.polynomial.laguerre.laggrid2d": "polynomial.laguerre.laggrid2d(x, y, c)",
 "numpy.polynomial.laguerre.laggrid3d": "polynomial.laguerre.laggrid3d(x, y, z, c)",
 "numpy.polynomial.laguerre.lagint": "polynomial.laguerre.lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0)",
 "numpy.polynomial.laguerre.lagline": "polynomial.laguerre.lagline(off, scl)",
 "numpy.polynomial.laguerre.lagmul": "polynomial.laguerre.lagmul(c1, c2)",
 "numpy.polynomial.laguerre.lagmulx": "polynomial.laguerre.lagmulx(c)",
 "numpy.polynomial.laguerre.lagone": "polynomial.laguerre.lagone = array([1])",
 "numpy.polynomial.laguerre.lagpow": "polynomial.laguerre.lagpow(c, pow, maxpower=16)",
 "numpy.polynomial.laguerre.lagroots": "polynomial.laguerre.lagroots(c)",
 "numpy.polynomial.laguerre.lagsub": "polynomial.laguerre.lagsub(c1, c2)",
 "numpy.polynomial.laguerre.lagtrim": "polynomial.laguerre.lagtrim(c, tol=0)",
 "numpy.polynomial.laguerre.lagval": "polynomial.laguerre.lagval(x, c, tensor=True)",
 "numpy.polynomial.laguerre.lagval2d": "polynomial.laguerre.lagval2d(x, y, c)",
 "numpy.polynomial.laguerre.lagval3d": "polynomial.laguerre.lagval3d(x, y, z, c)",
 "numpy.polynomial.laguerre.lagvander": "polynomial.laguerre.lagvander(x, deg)",
 "numpy.polynomial.laguerre.lagvander2d": "polynomial.laguerre.lagvander2d(x, y, deg)",
 "numpy.polynomial.laguerre.lagvander3d": "polynomial.laguerre.lagvander3d(x, y, z, deg)",
 "numpy.polynomial.laguerre.lagweight": "polynomial.laguerre.lagweight(x)",
 "numpy.polynomial.laguerre.lagx": "polynomial.laguerre.lagx = array([ 1, -1])",
 "numpy.polynomial.laguerre.lagzero": "polynomial.laguerre.lagzero = array([0])",
 "numpy.polynomial.laguerre.poly2lag": "polynomial.laguerre.poly2lag(pol)",
 "numpy.polynomial.legendre.leg2poly": "polynomial.legendre.leg2poly(c)",
 "numpy.polynomial.legendre.legadd": "polynomial.legendre.legadd(c1, c2)",
 "numpy.polynomial.legendre.legcompanion": "polynomial.legendre.legcompanion(c)",
 "numpy.polynomial.legendre.legder": "polynomial.legendre.legder(c, m=1, scl=1, axis=0)",
 "numpy.polynomial.legendre.legdiv": "polynomial.legendre.legdiv(c1, c2)",
 "numpy.polynomial.legendre.legdomain": "polynomial.legendre.legdomain = array([-1,\u00a0 1])",
 "numpy.polynomial.legendre.legfit": "polynomial.legendre.legfit(x, y, deg, rcond=None, full=False, w=None)",
 "numpy.polynomial.legendre.legfromroots": "polynomial.legendre.legfromroots(roots)",
 "numpy.polynomial.legendre.leggauss": "polynomial.legendre.leggauss(deg)",
 "numpy.polynomial.legendre.leggrid2d": "polynomial.legendre.leggrid2d(x, y, c)",
 "numpy.polynomial.legendre.leggrid3d": "polynomial.legendre.leggrid3d(x, y, z, c)",
 "numpy.polynomial.legendre.legint": "polynomial.legendre.legint(c, m=1, k=[], lbnd=0, scl=1, axis=0)",
 "numpy.polynomial.legendre.legline": "polynomial.legendre.legline(off, scl)",
 "numpy.polynomial.legendre.legmul": "polynomial.legendre.legmul(c1, c2)",
 "numpy.polynomial.legendre.legmulx": "polynomial.legendre.legmulx(c)",
 "numpy.polynomial.legendre.legone": "polynomial.legendre.legone = array([1])",
 "numpy.polynomial.legendre.legpow": "polynomial.legendre.legpow(c, pow, maxpower=16)",
 "numpy.polynomial.legendre.legroots": "polynomial.legendre.legroots(c)",
 "numpy.polynomial.legendre.legsub": "polynomial.legendre.legsub(c1, c2)",
 "numpy.polynomial.legendre.legtrim": "polynomial.legendre.legtrim(c, tol=0)",
 "numpy.polynomial.legendre.legval": "polynomial.legendre.legval(x, c, tensor=True)",
 "numpy.polynomial.legendre.legval2d": "polynomial.legendre.legval2d(x, y, c)",
 "numpy.polynomial.legendre.legval3d": "polynomial.legendre.legval3d(x, y, z, c)",
 "numpy.polynomial.legendre.legvander": "polynomial.legendre.legvander(x, deg)",
 "numpy.polynomial.legendre.legvander2d": "polynomial.legendre.legvander2d(x, y, deg)",
 "numpy.polynomial.legendre.legvander3d": "polynomial.legendre.legvander3d(x, y, z, deg)",
 "numpy.polynomial.legendre.legweight": "polynomial.legendre.legweight(x)",
 "numpy.polynomial.legendre.legx": "polynomial.legendre.legx = array([0, 1])",
 "numpy.polynomial.legendre.legzero": "polynomial.legendre.legzero = array([0])",
 "numpy.polynomial.legendre.poly2leg": "polynomial.legendre.poly2leg(pol)",
 "numpy.polynomial.polynomial.polyadd": "polynomial.polynomial.polyadd(c1, c2)",
 "numpy.polynomial.polynomial.polycompanion": "polynomial.polynomial.polycompanion(c)",
 "numpy.polynomial.polynomial.polyder": "polynomial.polynomial.polyder(c, m=1, scl=1, axis=0)",
 "numpy.polynomial.polynomial.polydiv": "polynomial.polynomial.polydiv(c1, c2)",
 "numpy.polynomial.polynomial.polydomain": "polynomial.polynomial.polydomain = array([-1,\u00a0 1])",
 "numpy.polynomial.polynomial.polyfit": "polynomial.polynomial.polyfit(x, y, deg, rcond=None, full=False, w=None)",
 "numpy.polynomial.polynomial.polyfromroots": "polynomial.polynomial.polyfromroots(roots)",
 "numpy.polynomial.polynomial.polygrid2d": "polynomial.polynomial.polygrid2d(x, y, c)",
 "numpy.polynomial.polynomial.polygrid3d": "polynomial.polynomial.polygrid3d(x, y, z, c)",
 "numpy.polynomial.polynomial.polyint": "polynomial.polynomial.polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0)",
 "numpy.polynomial.polynomial.polyline": "polynomial.polynomial.polyline(off, scl)",
 "numpy.polynomial.polynomial.polymul": "polynomial.polynomial.polymul(c1, c2)",
 "numpy.polynomial.polynomial.polymulx": "polynomial.polynomial.polymulx(c)",
 "numpy.polynomial.polynomial.polyone": "polynomial.polynomial.polyone = array([1])",
 "numpy.polynomial.polynomial.polypow": "polynomial.polynomial.polypow(c, pow, maxpower=None)",
 "numpy.polynomial.polynomial.polyroots": "polynomial.polynomial.polyroots(c)",
 "numpy.polynomial.polynomial.polysub": "polynomial.polynomial.polysub(c1, c2)",
 "numpy.polynomial.polynomial.polytrim": "polynomial.polynomial.polytrim(c, tol=0)",
 "numpy.polynomial.polynomial.polyval": "polynomial.polynomial.polyval(x, c, tensor=True)",
 "numpy.polynomial.polynomial.polyval2d": "polynomial.polynomial.polyval2d(x, y, c)",
 "numpy.polynomial.polynomial.polyval3d": "polynomial.polynomial.polyval3d(x, y, z, c)",
 "numpy.polynomial.polynomial.polyvalfromroots": "polynomial.polynomial.polyvalfromroots(x, r, tensor=True)",
 "numpy.polynomial.polynomial.polyvander": "polynomial.polynomial.polyvander(x, deg)",
 "numpy.polynomial.polynomial.polyvander2d": "polynomial.polynomial.polyvander2d(x, y, deg)",
 "numpy.polynomial.polynomial.polyvander3d": "polynomial.polynomial.polyvander3d(x, y, z, deg)",
 "numpy.polynomial.polynomial.polyx": "polynomial.polynomial.polyx = array([0, 1])",
 "numpy.polynomial.polynomial.polyzero": "polynomial.polynomial.polyzero = array([0])",
 "numpy.polynomial.polyutils.as_series": "polynomial.polyutils.as_series(alist, trim=True)",
 "numpy.polynomial.polyutils.getdomain": "polynomial.polyutils.getdomain(x)",
 "numpy.polynomial.polyutils.mapdomain": "polynomial.polyutils.mapdomain(x, old, new)",
 "numpy.polynomial.polyutils.mapparms": "polynomial.polyutils.mapparms(old, new)",
 "numpy.polynomial.polyutils.trimcoef": "polynomial.polyutils.trimcoef(c, tol=0)",
 "numpy.polynomial.polyutils.trimseq": "polynomial.polyutils.trimseq(seq)",
 "numpy.polynomial.set_default_printstyle": "polynomial.set_default_printstyle(style)",
 "numpy.polysub": "numpy.polysub(a1, a2)",
 "numpy.polyval": "numpy.polyval(p, x)",
 "numpy.positive": "numpy.positive(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'positive'>",
 "numpy.power": "numpy.power(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'power'>",
 "numpy.printoptions": "numpy.printoptions(*args, **kwargs)",
 "numpy.prod": "numpy.prod(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.promote_types": "numpy.promote_types(type1, type2)",
 "numpy.ptp": "numpy.ptp(a, axis=None, out=None, keepdims=<no value>)",
 "numpy.put": "numpy.put(a, ind, v, mode='raise')",
 "numpy.putmask": "numpy.putmask(a, mask, values)",
 "numpy.put_along_axis": "numpy.put_along_axis(arr, indices, values, axis)",
 "numpy.quantile": "numpy.quantile(a, q, axis=None, out=None, overwrite_input=False, method='linear', keepdims=False, *, interpolation=None)",
 "numpy.rad2deg": "numpy.rad2deg(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'rad2deg'>",
 "numpy.radians": "numpy.radians(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'radians'>",
 "numpy.random.beta": "random.beta(a, b, size=None)",
 "numpy.random.binomial": "random.binomial(n, p, size=None)",
 "numpy.random.bytes": "random.bytes(length)",
 "numpy.random.chisquare": "random.chisquare(df, size=None)",
 "numpy.random.choice": "random.choice(a, size=None, replace=True, p=None)",
 "numpy.random.dirichlet": "random.dirichlet(alpha, size=None)",
 "numpy.random.exponential": "random.exponential(scale=1.0, size=None)",
 "numpy.random.f": "random.f(dfnum, dfden, size=None)",
 "numpy.random.gamma": "random.gamma(shape, scale=1.0, size=None)",
 "numpy.random.geometric": "random.geometric(p, size=None)",
 "numpy.random.get_state": "random.get_state(legacy=True)",
 "numpy.random.gumbel": "random.gumbel(loc=0.0, scale=1.0, size=None)",
 "numpy.random.hypergeometric": "random.hypergeometric(ngood, nbad, nsample, size=None)",
 "numpy.random.laplace": "random.laplace(loc=0.0, scale=1.0, size=None)",
 "numpy.random.logistic": "random.logistic(loc=0.0, scale=1.0, size=None)",
 "numpy.random.lognormal": "random.lognormal(mean=0.0, sigma=1.0, size=None)",
 "numpy.random.logseries": "random.logseries(p, size=None)",
 "numpy.random.multinomial": "random.multinomial(n, pvals, size=None)",
 "numpy.random.multivariate_normal": "random.multivariate_normal(mean, cov, size=None, check_valid='warn', tol=1e-8)",
 "numpy.random.negative_binomial": "random.negative_binomial(n, p, size=None)",
 "numpy.random.noncentral_chisquare": "random.noncentral_chisquare(df, nonc, size=None)",
 "numpy.random.noncentral_f": "random.noncentral_f(dfnum, dfden, nonc, size=None)",
 "numpy.random.normal": "random.normal(loc=0.0, scale=1.0, size=None)",
 "numpy.random.pareto": "random.pareto(a, size=None)",
 "numpy.random.permutation": "random.permutation(x)",
 "numpy.random.poisson": "random.poisson(lam=1.0, size=None)",
 "numpy.random.power": "random.power(a, size=None)",
 "numpy.random.rand": "random.rand(d0, d1, ..., dn)",
 "numpy.random.randint": "random.randint(low, high=None, size=None, dtype=int)",
 "numpy.random.randn": "random.randn(d0, d1, ..., dn)",
 "numpy.random.random": "random.random(size=None)",
 "numpy.random.random_integers": "random.random_integers(low, high=None, size=None)",
 "numpy.random.random_sample": "random.random_sample(size=None)",
 "numpy.random.ranf": "random.ranf()",
 "numpy.random.rayleigh": "random.rayleigh(scale=1.0, size=None)",
 "numpy.random.sample": "random.sample()",
 "numpy.random.seed": "random.seed(seed=None)",
 "numpy.random.set_state": "random.set_state(state)",
 "numpy.random.shuffle": "random.shuffle(x)",
 "numpy.random.standard_cauchy": "random.standard_cauchy(size=None)",
 "numpy.random.standard_exponential": "random.standard_exponential(size=None)",
 "numpy.random.standard_gamma": "random.standard_gamma(shape, size=None)",
 "numpy.random.standard_normal": "random.standard_normal(size=None)",
 "numpy.random.standard_t": "random.standard_t(df, size=None)",
 "numpy.random.triangular": "random.triangular(left, mode, right, size=None)",
 "numpy.random.uniform": "random.uniform(low=0.0, high=1.0, size=None)",
 "numpy.random.vonmises": "random.vonmises(mu, kappa, size=None)",
 "numpy.random.wald": "random.wald(mean, scale, size=None)",
 "numpy.random.weibull": "random.weibull(a, size=None)",
 "numpy.random.zipf": "random.zipf(a, size=None)",
 "numpy.ravel": "numpy.ravel(a, order='C')",
 "numpy.ravel_multi_index": "numpy.ravel_multi_index(multi_index, dims, mode='raise', order='C')",
 "numpy.real": "numpy.real(val)",
 "numpy.real_if_close": "numpy.real_if_close(a, tol=100)",
 "numpy.recarray.all": "recarray.all(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.recarray.any": "recarray.any(axis=None, out=None, keepdims=False, *, where=True)",
 "numpy.recarray.argmax": "recarray.argmax(axis=None, out=None, *, keepdims=False)",
 "numpy.recarray.argmin": "recarray.argmin(axis=None, out=None, *, keepdims=False)",
 "numpy.recarray.argpartition": "recarray.argpartition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.recarray.argsort": "recarray.argsort(axis=-1, kind=None, order=None)",
 "numpy.recarray.astype": "recarray.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)",
 "numpy.recarray.base": "recarray.base",
 "numpy.recarray.byteswap": "recarray.byteswap(inplace=False)",
 "numpy.recarray.choose": "recarray.choose(choices, out=None, mode='raise')",
 "numpy.recarray.clip": "recarray.clip(min=None, max=None, out=None, **kwargs)",
 "numpy.recarray.compress": "recarray.compress(condition, axis=None, out=None)",
 "numpy.recarray.conj": "recarray.conj()",
 "numpy.recarray.conjugate": "recarray.conjugate()",
 "numpy.recarray.copy": "recarray.copy(order='C')",
 "numpy.recarray.ctypes": "recarray.ctypes",
 "numpy.recarray.cumprod": "recarray.cumprod(axis=None, dtype=None, out=None)",
 "numpy.recarray.cumsum": "recarray.cumsum(axis=None, dtype=None, out=None)",
 "numpy.recarray.data": "recarray.data",
 "numpy.recarray.diagonal": "recarray.diagonal(offset=0, axis1=0, axis2=1)",
 "numpy.recarray.dot": "recarray.dot()",
 "numpy.recarray.dtype": "recarray.dtype",
 "numpy.recarray.dump": "recarray.dump(file)",
 "numpy.recarray.dumps": "recarray.dumps()",
 "numpy.recarray.field": "recarray.field(attr, val=None)",
 "numpy.recarray.fill": "recarray.fill(value)",
 "numpy.recarray.flags": "recarray.flags",
 "numpy.recarray.flat": "recarray.flat",
 "numpy.recarray.flatten": "recarray.flatten(order='C')",
 "numpy.recarray.getfield": "recarray.getfield(dtype, offset=0)",
 "numpy.recarray": "class numpy.recarray(shape, dtype=None, buf=None, offset=0, strides=None, formats=None, names=None, titles=None, byteorder=None, aligned=False, order='C')",
 "numpy.recarray.imag": "recarray.imag",
 "numpy.recarray.item": "recarray.item(*args)",
 "numpy.recarray.itemset": "recarray.itemset(*args)",
 "numpy.recarray.itemsize": "recarray.itemsize",
 "numpy.recarray.max": "recarray.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.recarray.mean": "recarray.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)",
 "numpy.recarray.min": "recarray.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.recarray.nbytes": "recarray.nbytes",
 "numpy.recarray.ndim": "recarray.ndim",
 "numpy.recarray.newbyteorder": "recarray.newbyteorder(new_order='S', /)",
 "numpy.recarray.nonzero": "recarray.nonzero()",
 "numpy.recarray.partition": "recarray.partition(kth, axis=-1, kind='introselect', order=None)",
 "numpy.recarray.prod": "recarray.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)",
 "numpy.recarray.ptp": "recarray.ptp(axis=None, out=None, keepdims=False)",
 "numpy.recarray.put": "recarray.put(indices, values, mode='raise')",
 "numpy.recarray.ravel": "recarray.ravel([order])",
 "numpy.recarray.real": "recarray.real",
 "numpy.recarray.repeat": "recarray.repeat(repeats, axis=None)",
 "numpy.recarray.reshape": "recarray.reshape(shape, order='C')",
 "numpy.recarray.resize": "recarray.resize(new_shape, refcheck=True)",
 "numpy.recarray.round": "recarray.round(decimals=0, out=None)",
 "numpy.recarray.searchsorted": "recarray.searchsorted(v, side='left', sorter=None)",
 "numpy.recarray.setfield": "recarray.setfield(val, dtype, offset=0)",
 "numpy.recarray.setflags": "recarray.setflags(write=None, align=None, uic=None)",
 "numpy.recarray.shape": "recarray.shape",
 "numpy.recarray.size": "recarray.size",
 "numpy.recarray.sort": "recarray.sort(axis=-1, kind=None, order=None)",
 "numpy.recarray.squeeze": "recarray.squeeze(axis=None)",
 "numpy.recarray.std": "recarray.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.recarray.strides": "recarray.strides",
 "numpy.recarray.sum": "recarray.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)",
 "numpy.recarray.swapaxes": "recarray.swapaxes(axis1, axis2)",
 "numpy.recarray.take": "recarray.take(indices, axis=None, out=None, mode='raise')",
 "numpy.recarray.tobytes": "recarray.tobytes(order='C')",
 "numpy.recarray.tofile": "recarray.tofile(fid, sep='', format='%s')",
 "numpy.recarray.tolist": "recarray.tolist()",
 "numpy.recarray.tostring": "recarray.tostring(order='C')",
 "numpy.recarray.trace": "recarray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)",
 "numpy.recarray.transpose": "recarray.transpose(*axes)",
 "numpy.recarray.var": "recarray.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)",
 "numpy.recarray.view": "recarray.view([dtype][, type])",
 "numpy.reciprocal": "numpy.reciprocal(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'reciprocal'>",
 "numpy.record.all": "record.all()",
 "numpy.record.any": "record.any()",
 "numpy.record.argmax": "record.argmax()",
 "numpy.record.argmin": "record.argmin()",
 "numpy.record.argsort": "record.argsort()",
 "numpy.record.astype": "record.astype()",
 "numpy.record.base": "record.base",
 "numpy.record.byteswap": "record.byteswap()",
 "numpy.record.choose": "record.choose()",
 "numpy.record.clip": "record.clip()",
 "numpy.record.compress": "record.compress()",
 "numpy.record.conj": "record.conj()",
 "numpy.record.conjugate": "record.conjugate()",
 "numpy.record.copy": "record.copy()",
 "numpy.record.cumprod": "record.cumprod()",
 "numpy.record.cumsum": "record.cumsum()",
 "numpy.record.data": "record.data",
 "numpy.record.diagonal": "record.diagonal()",
 "numpy.record.dtype": "record.dtype",
 "numpy.record.dump": "record.dump()",
 "numpy.record.dumps": "record.dumps()",
 "numpy.record.fill": "record.fill()",
 "numpy.record.flags": "record.flags",
 "numpy.record.flat": "record.flat",
 "numpy.record.flatten": "record.flatten()",
 "numpy.record.getfield": "record.getfield()",
 "numpy.record": "class numpy.record",
 "numpy.record.imag": "record.imag",
 "numpy.record.item": "record.item()",
 "numpy.record.itemset": "record.itemset()",
 "numpy.record.itemsize": "record.itemsize",
 "numpy.record.max": "record.max()",
 "numpy.record.mean": "record.mean()",
 "numpy.record.min": "record.min()",
 "numpy.record.nbytes": "record.nbytes",
 "numpy.record.ndim": "record.ndim",
 "numpy.record.newbyteorder": "record.newbyteorder(new_order='S', /)",
 "numpy.record.nonzero": "record.nonzero()",
 "numpy.record.pprint": "record.pprint()",
 "numpy.record.prod": "record.prod()",
 "numpy.record.ptp": "record.ptp()",
 "numpy.record.put": "record.put()",
 "numpy.record.ravel": "record.ravel()",
 "numpy.record.real": "record.real",
 "numpy.record.repeat": "record.repeat()",
 "numpy.record.reshape": "record.reshape()",
 "numpy.record.resize": "record.resize()",
 "numpy.record.round": "record.round()",
 "numpy.record.searchsorted": "record.searchsorted()",
 "numpy.record.setfield": "record.setfield()",
 "numpy.record.setflags": "record.setflags()",
 "numpy.record.shape": "record.shape",
 "numpy.record.size": "record.size",
 "numpy.record.sort": "record.sort()",
 "numpy.record.squeeze": "record.squeeze()",
 "numpy.record.std": "record.std()",
 "numpy.record.strides": "record.strides",
 "numpy.record.sum": "record.sum()",
 "numpy.record.swapaxes": "record.swapaxes()",
 "numpy.record.take": "record.take()",
 "numpy.record.tobytes": "record.tobytes()",
 "numpy.record.tofile": "record.tofile()",
 "numpy.record.tolist": "record.tolist()",
 "numpy.record.tostring": "record.tostring()",
 "numpy.record.trace": "record.trace()",
 "numpy.record.transpose": "record.transpose()",
 "numpy.record.var": "record.var()",
 "numpy.record.view": "record.view()",
 "numpy.remainder": "numpy.remainder(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'remainder'>",
 "numpy.repeat": "numpy.repeat(a, repeats, axis=None)",
 "numpy.require": "numpy.require(a, dtype=None, requirements=None, *, like=None)",
 "numpy.reshape": "numpy.reshape(a, newshape, order='C')",
 "numpy.resize": "numpy.resize(a, new_shape)",
 "numpy.result_type": "numpy.result_type(*arrays_and_dtypes)",
 "numpy.right_shift": "numpy.right_shift(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'right_shift'>",
 "numpy.rint": "numpy.rint(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'rint'>",
 "numpy.roll": "numpy.roll(a, shift, axis=None)",
 "numpy.rollaxis": "numpy.rollaxis(a, axis, start=0)",
 "numpy.roots": "numpy.roots(p)",
 "numpy.rot90": "numpy.rot90(m, k=1, axes=(0, 1))",
 "numpy.round": "numpy.round(a, decimals=0, out=None)",
 "numpy.row_stack": "numpy.row_stack(tup, *, dtype=None, casting='same_kind')",
 "numpy.save": "numpy.save(file, arr, allow_pickle=True, fix_imports=True)",
 "numpy.savetxt": "numpy.savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None)",
 "numpy.savez": "numpy.savez(file, *args, **kwds)",
 "numpy.savez_compressed": "numpy.savez_compressed(file, *args, **kwds)",
 "numpy.sctype2char": "numpy.sctype2char(sctype)",
 "numpy.searchsorted": "numpy.searchsorted(a, v, side='left', sorter=None)",
 "numpy.select": "numpy.select(condlist, choicelist, default=0)",
 "numpy.setbufsize": "numpy.setbufsize(size)",
 "numpy.setdiff1d": "numpy.setdiff1d(ar1, ar2, assume_unique=False)",
 "numpy.seterr": "numpy.seterr(all=None, divide=None, over=None, under=None, invalid=None)",
 "numpy.seterrcall": "numpy.seterrcall(func)",
 "numpy.seterrobj": "numpy.seterrobj(errobj, /)",
 "numpy.setxor1d": "numpy.setxor1d(ar1, ar2, assume_unique=False)",
 "numpy.set_printoptions": "numpy.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None)",
 "numpy.set_string_function": "numpy.set_string_function(f, repr=True)",
 "numpy.shape": "numpy.shape(a)",
 "numpy.shares_memory": "numpy.shares_memory(a, b, /, max_work=None)",
 "numpy.show_config": "numpy.show_config(mode='stdout')",
 "numpy.show_runtime": "numpy.show_runtime()",
 "numpy.sign": "numpy.sign(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sign'>",
 "numpy.signbit": "numpy.signbit(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'signbit'>",
 "numpy.sin": "numpy.sin(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sin'>",
 "numpy.sinc": "numpy.sinc(x)",
 "numpy.sinh": "numpy.sinh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sinh'>",
 "numpy.sort": "numpy.sort(a, axis=-1, kind=None, order=None)",
 "numpy.sort_complex": "numpy.sort_complex(a)",
 "numpy.source": "numpy.source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>)",
 "numpy.spacing": "numpy.spacing(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'spacing'>",
 "numpy.split": "numpy.split(ary, indices_or_sections, axis=0)",
 "numpy.sqrt": "numpy.sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'sqrt'>",
 "numpy.square": "numpy.square(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'square'>",
 "numpy.squeeze": "numpy.squeeze(a, axis=None)",
 "numpy.stack": "numpy.stack(arrays, axis=0, out=None, *, dtype=None, casting='same_kind')",
 "numpy.std": "numpy.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)",
 "numpy.subtract": "numpy.subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'subtract'>",
 "numpy.sum": "numpy.sum(a, axis=None, dtype=None, out=None, keepdims=<no value>, initial=<no value>, where=<no value>)",
 "numpy.swapaxes": "numpy.swapaxes(a, axis1, axis2)",
 "numpy.take": "numpy.take(a, indices, axis=None, out=None, mode='raise')",
 "numpy.take_along_axis": "numpy.take_along_axis(arr, indices, axis)",
 "numpy.tan": "numpy.tan(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'tan'>",
 "numpy.tanh": "numpy.tanh(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'tanh'>",
 "numpy.tensordot": "numpy.tensordot(a, b, axes=2)",
 "numpy.testing.assert_allclose": "testing.assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True)",
 "numpy.testing.assert_almost_equal": "testing.assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)",
 "numpy.testing.assert_approx_equal": "testing.assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True)",
 "numpy.testing.assert_array_almost_equal": "testing.assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)",
 "numpy.testing.assert_array_almost_equal_nulp": "testing.assert_array_almost_equal_nulp(x, y, nulp=1)",
 "numpy.testing.assert_array_equal": "testing.assert_array_equal(x, y, err_msg='', verbose=True, *, strict=False)",
 "numpy.testing.assert_array_less": "testing.assert_array_less(x, y, err_msg='', verbose=True)",
 "numpy.testing.assert_array_max_ulp": "testing.assert_array_max_ulp(a, b, maxulp=1, dtype=None)",
 "numpy.testing.assert_equal": "testing.assert_equal(actual, desired, err_msg='', verbose=True)",
 "numpy.testing.assert_no_gc_cycles": "testing.assert_no_gc_cycles(*args, **kwargs)",
 "numpy.testing.assert_no_warnings": "testing.assert_no_warnings(*args, **kwargs)",
 "numpy.testing.assert_raises": "testing.assert_raises(exception_class, callable, *args, **kwargs) assert_raises(exception_class)",
 "numpy.testing.assert_raises_regex": "testing.assert_raises_regex(exception_class, expected_regexp, callable, *args, **kwargs) assert_raises_regex(exception_class, expected_regexp)",
 "numpy.testing.assert_string_equal": "testing.assert_string_equal(actual, desired)",
 "numpy.testing.assert_warns": "testing.assert_warns(warning_class, *args, **kwargs)",
 "numpy.testing.clear_and_catch_warnings.class_modules": "testing.clear_and_catch_warnings.class_modules = ()",
 "numpy.testing.clear_and_catch_warnings": "class numpy.testing.clear_and_catch_warnings(record=False, modules=())",
 "numpy.testing.decorate_methods": "testing.decorate_methods(cls, decorator, testmatch=None)",
 "numpy.testing.measure": "testing.measure(code_str, times=1, label=None)",
 "numpy.testing.overrides.allows_array_function_override": "testing.overrides.allows_array_function_override(func)",
 "numpy.testing.overrides.allows_array_ufunc_override": "testing.overrides.allows_array_ufunc_override(func)",
 "numpy.testing.overrides.get_overridable_numpy_array_functions": "testing.overrides.get_overridable_numpy_array_functions()",
 "numpy.testing.overrides.get_overridable_numpy_ufuncs": "testing.overrides.get_overridable_numpy_ufuncs()",
 "numpy.testing.print_assert_equal": "testing.print_assert_equal(test_string, actual, desired)",
 "numpy.testing.rundocs": "testing.rundocs(filename=None, raise_on_error=True)",
 "numpy.testing.suppress_warnings.filter": "testing.suppress_warnings.filter(category=<class 'Warning'>, message='', module=None)",
 "numpy.testing.suppress_warnings": "class numpy.testing.suppress_warnings(forwarding_rule='always')",
 "numpy.testing.suppress_warnings.record": "testing.suppress_warnings.record(category=<class 'Warning'>, message='', module=None)",
 "numpy.tile": "numpy.tile(A, reps)",
 "numpy.trace": "numpy.trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)",
 "numpy.transpose": "numpy.transpose(a, axes=None)",
 "numpy.trapz": "numpy.trapz(y, x=None, dx=1.0, axis=-1)",
 "numpy.tri": "numpy.tri(N, M=None, k=0, dtype=<class 'float'>, *, like=None)",
 "numpy.tril": "numpy.tril(m, k=0)",
 "numpy.tril_indices": "numpy.tril_indices(n, k=0, m=None)",
 "numpy.tril_indices_from": "numpy.tril_indices_from(arr, k=0)",
 "numpy.trim_zeros": "numpy.trim_zeros(filt, trim='fb')",
 "numpy.triu": "numpy.triu(m, k=0)",
 "numpy.triu_indices": "numpy.triu_indices(n, k=0, m=None)",
 "numpy.triu_indices_from": "numpy.triu_indices_from(arr, k=0)",
 "numpy.true_divide": "numpy.true_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'divide'>",
 "numpy.trunc": "numpy.trunc(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = <ufunc 'trunc'>",
 "numpy.typename": "numpy.typename(char)",
 "numpy.ufunc.accumulate": "ufunc.accumulate(array, axis=0, dtype=None, out=None)",
 "numpy.ufunc.at": "ufunc.at(a, indices, b=None, /)",
 "numpy.ufunc": "class numpy.ufunc",
 "numpy.ufunc.identity": "ufunc.identity",
 "numpy.ufunc.nargs": "ufunc.nargs",
 "numpy.ufunc.nin": "ufunc.nin",
 "numpy.ufunc.nout": "ufunc.nout",
 "numpy.ufunc.ntypes": "ufunc.ntypes",
 "numpy.ufunc.outer": "ufunc.outer(A, B, /, **kwargs)",
 "numpy.ufunc.reduce": "ufunc.reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
 "numpy.ufunc.reduceat": "ufunc.reduceat(array, indices, axis=0, dtype=None, out=None)",
 "numpy.ufunc.resolve_dtypes": "ufunc.resolve_dtypes(dtypes, *, signature=None, casting=None, reduction=False)",
 "numpy.ufunc.signature": "ufunc.signature",
 "numpy.ufunc.types": "ufunc.types",
 "numpy.union1d": "numpy.union1d(ar1, ar2)",
 "numpy.unique": "numpy.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None, *, equal_nan=True)",
 "numpy.unpackbits": "numpy.unpackbits(a, /, axis=None, count=None, bitorder='big')",
 "numpy.unravel_index": "numpy.unravel_index(indices, shape, order='C')",
 "numpy.unwrap": "numpy.unwrap(p, discont=None, axis=-1, *, period=6.283185307179586)",
 "numpy.vander": "numpy.vander(x, N=None, increasing=False)",
 "numpy.var": "numpy.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>, *, where=<no value>)",
 "numpy.vdot": "numpy.vdot(a, b, /)",
 "numpy.vectorize": "class numpy.vectorize(pyfunc=np._NoValue, otypes=None, doc=None, excluded=None, cache=False, signature=None)",
 "numpy.vsplit": "numpy.vsplit(ary, indices_or_sections)",
 "numpy.vstack": "numpy.vstack(tup, *, dtype=None, casting='same_kind')",
 "numpy.where": "numpy.where(condition, [x, y, ]/)",
 "numpy.who": "numpy.who(vardict=None)",
 "numpy.zeros": "numpy.zeros(shape, dtype=float, order='C', *, like=None)",
 "numpy.zeros_like": "numpy.zeros_like(a, dtype=None, order='K', subok=True, shape=None)"
}