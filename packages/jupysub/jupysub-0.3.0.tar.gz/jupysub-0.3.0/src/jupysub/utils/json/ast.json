{
 "ast.ExceptHandler": "class ast.ExceptHandler(type, name, body)",
 "ast.Pass": "class ast.Pass",
 "ast.withitem": "class ast.withitem(context_expr, optional_vars)",
 "ast.FunctionType": "class ast.FunctionType(argtypes, returns)",
 "ast.AST": "class ast.AST",
 "ast.Eq": "class ast.Eq",
 "ast.AugAssign": "class ast.AugAssign(target, op, value)",
 "ast.MatchAs": "class ast.MatchAs(pattern, name)",
 "ast.NamedExpr": "class ast.NamedExpr(target, value)",
 "ast.AsyncFor": "class ast.AsyncFor(target, iter, body, orelse, type_comment)",
 "ast.MatchClass": "class ast.MatchClass(cls, patterns, kwd_attrs, kwd_patterns)",
 "ast.If": "class ast.If(test, body, orelse)",
 "ast.Compare": "class ast.Compare(left, ops, comparators)",
 "ast.iter_child_nodes": "ast.iter_child_nodes(node)",
 "ast.Name": "class ast.Name(id, ctx)",
 "ast.FormattedValue": "class ast.FormattedValue(value, conversion, format_spec)",
 "ast.BoolOp": "class ast.BoolOp(op, values)",
 "ast.Yield": "class ast.Yield(value)",
 "ast.Break": "class ast.Break",
 "ast.ListComp": "class ast.ListComp(elt, generators)",
 "ast.unparse": "ast.unparse(ast_obj)",
 "ast.Set": "class ast.Set(elts)",
 "ast.Import": "class ast.Import(names)",
 "ast.Subscript": "class ast.Subscript(value, slice, ctx)",
 "ast.For": "class ast.For(target, iter, body, orelse, type_comment)",
 "ast.get_docstring": "ast.get_docstring(node, clean=True)",
 "ast.Dict": "class ast.Dict(keys, values)",
 "ast.MatchSequence": "class ast.MatchSequence(patterns)",
 "ast.TryStar": "class ast.TryStar(body, handlers, orelse, finalbody)",
 "ast.NodeTransformer": "class ast.NodeTransformer",
 "ast.JoinedStr": "class ast.JoinedStr(values)",
 "ast.BinOp": "class ast.BinOp(left, op, right)",
 "ast.Add": "class ast.Add",
 "ast.Lambda": "class ast.Lambda(args, body)",
 "ast.get_source_segment": "ast.get_source_segment(source, node, *, padded=False)",
 "ast.Starred": "class ast.Starred(value, ctx)",
 "ast.Assert": "class ast.Assert(test, msg)",
 "ast.alias": "class ast.alias(name, asname)",
 "ast.AsyncFunctionDef": "class ast.AsyncFunctionDef(name, args, body, decorator_list, returns, type_comment)",
 "ast.match_case": "class ast.match_case(pattern, guard, body)",
 "ast.AnnAssign": "class ast.AnnAssign(target, annotation, value, simple)",
 "ast.copy_location": "ast.copy_location(new_node, old_node)",
 "ast.MatchOr": "class ast.MatchOr(patterns)",
 "ast.dump": "ast.dump(node, annotate_fields=True, include_attributes=False, *, indent=None)",
 "ast.UAdd": "class ast.UAdd",
 "ast.Slice": "class ast.Slice(lower, upper, step)",
 "ast.literal_eval": "ast.literal_eval(node_or_string)",
 "ast.walk": "ast.walk(node)",
 "ast.Await": "class ast.Await(value)",
 "ast.Delete": "class ast.Delete(targets)",
 "ast.With": "class ast.With(items, body, type_comment)",
 "ast.IfExp": "class ast.IfExp(test, body, orelse)",
 "ast.Constant": "class ast.Constant(value)",
 "ast.Assign": "class ast.Assign(targets, value, type_comment)",
 "ast.While": "class ast.While(test, body, orelse)",
 "ast.arguments": "class ast.arguments(posonlyargs, args, vararg, kwonlyargs, kw_defaults, kwarg, defaults)",
 "ast.MatchMapping": "class ast.MatchMapping(keys, patterns, rest)",
 "ast.MatchValue": "class ast.MatchValue(value)",
 "ast.Return": "class ast.Return(value)",
 "ast.Expr": "class ast.Expr(value)",
 "ast.And": "class ast.And",
 "ast.Try": "class ast.Try(body, handlers, orelse, finalbody)",
 "ast.Module": "class ast.Module(body, type_ignores)",
 "ast.Call": "class ast.Call(func, args, keywords)",
 "ast.ClassDef": "class ast.ClassDef(name, bases, keywords, body, decorator_list)",
 "ast.MatchStar": "class ast.MatchStar(name)",
 "ast.Match": "class ast.Match(subject, cases)",
 "ast.arg": "class ast.arg(arg, annotation, type_comment)",
 "ast.Global": "class ast.Global(names)",
 "ast.fix_missing_locations": "ast.fix_missing_locations(node)",
 "ast.keyword": "class ast.keyword(arg, value)",
 "ast.comprehension": "class ast.comprehension(target, iter, ifs, is_async)",
 "ast.Raise": "class ast.Raise(exc, cause)",
 "ast.MatchSingleton": "class ast.MatchSingleton(value)",
 "ast.ImportFrom": "class ast.ImportFrom(module, names, level)",
 "ast.Attribute": "class ast.Attribute(value, attr, ctx)",
 "ast.Load": "class ast.Load",
 "ast.List": "class ast.List(elts, ctx)",
 "ast.NodeVisitor": "class ast.NodeVisitor",
 "ast.parse": "ast.parse(source, filename='<unknown>', mode='exec', *, type_comments=False, feature_version=None)",
 "ast.Expression": "class ast.Expression(body)",
 "ast.FunctionDef": "class ast.FunctionDef(name, args, body, decorator_list, returns, type_comment)",
 "ast.UnaryOp": "class ast.UnaryOp(op, operand)",
 "ast.Interactive": "class ast.Interactive(body)",
 "ast.increment_lineno": "ast.increment_lineno(node, n=1)",
 "ast.iter_fields": "ast.iter_fields(node)"
}