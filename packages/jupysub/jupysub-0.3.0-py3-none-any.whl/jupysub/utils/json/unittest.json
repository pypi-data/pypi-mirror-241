{
 "unittest.mock.create_autospec": "unittest.mock.create_autospec(spec, spec_set=False, instance=False, **kwargs)",
 "unittest.TestLoader": "class unittest.TestLoader",
 "unittest.FunctionTestCase": "class unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None, description=None)",
 "unittest.mock.NonCallableMagicMock": "class unittest.mock.NonCallableMagicMock(*args, **kw)",
 "unittest.mock.call": "unittest.mock.call(*args, **kwargs)",
 "unittest.mock.patch.dict": "patch.dict(in_dict, values=(), clear=False, **kwargs)",
 "unittest.mock.patch.multiple": "patch.multiple(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)",
 "unittest.main": "unittest.main(module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=unittest.defaultTestLoader, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None)",
 "unittest.registerResult": "unittest.registerResult(result)",
 "unittest.mock.MagicMock": "class unittest.mock.MagicMock(*args, **kw)",
 "unittest.installHandler": "unittest.installHandler()",
 "unittest.removeResult": "unittest.removeResult(result)",
 "unittest.TextTestRunner": "class unittest.TextTestRunner(stream=None, descriptions=True, verbosity=1, failfast=False, buffer=False, resultclass=None, warnings=None, *, tb_locals=False)",
 "unittest.mock.patch.object": "patch.object(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)",
 "unittest.mock.mock_open": "unittest.mock.mock_open(mock=None, read_data=None)",
 "unittest.expectedFailure": "@unittest.expectedFailure",
 "unittest.addModuleCleanup": "unittest.addModuleCleanup(function, /, *args, **kwargs)",
 "unittest.mock.AsyncMock": "class unittest.mock.AsyncMock(spec=None, side_effect=None, return_value=DEFAULT, wraps=None, name=None, spec_set=None, unsafe=False, **kwargs)",
 "unittest.TestCase": "class unittest.TestCase(methodName='runTest')",
 "unittest.TextTestResult": "class unittest.TextTestResult(stream, descriptions, verbosity)",
 "unittest.TestResult": "class unittest.TestResult",
 "unittest.mock.patch.stopall": "patch.stopall()",
 "unittest.mock.patch": "unittest.mock.patch(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)",
 "unittest.skipUnless": "@unittest.skipUnless(condition, reason)",
 "unittest.doModuleCleanups": "unittest.doModuleCleanups()",
 "unittest.removeHandler": "unittest.removeHandler(function=None)",
 "unittest.mock.seal": "unittest.mock.seal(mock)",
 "unittest.skip": "@unittest.skip(reason)",
 "unittest.mock.PropertyMock": "class unittest.mock.PropertyMock(*args, **kwargs)",
 "unittest.IsolatedAsyncioTestCase": "class unittest.IsolatedAsyncioTestCase(methodName='runTest')",
 "unittest.mock.Mock": "class unittest.mock.Mock(spec=None, side_effect=None, return_value=DEFAULT, wraps=None, name=None, spec_set=None, unsafe=False, **kwargs)",
 "unittest.mock.NonCallableMock": "class unittest.mock.NonCallableMock(spec=None, wraps=None, name=None, spec_set=None, **kwargs)",
 "unittest.skipIf": "@unittest.skipIf(condition, reason)",
 "unittest.TestSuite": "class unittest.TestSuite(tests=())"
}