{
 "logging.info": "logging.info(msg, *args, **kwargs)",
 "logging.error": "logging.error(msg, *args, **kwargs)",
 "logging.disable": "logging.disable(level=CRITICAL)",
 "logging.makeLogRecord": "logging.makeLogRecord(attrdict)",
 "logging.Filter": "class logging.Filter(name='')",
 "logging.handlers.RotatingFileHandler": "class logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False, errors=None)",
 "logging.Logger": "class logging.Logger",
 "logging.handlers.WatchedFileHandler": "class logging.handlers.WatchedFileHandler(filename, mode='a', encoding=None, delay=False, errors=None)",
 "logging.critical": "logging.critical(msg, *args, **kwargs)",
 "logging.handlers.QueueListener": "class logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)",
 "logging.LoggerAdapter": "class logging.LoggerAdapter(logger, extra)",
 "logging.exception": "logging.exception(msg, *args, **kwargs)",
 "logging.warning": "logging.warning(msg, *args, **kwargs)",
 "logging.handlers.BaseRotatingHandler": "class logging.handlers.BaseRotatingHandler(filename, mode, encoding=None, delay=False, errors=None)",
 "logging.Handler": "class logging.Handler",
 "logging.getLogger": "logging.getLogger(name=None)",
 "logging.handlers.SysLogHandler": "class logging.handlers.SysLogHandler(address=('localhost', SYSLOG_UDP_PORT), facility=LOG_USER, socktype=socket.SOCK_DGRAM)",
 "logging.Formatter": "class logging.Formatter(fmt=None, datefmt=None, style='%', validate=True, *, defaults=None)",
 "logging.BufferingFormatter": "class logging.BufferingFormatter(linefmt=None)",
 "logging.handlers.TimedRotatingFileHandler": "class logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None, errors=None)",
 "logging.getLevelNamesMapping": "logging.getLevelNamesMapping()",
 "logging.NullHandler": "class logging.NullHandler",
 "logging.config.fileConfig": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True, encoding=None)",
 "logging.setLoggerClass": "logging.setLoggerClass(klass)",
 "logging.LogRecord": "class logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None)",
 "logging.shutdown": "logging.shutdown()",
 "logging.handlers.DatagramHandler": "class logging.handlers.DatagramHandler(host, port)",
 "logging.addLevelName": "logging.addLevelName(level, levelName)",
 "logging.FileHandler": "class logging.FileHandler(filename, mode='a', encoding=None, delay=False, errors=None)",
 "logging.handlers.HTTPHandler": "class logging.handlers.HTTPHandler(host, url, method='GET', secure=False, credentials=None, context=None)",
 "logging.config.listen": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)",
 "logging.getLogRecordFactory": "logging.getLogRecordFactory()",
 "logging.getLoggerClass": "logging.getLoggerClass()",
 "logging.handlers.SMTPHandler": "class logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None, timeout=1.0)",
 "logging.handlers.SocketHandler": "class logging.handlers.SocketHandler(host, port)",
 "logging.getLevelName": "logging.getLevelName(level)",
 "logging.handlers.QueueHandler": "class logging.handlers.QueueHandler(queue)",
 "logging.config.stopListening": "logging.config.stopListening()",
 "logging.debug": "logging.debug(msg, *args, **kwargs)",
 "logging.handlers.BufferingHandler": "class logging.handlers.BufferingHandler(capacity)",
 "logging.setLogRecordFactory": "logging.setLogRecordFactory(factory)",
 "logging.basicConfig": "logging.basicConfig(**kwargs)",
 "logging.handlers.MemoryHandler": "class logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None, flushOnClose=True)",
 "logging.StreamHandler": "class logging.StreamHandler(stream=None)",
 "logging.handlers.NTEventLogHandler": "class logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')",
 "logging.config.dictConfig": "logging.config.dictConfig(config)",
 "logging.log": "logging.log(level, msg, *args, **kwargs)",
 "logging.captureWarnings": "logging.captureWarnings(capture)"
}