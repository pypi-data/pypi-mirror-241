{
 "urllib.robotparser.RobotFileParser": "class urllib.robotparser.RobotFileParser(url='')",
 "urllib.request.HTTPSHandler": "class urllib.request.HTTPSHandler(debuglevel=0, context=None, check_hostname=None)",
 "urllib.parse.quote_from_bytes": "urllib.parse.quote_from_bytes(bytes, safe='/')",
 "urllib.request.CacheFTPHandler": "class urllib.request.CacheFTPHandler",
 "urllib.parse.unquote_to_bytes": "urllib.parse.unquote_to_bytes(string)",
 "urllib.request.ProxyHandler": "class urllib.request.ProxyHandler(proxies=None)",
 "urllib.request.HTTPPasswordMgr": "class urllib.request.HTTPPasswordMgr",
 "urllib.request.HTTPBasicAuthHandler": "class urllib.request.HTTPBasicAuthHandler(password_mgr=None)",
 "urllib.response.addinfourl": "class urllib.response.addinfourl",
 "urllib.request.ProxyDigestAuthHandler": "class urllib.request.ProxyDigestAuthHandler(password_mgr=None)",
 "urllib.parse.urldefrag": "urllib.parse.urldefrag(url)",
 "urllib.parse.ParseResultBytes": "class urllib.parse.ParseResultBytes(scheme, netloc, path, params, query, fragment)",
 "urllib.parse.DefragResult": "class urllib.parse.DefragResult(url, fragment)",
 "urllib.parse.urlunsplit": "urllib.parse.urlunsplit(parts)",
 "urllib.request.OpenerDirector": "class urllib.request.OpenerDirector",
 "urllib.request.urlretrieve": "urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)",
 "urllib.request.url2pathname": "urllib.request.url2pathname(path)",
 "urllib.parse.ParseResult": "class urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)",
 "urllib.request.Request": "class urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)",
 "urllib.parse.parse_qs": "urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None, separator='&')",
 "urllib.request.FTPHandler": "class urllib.request.FTPHandler",
 "urllib.parse.DefragResultBytes": "class urllib.parse.DefragResultBytes(url, fragment)",
 "urllib.request.FancyURLopener": "class urllib.request.FancyURLopener(...)",
 "urllib.parse.unquote": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')",
 "urllib.request.HTTPErrorProcessor": "class urllib.request.HTTPErrorProcessor",
 "urllib.request.HTTPDefaultErrorHandler": "class urllib.request.HTTPDefaultErrorHandler",
 "urllib.request.HTTPPasswordMgrWithPriorAuth": "class urllib.request.HTTPPasswordMgrWithPriorAuth",
 "urllib.request.HTTPRedirectHandler": "class urllib.request.HTTPRedirectHandler",
 "urllib.request.FileHandler": "class urllib.request.FileHandler",
 "urllib.request.BaseHandler": "class urllib.request.BaseHandler",
 "urllib.request.DataHandler": "class urllib.request.DataHandler",
 "urllib.request.URLopener": "class urllib.request.URLopener(proxies=None, **x509)",
 "urllib.request.HTTPCookieProcessor": "class urllib.request.HTTPCookieProcessor(cookiejar=None)",
 "urllib.request.UnknownHandler": "class urllib.request.UnknownHandler",
 "urllib.parse.urlencode": "urllib.parse.urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=quote_plus)",
 "urllib.parse.SplitResultBytes": "class urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)",
 "urllib.parse.urlsplit": "urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)",
 "urllib.request.install_opener": "urllib.request.install_opener(opener)",
 "urllib.request.HTTPPasswordMgrWithDefaultRealm": "class urllib.request.HTTPPasswordMgrWithDefaultRealm",
 "urllib.parse.unwrap": "urllib.parse.unwrap(url)",
 "urllib.parse.quote": "urllib.parse.quote(string, safe='/', encoding=None, errors=None)",
 "urllib.parse.urljoin": "urllib.parse.urljoin(base, url, allow_fragments=True)",
 "urllib.request.urlopen": "urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)",
 "urllib.request.AbstractDigestAuthHandler": "class urllib.request.AbstractDigestAuthHandler(password_mgr=None)",
 "urllib.parse.quote_plus": "urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)",
 "urllib.parse.unquote_plus": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')",
 "urllib.parse.urlparse": "urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)",
 "urllib.request.HTTPHandler": "class urllib.request.HTTPHandler",
 "urllib.request.AbstractBasicAuthHandler": "class urllib.request.AbstractBasicAuthHandler(password_mgr=None)",
 "urllib.parse.parse_qsl": "urllib.parse.parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None, separator='&')",
 "urllib.request.urlcleanup": "urllib.request.urlcleanup()",
 "urllib.request.ProxyBasicAuthHandler": "class urllib.request.ProxyBasicAuthHandler(password_mgr=None)",
 "urllib.request.build_opener": "urllib.request.build_opener([handler, ...])",
 "urllib.request.getproxies": "urllib.request.getproxies()",
 "urllib.parse.urlunparse": "urllib.parse.urlunparse(parts)",
 "urllib.request.pathname2url": "urllib.request.pathname2url(path)",
 "urllib.request.HTTPDigestAuthHandler": "class urllib.request.HTTPDigestAuthHandler(password_mgr=None)",
 "urllib.parse.SplitResult": "class urllib.parse.SplitResult(scheme, netloc, path, query, fragment)"
}