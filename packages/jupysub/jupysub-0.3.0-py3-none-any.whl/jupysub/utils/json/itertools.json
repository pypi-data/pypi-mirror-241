{
 "itertools.starmap": "itertools.starmap(function, iterable)",
 "itertools.combinations_with_replacement": "itertools.combinations_with_replacement(iterable, r)",
 "itertools.chain": "itertools.chain(*iterables)",
 "itertools.dropwhile": "itertools.dropwhile(predicate, iterable)",
 "itertools.count": "itertools.count(start=0, step=1)",
 "itertools.zip_longest": "itertools.zip_longest(*iterables, fillvalue=None)",
 "itertools.compress": "itertools.compress(data, selectors)",
 "itertools.filterfalse": "itertools.filterfalse(predicate, iterable)",
 "itertools.repeat": "itertools.repeat(object[, times])",
 "itertools.cycle": "itertools.cycle(iterable)",
 "itertools.product": "itertools.product(*iterables, repeat=1)",
 "itertools.pairwise": "itertools.pairwise(iterable)",
 "itertools.takewhile": "itertools.takewhile(predicate, iterable)",
 "itertools.combinations": "itertools.combinations(iterable, r)",
 "itertools.groupby": "itertools.groupby(iterable, key=None)",
 "itertools.permutations": "itertools.permutations(iterable, r=None)",
 "itertools.accumulate": "itertools.accumulate(iterable[, func, *, initial=None])",
 "itertools.tee": "itertools.tee(iterable, n=2)",
 "itertools.islice": "itertools.islice(iterable, stop)"
}