{
 "socket.CMSG_LEN": "socket.CMSG_LEN(length)",
 "socket.ntohs": "socket.ntohs(x)",
 "socket.inet_ntop": "socket.inet_ntop(address_family, packed_ip)",
 "socket.fromshare": "socket.fromshare(data)",
 "socket.htons": "socket.htons(x)",
 "socket.if_indextoname": "socket.if_indextoname(if_index)",
 "socket.create_server": "socket.create_server(address, *, family=AF_INET, backlog=None, reuse_port=False, dualstack_ipv6=False)",
 "socket.getservbyname": "socket.getservbyname(servicename[, protocolname])",
 "socket.gethostbyname": "socket.gethostbyname(hostname)",
 "socket.socketpair": "socket.socketpair([family[, type[, proto]]])",
 "socket.inet_aton": "socket.inet_aton(ip_string)",
 "socket.socket": "class socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)",
 "socket.htonl": "socket.htonl(x)",
 "socket.getnameinfo": "socket.getnameinfo(sockaddr, flags)",
 "socket.getfqdn": "socket.getfqdn([name])",
 "socket.create_connection": "socket.create_connection(address, timeout=GLOBAL_DEFAULT, source_address=None, *, all_errors=False)",
 "socket.setdefaulttimeout": "socket.setdefaulttimeout(timeout)",
 "socket.has_dualstack_ipv6": "socket.has_dualstack_ipv6()",
 "socket.gethostname": "socket.gethostname()",
 "socket.inet_pton": "socket.inet_pton(address_family, ip_string)",
 "socket.inet_ntoa": "socket.inet_ntoa(packed_ip)",
 "socket.ntohl": "socket.ntohl(x)",
 "socket.gethostbyaddr": "socket.gethostbyaddr(ip_address)",
 "socket.close": "socket.close(fd)",
 "socket.sethostname": "socket.sethostname(name)",
 "socket.recv_fds": "socket.recv_fds(sock, bufsize, maxfds[, flags])",
 "socket.getaddrinfo": "socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)",
 "socket.getprotobyname": "socket.getprotobyname(protocolname)",
 "socket.gethostbyname_ex": "socket.gethostbyname_ex(hostname)",
 "socket.getdefaulttimeout": "socket.getdefaulttimeout()",
 "socket.CMSG_SPACE": "socket.CMSG_SPACE(length)",
 "socket.if_nameindex": "socket.if_nameindex()",
 "socket.getservbyport": "socket.getservbyport(port[, protocolname])",
 "socket.if_nametoindex": "socket.if_nametoindex(if_name)",
 "socket.fromfd": "socket.fromfd(fd, family, type, proto=0)",
 "socket.send_fds": "socket.send_fds(sock, buffers, fds[, flags[, address]])"
}