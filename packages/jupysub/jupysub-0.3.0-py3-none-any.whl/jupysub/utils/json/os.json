{
 "os.sched_setscheduler": "os.sched_setscheduler(pid, policy, param, /)",
 "os.fchown": "os.fchown(fd, uid, gid)",
 "os.readlink": "os.readlink(path, *, dir_fd=None)",
 "os.pipe": "os.pipe()",
 "os.path.relpath": "os.path.relpath(path, start=os.curdir)",
 "os.remove": "os.remove(path, *, dir_fd=None)",
 "os.fchdir": "os.fchdir(fd)",
 "os.initgroups": "os.initgroups(username, gid, /)",
 "os.ctermid": "os.ctermid()",
 "os.access": "os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)",
 "os.wait": "os.wait()",
 "os.chown": "os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)",
 "os.path.basename": "os.path.basename(path)",
 "os.setregid": "os.setregid(rgid, egid, /)",
 "os.pwrite": "os.pwrite(fd, str, offset, /)",
 "os.fdatasync": "os.fdatasync(fd)",
 "os.getresgid": "os.getresgid()",
 "os.openpty": "os.openpty()",
 "os.getgid": "os.getgid()",
 "os.plock": "os.plock(op, /)",
 "os.utime": "os.utime(path, times=None, *, [ns, ]dir_fd=None, follow_symlinks=True)",
 "os.execl": "os.execl(path, arg0, arg1, ...)",
 "os.set_blocking": "os.set_blocking(fd, blocking, /)",
 "os.getxattr": "os.getxattr(path, attribute, *, follow_symlinks=True)",
 "os.killpg": "os.killpg(pgid, sig, /)",
 "os.setresuid": "os.setresuid(ruid, euid, suid, /)",
 "os.path.normpath": "os.path.normpath(path)",
 "os.chroot": "os.chroot(path)",
 "os.WSTOPSIG": "os.WSTOPSIG(status)",
 "os.ttyname": "os.ttyname(fd, /)",
 "os.renames": "os.renames(old, new)",
 "os.lockf": "os.lockf(fd, cmd, len, /)",
 "os.WIFSIGNALED": "os.WIFSIGNALED(status)",
 "os.posix_spawn": "os.posix_spawn(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False, setsid=False, setsigmask=(), setsigdef=(), scheduler=None)",
 "os.unsetenv": "os.unsetenv(key, /)",
 "os.path.ismount": "os.path.ismount(path)",
 "os.path.commonpath": "os.path.commonpath(paths)",
 "os.getenv": "os.getenv(key, default=None)",
 "os.getlogin": "os.getlogin()",
 "os.path.isabs": "os.path.isabs(path)",
 "os.listdir": "os.listdir(path='.')",
 "os.setuid": "os.setuid(uid, /)",
 "os.rmdir": "os.rmdir(path, *, dir_fd=None)",
 "os.path.normcase": "os.path.normcase(path)",
 "os.pipe2": "os.pipe2(flags, /)",
 "os.sched_param": "class os.sched_param(sched_priority)",
 "os.path.realpath": "os.path.realpath(path, *, strict=False)",
 "os.symlink": "os.symlink(src, dst, target_is_directory=False, *, dir_fd=None)",
 "os.setreuid": "os.setreuid(ruid, euid, /)",
 "os.writev": "os.writev(fd, buffers, /)",
 "os.get_inheritable": "os.get_inheritable(fd, /)",
 "os.waitpid": "os.waitpid(pid, options, /)",
 "os.path.sameopenfile": "os.path.sameopenfile(fp1, fp2)",
 "os.dup2": "os.dup2(fd, fd2, inheritable=True)",
 "os.fstatvfs": "os.fstatvfs(fd, /)",
 "os.path.isfile": "os.path.isfile(path)",
 "os.urandom": "os.urandom(size, /)",
 "os.getresuid": "os.getresuid()",
 "os.posix_fallocate": "os.posix_fallocate(fd, offset, len, /)",
 "os.register_at_fork": "os.register_at_fork(*, before=None, after_in_parent=None, after_in_child=None)",
 "os.setpgid": "os.setpgid(pid, pgrp, /)",
 "os.getgroups": "os.getgroups()",
 "os.posix_spawnp": "os.posix_spawnp(path, argv, env, *, file_actions=None, setpgroup=None, resetids=False, setsid=False, setsigmask=(), setsigdef=(), scheduler=None)",
 "os.sched_yield": "os.sched_yield()",
 "os.lstat": "os.lstat(path, *, dir_fd=None)",
 "os.eventfd": "os.eventfd(initval[, flags=os.EFD_CLOEXEC])",
 "os.pwritev": "os.pwritev(fd, buffers, offset, flags=0, /)",
 "os.forkpty": "os.forkpty()",
 "os.path.split": "os.path.split(path)",
 "os.setpriority": "os.setpriority(which, who, priority)",
 "os.pread": "os.pread(fd, n, offset, /)",
 "os.startfile": "os.startfile(path[, operation][, arguments][, cwd][, show_cmd])",
 "os.popen": "os.popen(cmd, mode='r', buffering=- 1)",
 "os.WIFSTOPPED": "os.WIFSTOPPED(status)",
 "os.walk": "os.walk(top, topdown=True, onerror=None, followlinks=False)",
 "os.removexattr": "os.removexattr(path, attribute, *, follow_symlinks=True)",
 "os.scandir": "os.scandir(path='.')",
 "os.get_terminal_size": "os.get_terminal_size(fd=STDOUT_FILENO, /)",
 "os.setxattr": "os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)",
 "os.tcgetpgrp": "os.tcgetpgrp(fd, /)",
 "os.closerange": "os.closerange(fd_low, fd_high, /)",
 "os.sched_get_priority_min": "os.sched_get_priority_min(policy)",
 "os.WIFEXITED": "os.WIFEXITED(status)",
 "os.getpid": "os.getpid()",
 "os.path.commonprefix": "os.path.commonprefix(list)",
 "os.path.exists": "os.path.exists(path)",
 "os._exit": "os._exit(n)",
 "os.nice": "os.nice(increment, /)",
 "os.chflags": "os.chflags(path, flags, *, follow_symlinks=True)",
 "os.getcwd": "os.getcwd()",
 "os.set_inheritable": "os.set_inheritable(fd, inheritable, /)",
 "os.system": "os.system(command)",
 "os.WTERMSIG": "os.WTERMSIG(status)",
 "os.unlink": "os.unlink(path, *, dir_fd=None)",
 "os.fchmod": "os.fchmod(fd, mode)",
 "os.pidfd_open": "os.pidfd_open(pid, flags=0)",
 "os.makedev": "os.makedev(major, minor, /)",
 "os.chmod": "os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)",
 "os.tcsetpgrp": "os.tcsetpgrp(fd, pg, /)",
 "os.path.getatime": "os.path.getatime(path)",
 "os.read": "os.read(fd, n, /)",
 "os.getrandom": "os.getrandom(size, flags=0)",
 "os.fsdecode": "os.fsdecode(filename)",
 "os.DirEntry": "class os.DirEntry",
 "os.listxattr": "os.listxattr(path=None, *, follow_symlinks=True)",
 "os.sched_setparam": "os.sched_setparam(pid, param, /)",
 "os.copy_file_range": "os.copy_file_range(src, dst, count, offset_src=None, offset_dst=None)",
 "os.isatty": "os.isatty(fd, /)",
 "os.umask": "os.umask(mask, /)",
 "os.getsid": "os.getsid(pid, /)",
 "os.dup": "os.dup(fd, /)",
 "os.abort": "os.abort()",
 "os.fwalk": "os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)",
 "os.link": "os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)",
 "os.mkfifo": "os.mkfifo(path, mode=0o666, *, dir_fd=None)",
 "os.confstr": "os.confstr(name, /)",
 "os.sched_rr_get_interval": "os.sched_rr_get_interval(pid, /)",
 "os.get_blocking": "os.get_blocking(fd, /)",
 "os.setpgrp": "os.setpgrp()",
 "os.PathLike": "class os.PathLike",
 "os.lchown": "os.lchown(path, uid, gid)",
 "os.kill": "os.kill(pid, sig, /)",
 "os.mknod": "os.mknod(path, mode=0o600, device=0, *, dir_fd=None)",
 "os.set_handle_inheritable": "os.set_handle_inheritable(handle, inheritable, /)",
 "os.path.dirname": "os.path.dirname(path)",
 "os.putenv": "os.putenv(key, value, /)",
 "os.path.getmtime": "os.path.getmtime(path)",
 "os.waitstatus_to_exitcode": "os.waitstatus_to_exitcode(status)",
 "os.path.abspath": "os.path.abspath(path)",
 "os.setgroups": "os.setgroups(groups, /)",
 "os.major": "os.major(device, /)",
 "os.chdir": "os.chdir(path)",
 "os.sched_getaffinity": "os.sched_getaffinity(pid, /)",
 "os.sync": "os.sync()",
 "os.fsencode": "os.fsencode(filename)",
 "os.path.splitdrive": "os.path.splitdrive(path)",
 "os.getppid": "os.getppid()",
 "os.getgrouplist": "os.getgrouplist(user, group, /)",
 "os.cpu_count": "os.cpu_count()",
 "os.sendfile": "os.sendfile(out_fd, in_fd, offset, count)",
 "os.fpathconf": "os.fpathconf(fd, name, /)",
 "os.path.expandvars": "os.path.expandvars(path)",
 "os.fspath": "os.fspath(path)",
 "os.fdopen": "os.fdopen(fd, *args, **kwargs)",
 "os.path.isdir": "os.path.isdir(path)",
 "os.WIFCONTINUED": "os.WIFCONTINUED(status)",
 "os.eventfd_read": "os.eventfd_read(fd)",
 "os.fork": "os.fork()",
 "os.pathconf": "os.pathconf(path, name)",
 "os.spawnl": "os.spawnl(mode, path, ...)",
 "os.path.join": "os.path.join(path, *paths)",
 "os.WEXITSTATUS": "os.WEXITSTATUS(status)",
 "os.sysconf": "os.sysconf(name, /)",
 "os.mkdir": "os.mkdir(path, mode=0o777, *, dir_fd=None)",
 "os.preadv": "os.preadv(fd, buffers, offset, flags=0, /)",
 "os.login_tty": "os.login_tty(fd, /)",
 "os.wait3": "os.wait3(options)",
 "os.truncate": "os.truncate(path, length)",
 "os.removedirs": "os.removedirs(name)",
 "os.setegid": "os.setegid(egid, /)",
 "os.seteuid": "os.seteuid(euid, /)",
 "os.replace": "os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)",
 "os.getpgid": "os.getpgid(pid)",
 "os.wait4": "os.wait4(pid, options)",
 "os.strerror": "os.strerror(code, /)",
 "os.fstat": "os.fstat(fd)",
 "os.get_exec_path": "os.get_exec_path(env=None)",
 "os.lchmod": "os.lchmod(path, mode)",
 "os.ftruncate": "os.ftruncate(fd, length, /)",
 "os.setgid": "os.setgid(gid, /)",
 "os.device_encoding": "os.device_encoding(fd)",
 "os.path.expanduser": "os.path.expanduser(path)",
 "os.add_dll_directory": "os.add_dll_directory(path)",
 "os.terminal_size": "class os.terminal_size",
 "os.path.samestat": "os.path.samestat(stat1, stat2)",
 "os.times": "os.times()",
 "os.getpriority": "os.getpriority(which, who)",
 "os.waitid": "os.waitid(idtype, id, options, /)",
 "os.fsync": "os.fsync(fd)",
 "os.get_handle_inheritable": "os.get_handle_inheritable(handle, /)",
 "os.sched_getscheduler": "os.sched_getscheduler(pid, /)",
 "os.path.getsize": "os.path.getsize(path)",
 "os.minor": "os.minor(device, /)",
 "os.sched_getparam": "os.sched_getparam(pid, /)",
 "os.makedirs": "os.makedirs(name, mode=0o777, exist_ok=False)",
 "os.sched_get_priority_max": "os.sched_get_priority_max(policy)",
 "os.write": "os.write(fd, str, /)",
 "os.uname": "os.uname()",
 "os.lchflags": "os.lchflags(path, flags)",
 "os.getcwdb": "os.getcwdb()",
 "os.eventfd_write": "os.eventfd_write(fd, value)",
 "os.geteuid": "os.geteuid()",
 "os.setresgid": "os.setresgid(rgid, egid, sgid, /)",
 "os.setsid": "os.setsid()",
 "os.close": "os.close(fd)",
 "os.getloadavg": "os.getloadavg()",
 "os.getegid": "os.getegid()",
 "os.getuid": "os.getuid()",
 "os.statvfs": "os.statvfs(path)",
 "os.path.splitext": "os.path.splitext(path)",
 "os.readv": "os.readv(fd, buffers, /)",
 "os.sched_setaffinity": "os.sched_setaffinity(pid, mask, /)",
 "os.rename": "os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)",
 "os.path.samefile": "os.path.samefile(path1, path2)",
 "os.path.islink": "os.path.islink(path)",
 "os.path.getctime": "os.path.getctime(path)",
 "os.lseek": "os.lseek(fd, pos, whence, /)",
 "os.memfd_create": "os.memfd_create(name[, flags=os.MFD_CLOEXEC])",
 "os.posix_fadvise": "os.posix_fadvise(fd, offset, len, advice, /)",
 "os.splice": "os.splice(src, dst, count, offset_src=None, offset_dst=None)",
 "os.getpgrp": "os.getpgrp()",
 "os.stat": "os.stat(path, *, dir_fd=None, follow_symlinks=True)",
 "os.stat_result": "class os.stat_result",
 "os.path.lexists": "os.path.lexists(path)",
 "os.open": "os.open(path, flags, mode=0o777, *, dir_fd=None)",
 "os.getenvb": "os.getenvb(key, default=None)",
 "os.WCOREDUMP": "os.WCOREDUMP(status, /)"
}