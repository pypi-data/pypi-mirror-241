[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "elisa-lib"
dynamic = ["version"]
description = "Efficient and fast library for spectral analysis in X/Î³-ray astrophysics."
readme = "README.md"
requires-python = ">=3.8, <3.12"
license = "GPL-3.0-or-later"
keywords = []
authors = [
  { name = "Wang-Chen Xue", email = "wcxuemail@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
  "arviz>=0.15.1",
  "astropy>=5.2.2",
  "jax>=0.4.13",
  "numpy<=1.24.4",  # should be linked to veclib if platform_machine=='arm64'
  "numpyro>=0.12.1",
  "tqdm>=4.66.1"
]

[project.urls]
Documentation = "https://github.com/wcxve/elisa#readme"
Issues = "https://github.com/wcxve/elisa/issues"
Source = "https://github.com/wcxve/elisa"

[tool.hatch.version]
path = "src/elisa/__init__.py"

[project.optional-dependencies]
test = []
docs = [
  "sphinx",
  "sphinx_rtd_theme",
  "numpydoc"
]
dev = ['ipython', 'black', 'ruff']

#[tool.hatch.envs.default]
#dependencies = [
#  "coverage[toml]>=6.5",
#  "pytest",
#]
#[tool.hatch.envs.default.scripts]
#test = "pytest {args:tests}"
#test-cov = "coverage run -m pytest {args:tests}"
#cov-report = [
#  "- coverage combine",
#  "coverage report",
#]
#cov = [
#  "test-cov",
#  "cov-report",
#]
#
[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]
#
#[tool.hatch.envs.lint]
#detached = true
#dependencies = [
#  "black>=23.1.0",
#  "mypy>=1.0.0",
#  "ruff>=0.0.243",
#]
#[tool.hatch.envs.lint.scripts]
#typing = "mypy --install-types --non-interactive {args:src/demo tests}"
#style = [
#  "ruff {args:.}",
#  "black --check --diff {args:.}",
#]
#fmt = [
#  "black {args:.}",
#  "ruff --fix {args:.}",
#  "style",
#]
#all = [
#  "style",
#  "typing",
#]

[tool.black]
target-version = ["py38"]
line-length = 79
skip-string-normalization = true

[tool.ruff]
target-version = "py38"
line-length = 79
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["elisa"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

#[tool.coverage.run]
#source_pkgs = ["elisa", "tests"]
#branch = true
#parallel = true
#omit = [
#  "src/elisa/__about__.py",
#]
#
#[tool.coverage.paths]
#demo = ["src/elisa", "*/elisa/src/elisa"]
#tests = ["tests", "*/elisa/tests"]
#
#[tool.coverage.report]
#exclude_lines = [
#  "no cov",
#  "if __name__ == .__main__.:",
#  "if TYPE_CHECKING:",
#]
