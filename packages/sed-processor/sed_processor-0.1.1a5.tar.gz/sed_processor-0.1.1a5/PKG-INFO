Metadata-Version: 2.1
Name: sed-processor
Version: 0.1.1a5
Summary: Single Event Data Frame Processor: Backend to handle photoelectron resolved datastreams
Home-page: https://github.com/OpenCOMPES/sed
License: MIT
Keywords: sed,mpes,flash,arpes
Author: OpenCOMPES team
Author-email: zainsohail04@gmail.com
Requires-Python: >=3.8,<3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Provides-Extra: notebook
Requires-Dist: bokeh (>=2.4.2,<3.0.0)
Requires-Dist: dask (>=2021.12.0,<2023.0.0)
Requires-Dist: fastdtw (>=0.3.4,<0.4.0)
Requires-Dist: fastparquet (>=0.8.0,<0.9.0)
Requires-Dist: h5py (>=3.6.0,<4.0.0)
Requires-Dist: ipykernel[notebook] (>=6.9.1,<7.0.0) ; extra == "notebook"
Requires-Dist: ipympl (>=0.9.1)
Requires-Dist: ipywidgets (>=7.7.1)
Requires-Dist: joblib (>=1.2.0,<2.0.0)
Requires-Dist: jupyter[notebook] (>=1.0.0,<2.0.0) ; extra == "notebook"
Requires-Dist: jupyterlab-h5web[notebook] (>=7.0.0) ; extra == "notebook"
Requires-Dist: lmfit (>=1.0.3,<2.0.0)
Requires-Dist: matplotlib (>=3.5.1,<4.0.0)
Requires-Dist: natsort (>=8.1.0,<9.0.0)
Requires-Dist: numba (>=0.55.1,<0.56.0)
Requires-Dist: numpy (>=1.18,<1.23)
Requires-Dist: opencv-python (<=4.8.0.74)
Requires-Dist: pandas (>=1.4.1,<2.0.0)
Requires-Dist: psutil (>=5.9.0,<6.0.0)
Requires-Dist: pyarrow (>=14.0.1,<15.0.0)
Requires-Dist: pynxtools (>=0.0.2)
Requires-Dist: pyyaml (>=6.0.0,<7.0.0)
Requires-Dist: scipy (>=1.8.0,<2.0.0)
Requires-Dist: symmetrize (>=0.5.5,<0.6.0)
Requires-Dist: threadpoolctl (>=3.1.0,<4.0.0)
Requires-Dist: tifffile (>=2022.2.9,<2023.0.0)
Requires-Dist: tqdm (>=4.62.3,<5.0.0)
Requires-Dist: xarray (>=0.20.2,<0.21.0)
Project-URL: Documentation, https://opencompes.github.io/sed/
Project-URL: Repository, https://github.com/OpenCOMPES/sed
Description-Content-Type: text/markdown

# sed
[![Documentation Status](https://github.com/OpenCOMPES/sed/actions/workflows/build_deploy_docs.yml/badge.svg)](https://opencompes.github.io/sed/)
![](https://github.com/OpenCOMPES/sed/actions/workflows/linting.yml/badge.svg?branch=main)
![](https://github.com/OpenCOMPES/sed/actions/workflows/testing_multiversion.yml/badge.svg?branch=main)
![](https://img.shields.io/pypi/pyversions/sedprocessor)
![](https://img.shields.io/pypi/l/sedprocessor)
![](https://img.shields.io/pypi/v/sedprocessor)
[![Coverage Status](https://coveralls.io/repos/github/OpenCOMPES/sed/badge.svg?branch=main&kill_cache=1)](https://coveralls.io/github/OpenCOMPES/sed?branch=main)


Single Event Data Frame Processor: Backend to handle photoelectron resolved datastreams

# Installation

## Conda approach

Clone this repository and cd to its root folder.
Create a new environment by typing:
```
conda env create -f env.yml
```
This should install all the requirements to run `sed` in your environment.
To activate your environment:
```
conda activate sed_conda
```
If you intend to work with jupyter notebooks, it is helpfull to install a jupyter kernel of your environment. This can be done, once activating your environment, by typing:
```
python -m ipykernel install --user --name=sed_conda
```


## Poetry approach (better, but more complex)

- Prerequisites:
  + poetry: https://python-poetry.org/docs/
  + pyenv: https://github.com/pyenv/pyenv

- Clone this repository and check the python version within the `[tool.poetry.dependencies]` section of the `pyproject.toml` file
  + If your system is using a different Python version, use `pyenv` to create and activate a Python version compatible with the specifications from the `pyproject.toml`. See [pyenv basic usage](https://github.com/pyenv/pyenv)
- Create a virtual environment by typing:
```python
poetry shell
```
  + A new shell will be spawn with the new environment activated

- Install the dependencies from the `pyproject.toml` by typing:
```python
poetry install
```

- If you wish to use the virtual environment created by poetry to work in a Jupyter notebook, you first need to install the optional notebook dependencies and then create a Jupyter kernel for that.
  + Install the optional dependencies ipykernel and jupyter
  ```python
  poetry install -E notebook
  ```
  + Make sure to run the command below within your virtual environment ('poetry run' ensures this) by typing:
  ```python
  poetry run ipython kernel install --user --name=sed_poetry
  ```
  + The new kernel will be eligible now from your kernels list in Jupyter

