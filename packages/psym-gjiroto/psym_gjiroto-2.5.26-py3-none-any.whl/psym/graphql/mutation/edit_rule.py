#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field as _field
from ...config import custom_scalars, datetime
from gql_client.runtime.variables import encode_variables
from gql import gql, Client
from gql.transport.exceptions import TransportQueryError
from functools import partial
from numbers import Number
from typing import Any, AsyncGenerator, Dict, List, Generator, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin, config

from ..input.edit_rule_input import EditRuleInput


# fmt: off
QUERY: List[str] = ["""
mutation editRule($input: EditRuleInput!) {
  editRule(input: $input) {
    id
    name
	gracePeriod
	ruleType {id}
	eventTypeName
	specificProblem
	additionalInfo
	status
	eventSeverity{id}
	threshold{id}

  }
}
"""
]


class editRule:
    @dataclass(frozen=True)
    class editRuleData(DataClassJsonMixin):
        @dataclass(frozen=True)
        class Rule(DataClassJsonMixin):
            @dataclass(frozen=True)
            class RuleType(DataClassJsonMixin):
                id: str

            @dataclass(frozen=True)
            class EventSeverity(DataClassJsonMixin):
                id: str

            @dataclass(frozen=True)
            class Threshold(DataClassJsonMixin):
                id: str

            id: str
            name: str
            gracePeriod: Optional[int]
            ruleType: RuleType
            eventTypeName: Optional[str]
            specificProblem: Optional[str]
            additionalInfo: Optional[str]
            status: bool
            eventSeverity: EventSeverity
            threshold: Threshold

        editRule: Rule

    # fmt: off
    @classmethod
    def execute(cls, client: Client, input: EditRuleInput) -> editRuleData.Rule:
        variables: Dict[str, Any] = {"input": input}
        new_variables = encode_variables(variables, custom_scalars)
        response_text = client.execute(
            gql("".join(set(QUERY))), variable_values=new_variables
        )
        res = cls.editRuleData.from_dict(response_text)
        return res.editRule

    # fmt: off
    @classmethod
    async def execute_async(cls, client: Client, input: EditRuleInput) -> editRuleData.Rule:
        variables: Dict[str, Any] = {"input": input}
        new_variables = encode_variables(variables, custom_scalars)
        response_text = await client.execute_async(
            gql("".join(set(QUERY))), variable_values=new_variables
        )
        res = cls.editRuleData.from_dict(response_text)
        return res.editRule
