#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field as _field
from ...config import custom_scalars, datetime
from gql_client.runtime.variables import encode_variables
from gql import gql, Client
from gql.transport.exceptions import TransportQueryError
from functools import partial
from numbers import Number
from typing import Any, AsyncGenerator, Dict, List, Generator, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin, config

from .document_category import DocumentCategoryFragment, QUERY as DocumentCategoryFragmentQuery

from .property_type import PropertyTypeFragment, QUERY as PropertyTypeFragmentQuery

# fmt: off
QUERY: List[str] = DocumentCategoryFragmentQuery + PropertyTypeFragmentQuery + ["""
fragment LocationTypeFragment on LocationType {
  id
  name
  mapType
  isSite
  mapZoomLevel
  propertyTypes {
    ...PropertyTypeFragment
  }
  documentCategories {
    ...DocumentCategoryFragment
  }
}

"""]

@dataclass(frozen=True)
class LocationTypeFragment(DataClassJsonMixin):
    @dataclass(frozen=True)
    class PropertyType(PropertyTypeFragment):
        pass

    @dataclass(frozen=True)
    class DocumentCategory(DocumentCategoryFragment):
        pass

    id: str
    name: str
    mapType: Optional[str]
    isSite: bool
    mapZoomLevel: Optional[int]
    propertyTypes: List[PropertyType]
    documentCategories: List[DocumentCategory]
