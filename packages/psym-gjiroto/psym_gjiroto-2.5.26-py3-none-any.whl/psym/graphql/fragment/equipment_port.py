#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field as _field
from ...config import custom_scalars, datetime
from gql_client.runtime.variables import encode_variables
from gql import gql, Client
from gql.transport.exceptions import TransportQueryError
from functools import partial
from numbers import Number
from typing import Any, AsyncGenerator, Dict, List, Generator, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin, config

from .equipment_port_definition import EquipmentPortDefinitionFragment, QUERY as EquipmentPortDefinitionFragmentQuery

from .link import LinkFragment, QUERY as LinkFragmentQuery

from .property import PropertyFragment, QUERY as PropertyFragmentQuery

# fmt: off
QUERY: List[str] = EquipmentPortDefinitionFragmentQuery + LinkFragmentQuery + PropertyFragmentQuery + ["""
fragment EquipmentPortFragment on EquipmentPort {
  id
  properties {
    ...PropertyFragment
  }
  definition {
    ...EquipmentPortDefinitionFragment
  }
  link {
    ...LinkFragment
  }
}

"""]

@dataclass(frozen=True)
class EquipmentPortFragment(DataClassJsonMixin):
    @dataclass(frozen=True)
    class Property(PropertyFragment):
        pass

    @dataclass(frozen=True)
    class EquipmentPortDefinition(EquipmentPortDefinitionFragment):
        pass

    @dataclass(frozen=True)
    class Link(LinkFragment):
        pass

    id: str
    properties: List[Property]
    definition: EquipmentPortDefinition
    link: Optional[Link]
