{"version":3,"file":"static/js/3255.309cdc28.chunk.js","mappings":"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","sources":["components/DeleteConfirmationModal.jsx","components/Utils.jsx","components/datasource/ShareDataSourceModal.jsx","components/datasource/DataSourceEntryContent.jsx","pages/data.jsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Dialog,\n  Button,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nexport default function DeleteConfirmationModal(props) {\n  const { id, open, onOk, onCancel, title, text } = props;\n  return (\n    <Dialog\n      title={title ? title : \"Logged Out\"}\n      open={open}\n      onCancel={onCancel}\n    >\n      <DialogTitle id=\"delete-modal-title\">Confirm Delete</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{text}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button key=\"cancel\" onClick={() => onCancel(id)}>\n          Cancel\n        </Button>\n        ,\n        <Button\n          key=\"submit\"\n          variant=\"contained\"\n          type=\"primary\"\n          onClick={() => onOk(id)}\n        >\n          Confirm\n        </Button>\n        ,\n      </DialogActions>\n    </Dialog>\n  );\n}\n","export function LocaleDate(props) {\n  const date = new Date(props.value);\n  return <span>{date.toLocaleString()}</span>;\n}\n\n// Render file size in human readable format\nexport function FileSize(props) {\n  let size = props.value;\n  const units = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n  let unit = 0;\n  while (size >= 1024) {\n    size /= 1024;\n    unit += 1;\n  }\n  return (\n    <span>\n      {size > 0\n        ? size.toFixed(2) + \" \" + units[unit]\n        : size + \" \" + units[unit]}\n    </span>\n  );\n}\n","import React from \"react\";\n\nimport {\n  Dialog,\n  Button as MuiButton,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Stack,\n  Select as MuiSelect,\n  MenuItem,\n} from \"@mui/material\";\nimport { axios } from \"../../data/axios\";\n\nexport default function ShareDataSourceModal(props) {\n  const { id, open, onOk, onCancel, title, dataSource } = props;\n  const [visibility, setVisibility] = React.useState(dataSource?.visibility);\n\n  const onOkClick = () => {\n    let action = \"noop\";\n    if (visibility !== dataSource.visibility) {\n      if (dataSource.visibility === 0 && visibility === 1) {\n        // If the visibility is changing from 1 to 0, then we need to make the entry private\n        axios()\n          .post(`api/org/datasources/${dataSource.uuid}/add_entry`)\n          .then((res) => {\n            onOk(action, dataSource);\n          });\n      } else if (dataSource.visibility === 1 && visibility === 0) {\n        // If the visibility is changing from 1 to 0, then we need to make the entry org public\n        axios()\n          .delete(`api/org/datasources/${dataSource.uuid}`)\n          .then((res) => {\n            onOk(action, dataSource);\n          });\n      } else {\n        onOk(action, dataSource);\n      }\n    } else {\n      onOk(action, dataSource);\n    }\n  };\n\n  const visibilityOptions = [\n    {\n      value: 1,\n      label: \"Organization\",\n      description: \"Members of your organization can access this datasource\",\n    },\n    {\n      value: 0,\n      label: \"You\",\n      description: \"Only you can access this datasource\",\n    },\n  ];\n  return (\n    <Dialog\n      open={open}\n      onClose={() => onCancel(id)}\n      aria-labelledby=\"share-datasource-dialog-title\"\n      aria-describedby=\"share-datasource-dialog-description\"\n    >\n      <DialogTitle id=\"share-datasource-dialog-title\">{title}</DialogTitle>\n      <DialogContent style={{ minWidth: \"500px\" }}>\n        <Stack spacing={2}>\n          <h4>Choose who can access this datasource</h4>\n          <MuiSelect\n            labelId=\"share-datasource-select-label\"\n            size=\"small\"\n            defaultValue={\n              dataSource?.visibility === undefined ? 1 : dataSource?.visibility\n            }\n            onChange={(e) => {\n              setVisibility(e.target.value);\n            }}\n          >\n            {visibilityOptions.map((option) => {\n              return (\n                <MenuItem key={option.value} value={option.value}>\n                  <Stack direction=\"row\" spacing={1}>\n                    <span>{option.label}</span>\n                    <small>{option.description}</small>\n                  </Stack>\n                </MenuItem>\n              );\n            })}\n          </MuiSelect>\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <MuiButton onClick={() => onCancel(id)}>Cancel</MuiButton>\n        <MuiButton variant=\"contained\" onClick={() => onOkClick(id)}>\n          Done\n        </MuiButton>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Chip,\n  CircularProgress,\n  Divider,\n  Drawer,\n  Stack,\n} from \"@mui/material\";\nimport { TextareaAutosize } from \"@mui/base\";\nimport { axios } from \"../../data/axios\";\n\nfunction DataSourceEntryContent({ onCancel, dataSourceEntry, open }) {\n  const [data, setData] = useState(null);\n  const [metadata, setMetadata] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (dataSourceEntry?.config?.document_ids) {\n      axios()\n        .get(`/api/datasource_entries/${dataSourceEntry.uuid}/text_content`)\n        .then((response) => {\n          setData(\n            <TextareaAutosize\n              value={response.data?.content}\n              disabled={true}\n              autoSize\n              style={{\n                maxHeight: \"80vh\",\n                width: \"100%\",\n                overflow: \"auto\",\n              }}\n            />,\n          );\n          setMetadata(response.data?.metadata);\n        })\n        .finally(() => setLoading(false));\n    } else {\n      setData(\n        <TextareaAutosize\n          value={JSON.stringify(dataSourceEntry?.config?.errors)}\n          disabled={true}\n          autoSize\n          style={{ maxHeight: \"80vh\", width: \"100%\", overflow: \"auto\" }}\n        />,\n      );\n    }\n  }, [dataSourceEntry]);\n\n  return (\n    <Drawer\n      open={open}\n      onClose={onCancel}\n      anchor=\"right\"\n      sx={{ \"& .MuiDrawer-paper\": { minWidth: \"40%\" }, maxWidth: \"40%\" }}\n    >\n      <Box>\n        <Stack direction={\"row\"} gap={1} sx={{ mb: \"10px\", mt: \"10px\" }}>\n          <Button onClick={() => onCancel()} sx={{ alignSelf: \"left\" }}>\n            X\n          </Button>\n          {Object.keys(metadata || {}).map((key) => (\n            <Chip\n              label={`${key}: ${metadata[key]}`}\n              size=\"small\"\n              key={key}\n              sx={{ borderRadius: \"10px\", marginTop: \"5px\" }}\n            />\n          ))}\n        </Stack>\n        <Divider />\n        {loading ? (\n          <CircularProgress />\n        ) : (\n          <div style={{ margin: \"0px 10px\" }}>{data}</div>\n        )}\n      </Box>\n    </Drawer>\n  );\n}\n\nexport default DataSourceEntryContent;\n","import { useEffect, useState } from \"react\";\nimport {\n  Alert,\n  AlertTitle,\n  Box,\n  Button,\n  Chip,\n  CircularProgress,\n  Collapse,\n  Container,\n  IconButton,\n  Grid,\n  Pagination,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport {\n  AddOutlined,\n  DeleteOutlineOutlined,\n  KeyboardArrowDownOutlined,\n  KeyboardArrowRightOutlined,\n  PeopleOutlineOutlined,\n  PersonOutlineOutlined,\n  SettingsEthernet,\n  SyncOutlined,\n  VisibilityOutlined,\n} from \"@mui/icons-material\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  dataSourceEntriesState,\n  orgDataSourceEntriesState,\n  dataSourceEntriesTableDataState,\n  profileFlagsState,\n} from \"../data/atoms\";\nimport { AddDataSourceModal } from \"../components/datasource/AddDataSourceModal\";\nimport DeleteConfirmationModal from \"../components/DeleteConfirmationModal\";\nimport ShareDataSourceModal from \"../components/datasource/ShareDataSourceModal\";\nimport DataSourceEntryContent from \"../components/datasource/DataSourceEntryContent\";\nimport { LocaleDate, FileSize } from \"../components/Utils\";\nimport { useReloadDataSourceEntries, useReloadDataSources } from \"../data/init\";\nimport { axios } from \"../data/axios\";\nimport moment from \"moment\";\n\nfunction DataSourceEntries({ dataSourceEntryData }) {\n  const [dataSourceEntryDrawerOpen, setDataSourceEntryDrawerOpen] =\n    useState(false);\n  const [dataSourceEntry, setDataSourceEntry] = useState(null);\n  const [deleteConfirmationModalOpen, setDeleteConfirmationModalOpen] =\n    useState(false);\n  const reloadDataSourceEntries = useReloadDataSourceEntries();\n\n  const columns = [\n    {\n      title: \"Name\",\n      key: \"name\",\n    },\n    {\n      title: \"Size\",\n      key: \"size\",\n      render: (record) => {\n        return <FileSize value={record} />;\n      },\n    },\n    {\n      title: \"Status\",\n      key: \"status\",\n      render: (record, row) => {\n        let color = \"success\";\n        if (record === \"FAILED\") {\n          color = \"error\";\n        } else if (record === \"READY\") {\n          color = \"success\";\n        } else {\n          color = \"info\";\n        }\n        return (\n          <Chip\n            color={color}\n            key={row.uuid}\n            style={{ cursor: \"pointer\" }}\n            label={row.status.charAt(0) + row.status.slice(1).toLowerCase()}\n            size=\"small\"\n          ></Chip>\n        );\n      },\n    },\n    {\n      title: \"Created At\",\n      key: \"created_at\",\n      render: (record) => {\n        return <LocaleDate value={record} />;\n      },\n    },\n    {\n      title: \"Last Modified\",\n      key: \"updated_at\",\n      render: (record) => {\n        return moment(record).fromNow();\n      },\n    },\n    {\n      title: \"Action\",\n      key: \"operation\",\n      render: (record, row) => {\n        const isAdhocSyncSupported = record?.sync_config;\n        return (\n          <Box>\n            <Tooltip title=\"View Contents\">\n              <IconButton\n                onClick={() => {\n                  setDataSourceEntryDrawerOpen(true);\n                  setDataSourceEntry(row);\n                }}\n              >\n                <VisibilityOutlined />\n              </IconButton>\n            </Tooltip>\n            {isAdhocSyncSupported && (\n              <Tooltip title=\"Sync Contents\">\n                <IconButton>\n                  <SyncOutlined />\n                </IconButton>\n              </Tooltip>\n            )}\n            <Tooltip title=\"Delete Entry\">\n              <IconButton\n                onClick={() => {\n                  setDataSourceEntry(row);\n                  setDeleteConfirmationModalOpen(true);\n                }}\n              >\n                <DeleteOutlineOutlined />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        );\n      },\n    },\n  ];\n\n  return dataSourceEntryData.length === 0 ? (\n    <Container>\n      <Alert severity=\"info\" sx={{ maxWidth: \"300px\", margin: \"0 auto\" }}>\n        <AlertTitle>No entries found</AlertTitle>\n        Click on the <strong>+</strong> icon to add a new entry.\n      </Alert>\n    </Container>\n  ) : (\n    <Table stickyHeader aria-label=\"sticky table contents\" colSpan={7}>\n      <TableHead>\n        <TableRow>\n          {columns.map((column) => (\n            <TableCell key={column.key} sx={{ padding: \"5px 16px\" }}>\n              <strong>{column.title}</strong>\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody sx={{ borderBottom: \"none\" }}>\n        {dataSourceEntryData?.map((row, index) => {\n          return (\n            <TableRow role=\"checkbox\" tabIndex={-1} key={row.uuid}>\n              {columns.map((column) => {\n                const value = row[column.key];\n                return (\n                  <TableCell key={column.key} sx={{ padding: \"0 16px\" }}>\n                    {column.render ? column.render(value, row) : value}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          );\n        })}\n      </TableBody>\n      <DataSourceEntryContent\n        onCancel={() => setDataSourceEntryDrawerOpen(false)}\n        dataSourceEntry={dataSourceEntry}\n        open={dataSourceEntryDrawerOpen}\n      />\n      <DeleteConfirmationModal\n        id={dataSourceEntry}\n        title=\"Delete Data Source Entry\"\n        text={\n          <div>\n            Are you sure you want to delete{\" \"}\n            <span style={{ fontWeight: \"bold\" }}>{dataSourceEntry?.name}</span>{\" \"}\n            ?\n          </div>\n        }\n        open={deleteConfirmationModalOpen}\n        onOk={(param) => {\n          axios()\n            .delete(`api/datasource_entries/${param.uuid}`)\n            .then((res) => {\n              reloadDataSourceEntries();\n              setDeleteConfirmationModalOpen(false);\n            });\n        }}\n        onCancel={() => {\n          setDeleteConfirmationModalOpen(false);\n        }}\n      />\n    </Table>\n  );\n}\n\nexport default function DataPage() {\n  const entriesPerPage = 10;\n  const [pageNumber, setPageNumber] = useState(1);\n  const [deleteModalTitle, setDeleteModalTitle] = useState(\"\");\n  const [deleteModalMessage, setDeleteModalMessage] = useState(\"\");\n  const [deleteId, setDeleteId] = useState(null);\n  const [addDataSourceModalOpen, setAddDataSourceModalOpen] = useState(false);\n  const [deleteConfirmationModalOpen, setDeleteConfirmationModalOpen] =\n    useState(false);\n  const [shareDataSourceModalOpen, setShareDataSourceModalOpen] =\n    useState(false);\n  const dataSourceEntriesTable = useRecoilValue(\n    dataSourceEntriesTableDataState,\n  );\n  const [dataSourceEntries, setDataSourceEntries] = useRecoilState(\n    dataSourceEntriesState,\n  );\n  const [orgDataSourceEntries, setOrgDataSourceEntries] = useRecoilState(\n    orgDataSourceEntriesState,\n  );\n  const [dataSourceEntriesLoading, setDataSourceEntriesLoading] =\n    useState(null);\n  const [tableData, setTableData] = useState([]);\n  const [modalTitle, setModalTitle] = useState(\"Add New Data Source\");\n  const [selectedDataSource, setSelectedDataSource] = useState(null);\n  const [dataSourceBeingLoaded, setDataSourceBeingLoaded] = useState(null); // uuid of the data source being loaded\n  const reloadDataSourceEntries = useReloadDataSourceEntries();\n  const reloadDataSources = useReloadDataSources();\n  const profileFlags = useRecoilValue(profileFlagsState);\n\n  useEffect(() => {\n    if (dataSourceEntriesTable.length > 0) {\n      setTableData((oldTableData) =>\n        dataSourceEntriesTable.map((item) => ({\n          ...item,\n          expand:\n            oldTableData.find((row) => row.uuid === item.uuid)?.expand || false,\n        })),\n      );\n    }\n  }, [dataSourceEntriesTable]);\n\n  const columns = [\n    {\n      title: \"Name\",\n      key: \"name\",\n      render: (record, row) => {\n        return (\n          <Typography sx={{ display: \"flex\" }}>\n            {row.expand ? (\n              <KeyboardArrowDownOutlined />\n            ) : (\n              <KeyboardArrowRightOutlined />\n            )}\n            {record}\n          </Typography>\n        );\n      },\n    },\n    {\n      title: \"Owner\",\n      key: \"owner_email\",\n      render: (record, row) => {\n        return <span>{row.isUserOwned ? \"me\" : row.owner_email}</span>;\n      },\n    },\n    {\n      title: \"Data Source Type\",\n      key: \"type\",\n      render: (record) => {\n        return <span>{record[\"name\"]}</span>;\n      },\n    },\n\n    {\n      title: \"Size\",\n      key: \"size\",\n      render: (record) => {\n        return <FileSize value={record} />;\n      },\n    },\n    {\n      title: \"Created At\",\n      key: \"created_at\",\n      render: (record) => {\n        return <LocaleDate value={record} />;\n      },\n    },\n    {\n      title: \"Last Modified\",\n      key: \"updated_at\",\n      render: (record) => {\n        return moment(record).fromNow();\n      },\n    },\n    {\n      title: \"Action\",\n      key: \"operation\",\n      render: (record, row) => {\n        return (\n          <Box>\n            {!record?.type?.is_external_datasource && (\n              <IconButton\n                disabled={!row.isUserOwned}\n                onClick={() => {\n                  setModalTitle(\"Add New Data Entry\");\n                  setSelectedDataSource(row);\n                  setAddDataSourceModalOpen(true);\n                }}\n              >\n                <AddOutlined />\n              </IconButton>\n            )}\n            {row?.type?.is_external_datasource && (\n              <Tooltip title=\"External Connection\">\n                <span>\n                  <IconButton disabled={true}>\n                    <SettingsEthernet />\n                  </IconButton>\n                </span>\n              </Tooltip>\n            )}\n            <IconButton\n              disabled={!row.isUserOwned}\n              onClick={() => {\n                setDeleteId(row);\n                setDeleteModalTitle(\"Delete Data Source\");\n                setDeleteModalMessage(\n                  <div>\n                    Are you sure you want to delete{\" \"}\n                    <span style={{ fontWeight: \"bold\" }}>{row.name}</span> ?\n                  </div>,\n                );\n                setDeleteConfirmationModalOpen(true);\n              }}\n            >\n              <DeleteOutlineOutlined />\n            </IconButton>\n            {profileFlags.IS_ORGANIZATION_MEMBER && row.isUserOwned && (\n              <IconButton\n                onClick={() => {\n                  setModalTitle(\"Share Datasource\");\n                  setSelectedDataSource(row);\n                  setShareDataSourceModalOpen(true);\n                }}\n              >\n                {row.visibility === 0 ? (\n                  <PersonOutlineOutlined />\n                ) : (\n                  <PeopleOutlineOutlined />\n                )}\n              </IconButton>\n            )}\n          </Box>\n        );\n      },\n    },\n  ];\n\n  // Expand the datasource row on click and load the datasource entries\n  const handleRowClick = (row) => {\n    setTableData(\n      tableData.map((item) => {\n        if (item.uuid === row.uuid) {\n          item.expand = !item.expand;\n        }\n        return item;\n      }),\n    );\n\n    setDataSourceEntriesLoading(true);\n    setDataSourceBeingLoaded(row.uuid);\n\n    let url = `/api/datasources/${row.uuid}/entries`;\n    if (!row.isUserOwned) {\n      url = `/api/org/datasources/${row.uuid}/entries`;\n    }\n\n    axios()\n      .get(url)\n      .then((response) => {\n        if (row.isUserOwned) {\n          setDataSourceEntries([\n            ...dataSourceEntries.filter(\n              (dataSourceEntry) => dataSourceEntry.datasource.uuid !== row.uuid,\n            ),\n            ...response.data,\n          ]);\n        } else {\n          setOrgDataSourceEntries([\n            ...orgDataSourceEntries.filter(\n              (dataSourceEntry) => dataSourceEntry.datasource.uuid !== row.uuid,\n            ),\n            ...response.data,\n          ]);\n        }\n      })\n      .finally(() => {\n        setDataSourceEntriesLoading(null);\n      });\n  };\n\n  return (\n    <div id=\"data-page\" style={{ marginBottom: \"120px\" }}>\n      <Grid span={24} style={{ padding: \"10px\" }}>\n        <Grid item style={{ width: \"100%\", padding: \"15px 0px\" }}>\n          <Button\n            onClick={() => {\n              setAddDataSourceModalOpen(true);\n            }}\n            type=\"primary\"\n            variant=\"contained\"\n            sx={{ float: \"left\", marginBottom: \"10px\", textTransform: \"none\" }}\n          >\n            Add Data Source\n          </Button>\n        </Grid>\n        <Grid item style={{ width: \"100%\" }}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell\n                    key={column.key}\n                    sx={{\n                      paddingLeft: column.key === \"name\" ? \"40px\" : \"inherit\",\n                    }}\n                  >\n                    <strong>{column.title}</strong>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {tableData\n                .slice(\n                  (pageNumber - 1) * entriesPerPage,\n                  pageNumber * entriesPerPage,\n                )\n                .map((row, index) => {\n                  return [\n                    [\n                      <TableRow\n                        hover\n                        key={row.uuid}\n                        sx={{\n                          cursor: \"pointer\",\n                          backgroundColor: row.expand ? \"#f5f5f5\" : \"inherit\",\n                        }}\n                        onClick={() => {\n                          handleRowClick(row);\n                        }}\n                      >\n                        {columns.map((column) => {\n                          const value = row[column.key];\n                          return (\n                            <TableCell\n                              key={column.key}\n                              sx={{\n                                fontWeight: row.expand ? \"bold\" : \"inherit\",\n                              }}\n                            >\n                              {column.render\n                                ? column.render(value, row)\n                                : value}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>,\n                      <TableRow key={`${row.uuid}_details`}>\n                        <TableCell\n                          colSpan={7}\n                          sx={{ padding: row.expand ? \"0\" : \"inherit\" }}\n                        >\n                          <Collapse\n                            in={row.expand}\n                            timeout=\"auto\"\n                            unmountOnExit\n                          >\n                            <Box sx={{ margin: 1 }}>\n                              {dataSourceEntriesLoading &&\n                              dataSourceBeingLoaded === row.uuid ? (\n                                <CircularProgress />\n                              ) : (\n                                <DataSourceEntries\n                                  dataSourceEntryData={\n                                    row.data_source_entries || []\n                                  }\n                                />\n                              )}\n                            </Box>\n                          </Collapse>\n                        </TableCell>\n                      </TableRow>,\n                    ],\n                  ];\n                })}\n            </TableBody>\n          </Table>\n          <Pagination\n            count={Math.ceil(tableData.length / entriesPerPage)}\n            variant=\"outlined\"\n            shape=\"rounded\"\n            page={pageNumber}\n            onChange={(event, value) => {\n              setPageNumber(value);\n            }}\n            sx={{ marginTop: 2, float: \"right\" }}\n          />\n        </Grid>\n      </Grid>\n      {addDataSourceModalOpen && (\n        <AddDataSourceModal\n          open={addDataSourceModalOpen}\n          handleCancelCb={() => {\n            setSelectedDataSource(null);\n            setAddDataSourceModalOpen(false);\n          }}\n          dataSourceAddedCb={() => {\n            setSelectedDataSource(null);\n            reloadDataSourceEntries();\n            reloadDataSources();\n            setAddDataSourceModalOpen(false);\n          }}\n          modalTitle={modalTitle}\n          datasource={selectedDataSource}\n        />\n      )}\n      {deleteConfirmationModalOpen && (\n        <DeleteConfirmationModal\n          id={deleteId}\n          title={deleteModalTitle}\n          text={deleteModalMessage}\n          open={deleteConfirmationModalOpen}\n          onOk={(param) => {\n            if (param?.data_source_entries !== undefined) {\n              axios()\n                .delete(`api/datasources/${param.uuid}`)\n                .then((res) => {\n                  reloadDataSources();\n                  setDeleteConfirmationModalOpen(false);\n                });\n            }\n          }}\n          onCancel={() => {\n            setDeleteConfirmationModalOpen(false);\n          }}\n        />\n      )}\n      {shareDataSourceModalOpen && (\n        <ShareDataSourceModal\n          title={modalTitle}\n          onCancel={() => setShareDataSourceModalOpen(false)}\n          onOk={() => {\n            setShareDataSourceModalOpen(false);\n          }}\n          open={shareDataSourceModalOpen}\n          dataSource={selectedDataSource}\n        />\n      )}\n    </div>\n  );\n}\n"],"names":["DeleteConfirmationModal","props","id","open","onOk","onCancel","title","text","_jsxs","Dialog","children","_jsx","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","variant","type","LocaleDate","date","Date","value","toLocaleString","FileSize","size","units","unit","toFixed","ShareDataSourceModal","dataSource","_React$useState","React","visibility","_React$useState2","_slicedToArray","setVisibility","onClose","style","minWidth","Stack","spacing","MuiSelect","labelId","defaultValue","undefined","onChange","e","target","label","description","map","option","MenuItem","direction","MuiButton","action","axios","post","concat","uuid","then","res","delete","onOkClick","_ref","dataSourceEntry","_useState","useState","_useState2","data","setData","_useState3","_useState4","metadata","setMetadata","_useState5","_useState6","loading","setLoading","useEffect","_dataSourceEntry$conf","_dataSourceEntry$conf2","config","document_ids","get","response","_response$data","_response$data2","TextareaAutosize","content","disabled","autoSize","maxHeight","width","overflow","finally","JSON","stringify","errors","Drawer","anchor","sx","maxWidth","Box","gap","mb","mt","alignSelf","Object","keys","key","Chip","borderRadius","marginTop","Divider","CircularProgress","margin","DataSourceEntries","dataSourceEntryData","dataSourceEntryDrawerOpen","setDataSourceEntryDrawerOpen","setDataSourceEntry","deleteConfirmationModalOpen","setDeleteConfirmationModalOpen","reloadDataSourceEntries","useReloadDataSourceEntries","columns","render","record","row","color","cursor","status","charAt","slice","toLowerCase","moment","fromNow","isAdhocSyncSupported","sync_config","Tooltip","IconButton","VisibilityOutlined","SyncOutlined","DeleteOutlineOutlined","length","Container","Alert","severity","AlertTitle","Table","stickyHeader","colSpan","TableHead","TableRow","column","TableCell","padding","TableBody","borderBottom","index","role","tabIndex","DataSourceEntryContent","fontWeight","name","param","DataPage","_useState7","_useState8","pageNumber","setPageNumber","_useState9","_useState10","deleteModalTitle","setDeleteModalTitle","_useState11","_useState12","deleteModalMessage","setDeleteModalMessage","_useState13","_useState14","deleteId","setDeleteId","_useState15","_useState16","addDataSourceModalOpen","setAddDataSourceModalOpen","_useState17","_useState18","_useState19","_useState20","shareDataSourceModalOpen","setShareDataSourceModalOpen","dataSourceEntriesTable","useRecoilValue","dataSourceEntriesTableDataState","_useRecoilState","useRecoilState","dataSourceEntriesState","_useRecoilState2","dataSourceEntries","setDataSourceEntries","_useRecoilState3","orgDataSourceEntriesState","_useRecoilState4","orgDataSourceEntries","setOrgDataSourceEntries","_useState21","_useState22","dataSourceEntriesLoading","setDataSourceEntriesLoading","_useState23","_useState24","tableData","setTableData","_useState25","_useState26","modalTitle","setModalTitle","_useState27","_useState28","selectedDataSource","setSelectedDataSource","_useState29","_useState30","dataSourceBeingLoaded","setDataSourceBeingLoaded","reloadDataSources","useReloadDataSources","profileFlags","profileFlagsState","oldTableData","item","_oldTableData$find","_objectSpread","expand","find","Typography","display","KeyboardArrowDownOutlined","KeyboardArrowRightOutlined","isUserOwned","owner_email","_record$type","_row$type","is_external_datasource","AddOutlined","SettingsEthernet","IS_ORGANIZATION_MEMBER","PersonOutlineOutlined","PeopleOutlineOutlined","marginBottom","Grid","span","float","textTransform","paddingLeft","hover","backgroundColor","url","_toConsumableArray","filter","datasource","handleRowClick","Collapse","in","timeout","unmountOnExit","data_source_entries","Pagination","count","Math","ceil","shape","page","event","AddDataSourceModal","handleCancelCb","dataSourceAddedCb"],"sourceRoot":""}