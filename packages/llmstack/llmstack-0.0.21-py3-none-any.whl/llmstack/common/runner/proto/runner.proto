syntax = "proto3";

enum BrowserCommandType {
  GOTO = 0; // go to url
  TERMINATE = 1; // terminate session
  WAIT = 2; // wait for selector
  CLICK = 3; // click selector
  COPY = 4; // copy selector
  TYPE = 5; // type selector
}

message BrowserInput {
  BrowserCommandType type = 1; // command type
  string selector = 2; // selector to use
  string data = 3; // command data
}

message BrowserInitData {
  string url = 1; // url to open
  string terminate_url_pattern = 2; // url pattern to terminate session
  int32 timeout = 3; // timeout in seconds
  bool persist_session = 4; // persist session after done
  string session_data = 5; // session data to restore
}

message BrowserOutput {
  string url = 1; // url of page
  string text = 2; // copied text
}

message RemoteBrowserRequest {
  BrowserInitData init_data = 1; // init data
  BrowserInput input = 5; // input to send to browser
}

enum RemoteBrowserState {
  RUNNING = 0; // browser is running
  TERMINATED = 1; // browser is terminated
  TIMEOUT = 2; // browser is timed out
}

message RemoteBrowserSession {
  string ws_url = 1; // websocket url to connect to for remote display
  string session_data = 2; // session data to persist
}

message RemoteBrowserResponse {
  RemoteBrowserSession session = 1; // session data
  RemoteBrowserState state = 2; // state of browser
}

message PlaywrightBrowserRequest {
  string url = 1; // url to open
  repeated BrowserInput steps = 2; // List of inputs to send to browser
  int32 timeout = 3; // timeout in seconds
  string session_data = 4; // session data to restore
  bool stream_video = 5; // whether to stream video
}

message PlaywrightBrowserResponse {
  RemoteBrowserSession session = 1; // session data
  bytes video = 2; // video data
  RemoteBrowserState state = 3; // state of browser
  repeated BrowserOutput outputs = 4; // List of outputs from browser
}

// Generic runner service
service Runner {

  rpc GetRemoteBrowser (stream RemoteBrowserRequest) returns (stream RemoteBrowserResponse) {}

  rpc GetPlaywrightBrowser (PlaywrightBrowserRequest) returns (stream PlaywrightBrowserResponse) {}

}