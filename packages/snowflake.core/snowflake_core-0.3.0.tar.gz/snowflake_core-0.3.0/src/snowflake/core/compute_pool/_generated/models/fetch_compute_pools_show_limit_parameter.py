# coding: utf-8

"""
    Snowflake Compute Pools API

    The Snowflake Compute Pools API is a REST API that you can use to access, update, and perform certain actions on Compute Pool resources.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class FetchComputePoolsShowLimitParameter(BaseModel):
    rows: StrictInt = ...
    name_string: Optional[StrictStr] = Field(None, alias="nameString")
    __properties = ["rows", "nameString"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FetchComputePoolsShowLimitParameter:
        """Create an instance of FetchComputePoolsShowLimitParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FetchComputePoolsShowLimitParameter:
        """Create an instance of FetchComputePoolsShowLimitParameter from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FetchComputePoolsShowLimitParameter.parse_obj(obj)

        _obj = FetchComputePoolsShowLimitParameter.parse_obj({
            "rows": obj.get("rows"),
            "name_string": obj.get("nameString")
        })
        return _obj

