# coding: utf-8

"""
    Snowflake Schema API

    The Snowflake Schema API is a REST API that you can use to access, update, and perform certain actions on Schema resource in Snowflake.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from snowflake.core.schema._generated.models.clone_time_travel_point_of_time import CloneTimeTravelPointOfTime

class CloneTimeTravel(BaseModel):
    when: Optional[StrictStr] = Field(None, description="The relation to the point of time. At the time of writing at and before are supported.")
    point_of_time: Optional[CloneTimeTravelPointOfTime] = None
    __properties = ["when", "point_of_time"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CloneTimeTravel:
        """Create an instance of CloneTimeTravel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of point_of_time
        if self.point_of_time:
            _dict['point_of_time'] = self.point_of_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CloneTimeTravel:
        """Create an instance of CloneTimeTravel from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CloneTimeTravel.parse_obj(obj)

        _obj = CloneTimeTravel.parse_obj({
            "when": obj.get("when"),
            "point_of_time": CloneTimeTravelPointOfTime.from_dict(obj.get("point_of_time")) if obj.get("point_of_time") is not None else None
        })
        return _obj

