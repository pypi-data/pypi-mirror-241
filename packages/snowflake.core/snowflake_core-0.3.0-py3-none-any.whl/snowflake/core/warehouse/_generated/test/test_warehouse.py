# coding: utf-8

"""
    Snowflake Warehouse API

    The Snowflake Warehouse API is a REST API that you can use to access, customize and manage virtual warehouse in a Snowflake account.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import snowflake.core.warehouse._generated
from snowflake.core.warehouse._generated.models.warehouse import Warehouse  # noqa: E501
from snowflake.core.warehouse._generated.rest import ApiException

class TestWarehouse(unittest.TestCase):
    """Warehouse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Warehouse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Warehouse`
        """
        model = snowflake.core.warehouse._generated.models.warehouse.Warehouse()  # noqa: E501
        if include_optional :
            return Warehouse(
                name = '_AMDTMv2D2ylmgd10Z3UB6UkJSISSB512iz2DiJykO4IVP7YNsKQHh9BsaMPOiOuo3_', 
                warehouse_type = 'STANDARD', 
                warehouse_size = 'XSMALL', 
                wait_for_completion = true, 
                max_cluster_count = 1.337, 
                min_cluster_count = 1.337, 
                scaling_policy = '', 
                auto_suspend = 1.337, 
                auto_resume = true, 
                initially_suspended = true, 
                resource_monitor = None, 
                comment = '', 
                enable_query_acceleration = true, 
                query_acceleration_max_scale_factor = 1.337, 
                like = false, 
                max_concurrency_level = 1.337, 
                statement_queued_timeout_in_seconds = 1.337, 
                statement_timeout_in_seconds = 1.337, 
                tags = '', 
                state = 'STARTED', 
                started_clusters = 1.337, 
                running = 1.337, 
                queued = 1.337, 
                is_default = '', 
                is_current = '', 
                available = 1.337, 
                provisioning = 1.337, 
                quiescing = 1.337, 
                other = 1.337, 
                created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                resumed_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                updated_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                owner = '', 
                kind = ''
            )
        else :
            return Warehouse(
                name = '_AMDTMv2D2ylmgd10Z3UB6UkJSISSB512iz2DiJykO4IVP7YNsKQHh9BsaMPOiOuo3_',
        )
        """

    def testWarehouse(self):
        """Test Warehouse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
