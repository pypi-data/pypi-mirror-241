# coding: utf-8

"""
    Snowflake Task API

    The Snowflake Task API is a REST API that you can use to access, update, and perform certain actions on task resources in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import snowflake.core.task._generated
from snowflake.core.task._generated.models.task import Task  # noqa: E501
from snowflake.core.task._generated.rest import ApiException

class TestTask(unittest.TestCase):
    """Task unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Task
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Task`
        """
        model = snowflake.core.task._generated.models.task.Task()  # noqa: E501
        if include_optional :
            return Task(
                name = '_AMDTMv2D2ylmgd10Z3UB6UkJSISSB512iz2DiJykO4IVP7YNsKQHh9BsaMPOiOuo3_', 
                warehouse = '_AMDTMv2D2ylmgd10Z3UB6UkJSISSB512iz2DiJykO4IVP7YNsKQHh9BsaMPOiOuo3_', 
                schedule = None, 
                comment = '', 
                config = { }, 
                definition = '', 
                predecessors = [
                    ''
                    ], 
                user_task_managed_initial_warehouse_size = '', 
                user_task_timeout_ms = 56, 
                suspend_task_after_num_failures = 56, 
                condition = '', 
                allow_overlapping_execution = True, 
                error_integration = '', 
                created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                id = '', 
                owner = '', 
                owner_role_type = '', 
                state = 'started', 
                last_committed_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                last_suspended_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                database_name = '', 
                schema_name = ''
            )
        else :
            return Task(
                name = '_AMDTMv2D2ylmgd10Z3UB6UkJSISSB512iz2DiJykO4IVP7YNsKQHh9BsaMPOiOuo3_',
                definition = '',
        )
        """

    def testTask(self):
        """Test Task"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
