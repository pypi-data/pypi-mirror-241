"use strict";
const elIsClean = (el) => {
    if (el.style && el.style.display === "none")
        return false;
    if (el.hidden)
        return false;
    // @ts-ignore
    if (el.disabled)
        return false;
    const rect = el.getBoundingClientRect();
    if (rect.width === 0 || rect.height === 0)
        return false;
    if (el.tagName === "SCRIPT")
        return false;
    if (el.tagName === "STYLE")
        return false;
    return true;
};
const inputs = ["a", "button", "textarea", "select", "details", "label"];
const isInteractable = (el) => inputs.includes(el.tagName.toLowerCase()) ||
    // @ts-ignore
    (el.tagName.toLowerCase() === "input" && el.type !== "hidden") ||
    el.role === "button";
const emptyTagWhitelist = ["input", "textarea", "select", "button"];
const isEmpty = (el) => {
    const tagName = el.tagName.toLowerCase();
    if (emptyTagWhitelist.includes(tagName))
        return false;
    if ("innerText" in el && el.innerText.trim().length === 0) {
        // look for svg or img in the element
        const svg = el.querySelector("svg");
        const img = el.querySelector("img");
        if (svg || img)
            return false;
        return true;
    }
    return false;
};
function getElementXPath(element) {
    let path_parts = [];
    let iframe_str = "";
    if (element && element.ownerDocument !== window.document) {
        // assert element.iframe_index !== undefined, "Element is not in the main document and does not have an iframe_index attribute";
        iframe_str = `iframe[${element.getAttribute("iframe_index")}]`;
    }
    while (element) {
        if (!element.tagName) {
            element = element.parentNode;
            continue;
        }
        let prefix = element.tagName.toLowerCase();
        let sibling_index = 1;
        let sibling = element.previousElementSibling;
        while (sibling) {
            if (sibling.tagName === element.tagName) {
                sibling_index++;
            }
            sibling = sibling.previousElementSibling;
        }
        // Check next siblings to determine if index should be added
        let nextSibling = element.nextElementSibling;
        let shouldAddIndex = false;
        while (nextSibling) {
            if (nextSibling.tagName === element.tagName) {
                shouldAddIndex = true;
                break;
            }
            nextSibling = nextSibling.nextElementSibling;
        }
        if (sibling_index > 1 || shouldAddIndex) {
            prefix += `[${sibling_index}]`;
        }
        if (element.id) {
            prefix += `[@id="${element.id}"]`;
            path_parts.unshift(prefix);
            return "//" + path_parts.join("/");
        }
        else if (element.className) {
            const classList = Array.from(element.classList);
            const class_conditions = classList
                .map((single_class) => `contains(concat(" ", normalize-space(@class), " "), " ${single_class} ")`)
                .join(" and ");
            if (class_conditions.length > 0) {
                prefix += `[${class_conditions}]`;
            }
        }
        path_parts.unshift(prefix);
        // @ts-ignore
        element = element.parentNode;
    }
    return iframe_str + "//" + path_parts.join("/");
}
function create_tagged_span(idStr) {
    let idSpan = document.createElement("span");
    idSpan.id = "__tarsier_id";
    idSpan.style.all = "inherit";
    idSpan.style.display = "inline";
    idSpan.style.color = "white";
    idSpan.style.backgroundColor = "red";
    idSpan.textContent = idStr;
    return idSpan;
}
window.tagifyWebpage = (tagLeafTexts = false) => {
    window.removeTags();
    let idNum = 0;
    let idToXpath = {};
    // @ts-ignore
    let allElements = [...document.body.querySelectorAll("*")];
    const iframes = document.getElementsByTagName("iframe");
    // add elements in iframes to allElements
    for (let i = 0; i < iframes.length; i++) {
        try {
            const frame = iframes[i];
            console.log("iframe!", iframes[i]);
            const iframeDocument = frame.contentDocument || frame.contentWindow?.document;
            // @ts-ignore
            const iframeElements = [...iframeDocument.querySelectorAll("*")];
            iframeElements.forEach((el) => el.setAttribute("iframe_index", i));
            allElements.push(...iframeElements);
        }
        catch (e) {
            // Cross-origin iframe error
            console.error("Cross-origin iframe:", e);
        }
    }
    // ignore all children of interactable elements
    allElements.map((el) => {
        if (isInteractable(el)) {
            el.childNodes.forEach((child) => {
                const index = allElements.indexOf(child);
                if (index > -1) {
                    allElements.splice(index, 1);
                }
            });
        }
    });
    const inputTags = ["input", "textarea", "select"];
    for (let el of allElements) {
        if (isEmpty(el) || !elIsClean(el)) {
            continue;
        }
        const intractable = isInteractable(el);
        const elTagName = el.tagName.toLowerCase();
        const idStr = inputTags.includes(elTagName) ? `{${idNum}}` : `[${idNum}]`;
        idToXpath[idNum] = getElementXPath(el);
        // create the span for the id tag
        let idSpan = create_tagged_span(idStr);
        if (intractable) {
            if (!inputTags.includes(elTagName)) {
                el.prepend(idSpan);
            }
            else if (elTagName === "textarea" || elTagName === "input") {
                el.prepend(idSpan);
            }
            else if (elTagName === "select") {
                // leave select blank - we'll give a tag ID to the options
            }
        }
        else {
            if (tagLeafTexts &&
                /\S/.test(el.textContent || "") &&
                Array.from(el.childNodes).every((node) => node.nodeType === Node.TEXT_NODE)) {
                // This is a leaf element with non-whitespace text
                el.prepend(idSpan);
            }
        }
        idNum++;
    }
    return idToXpath;
};
window.removeTags = () => {
    const tags = document.querySelectorAll("#__tarsier_id");
    tags.forEach((tag) => tag.remove());
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGFnX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFNQSxNQUFNLFNBQVMsR0FBRyxDQUFDLEVBQWUsRUFBRSxFQUFFO0lBQ3BDLElBQUksRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxNQUFNO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDMUQsSUFBSSxFQUFFLENBQUMsTUFBTTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQzVCLGFBQWE7SUFDYixJQUFJLEVBQUUsQ0FBQyxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDeEMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUV4RCxJQUFJLEVBQUUsQ0FBQyxPQUFPLEtBQUssUUFBUTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQzFDLElBQUksRUFBRSxDQUFDLE9BQU8sS0FBSyxPQUFPO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFekMsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekUsTUFBTSxjQUFjLEdBQUcsQ0FBQyxFQUFXLEVBQUUsRUFBRSxDQUNyQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsYUFBYTtJQUNiLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7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RTtnQkFDNUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwQjtpQkFBTSxJQUFJLFNBQVMsS0FBSyxRQUFRLEVBQUU7Z0JBQ2pDLDBEQUEwRDthQUMzRDtTQUNGO2FBQU07WUFDTCxJQUNFLFlBQVk7Z0JBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztnQkFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUM3QixDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUMzQyxFQUNEO2dCQUNBLGtEQUFrRDtnQkFDbEQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwQjtTQUNGO1FBRUQsS0FBSyxFQUFFLENBQUM7S0FDVDtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxFQUFFO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG5pbnRlcmZhY2UgV2luZG93IHtcbiAgdGFnaWZ5V2VicGFnZTogKHRhZ0xlYWZUZXh0cz86IGJvb2xlYW4pID0+IHsgW2tleTogbnVtYmVyXTogc3RyaW5nIH07XG4gIHJlbW92ZVRhZ3M6ICgpID0+IHZvaWQ7XG59XG5cbmNvbnN0IGVsSXNDbGVhbiA9IChlbDogSFRNTEVsZW1lbnQpID0+IHtcbiAgaWYgKGVsLnN0eWxlICYmIGVsLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiKSByZXR1cm4gZmFsc2U7XG4gIGlmIChlbC5oaWRkZW4pIHJldHVybiBmYWxzZTtcbiAgLy8gQHRzLWlnbm9yZVxuICBpZiAoZWwuZGlzYWJsZWQpIHJldHVybiBmYWxzZTtcblxuICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGlmIChyZWN0LndpZHRoID09PSAwIHx8IHJlY3QuaGVpZ2h0ID09PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGVsLnRhZ05hbWUgPT09IFwiU0NSSVBUXCIpIHJldHVybiBmYWxzZTtcbiAgaWYgKGVsLnRhZ05hbWUgPT09IFwiU1RZTEVcIikgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgaW5wdXRzID0gW1wiYVwiLCBcImJ1dHRvblwiLCBcInRleHRhcmVhXCIsIFwic2VsZWN0XCIsIFwiZGV0YWlsc1wiLCBcImxhYmVsXCJdO1xuY29uc3QgaXNJbnRlcmFjdGFibGUgPSAoZWw6IEVsZW1lbnQpID0+XG4gIGlucHV0cy5pbmNsdWRlcyhlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHx8XG4gIC8vIEB0cy1pZ25vcmVcbiAgKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmIGVsLnR5cGUgIT09IFwiaGlkZGVuXCIpIHx8XG4gIGVsLnJvbGUgPT09IFwiYnV0dG9uXCI7XG5cbmNvbnN0IGVtcHR5VGFnV2hpdGVsaXN0ID0gW1wiaW5wdXRcIiwgXCJ0ZXh0YXJlYVwiLCBcInNlbGVjdFwiLCBcImJ1dHRvblwiXTtcbmNvbnN0IGlzRW1wdHkgPSAoZWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gIGNvbnN0IHRhZ05hbWUgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChlbXB0eVRhZ1doaXRlbGlzdC5pbmNsdWRlcyh0YWdOYW1lKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoXCJpbm5lclRleHRcIiBpbiBlbCAmJiBlbC5pbm5lclRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIGxvb2sgZm9yIHN2ZyBvciBpbWcgaW4gdGhlIGVsZW1lbnRcbiAgICBjb25zdCBzdmcgPSBlbC5xdWVyeVNlbGVjdG9yKFwic3ZnXCIpO1xuICAgIGNvbnN0IGltZyA9IGVsLnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIik7XG5cbiAgICBpZiAoc3ZnIHx8IGltZykgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5mdW5jdGlvbiBnZXRFbGVtZW50WFBhdGgoZWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsKSB7XG4gIGxldCBwYXRoX3BhcnRzID0gW107XG5cbiAgbGV0IGlmcmFtZV9zdHIgPSBcIlwiO1xuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Lm93bmVyRG9jdW1lbnQgIT09IHdpbmRvdy5kb2N1bWVudCkge1xuICAgIC8vIGFzc2VydCBlbGVtZW50LmlmcmFtZV9pbmRleCAhPT0gdW5kZWZpbmVkLCBcIkVsZW1lbnQgaXMgbm90IGluIHRoZSBtYWluIGRvY3VtZW50IGFuZCBkb2VzIG5vdCBoYXZlIGFuIGlmcmFtZV9pbmRleCBhdHRyaWJ1dGVcIjtcbiAgICBpZnJhbWVfc3RyID0gYGlmcmFtZVske2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaWZyYW1lX2luZGV4XCIpfV1gO1xuICB9XG5cbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQudGFnTmFtZSkge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCB8IG51bGw7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsZXQgcHJlZml4ID0gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IHNpYmxpbmdfaW5kZXggPSAxO1xuXG4gICAgbGV0IHNpYmxpbmcgPSBlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgd2hpbGUgKHNpYmxpbmcpIHtcbiAgICAgIGlmIChzaWJsaW5nLnRhZ05hbWUgPT09IGVsZW1lbnQudGFnTmFtZSkge1xuICAgICAgICBzaWJsaW5nX2luZGV4Kys7XG4gICAgICB9XG4gICAgICBzaWJsaW5nID0gc2libGluZy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgIH1cblxuICAgIC8vIENoZWNrIG5leHQgc2libGluZ3MgdG8gZGV0ZXJtaW5lIGlmIGluZGV4IHNob3VsZCBiZSBhZGRlZFxuICAgIGxldCBuZXh0U2libGluZyA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIGxldCBzaG91bGRBZGRJbmRleCA9IGZhbHNlO1xuICAgIHdoaWxlIChuZXh0U2libGluZykge1xuICAgICAgaWYgKG5leHRTaWJsaW5nLnRhZ05hbWUgPT09IGVsZW1lbnQudGFnTmFtZSkge1xuICAgICAgICBzaG91bGRBZGRJbmRleCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbmV4dFNpYmxpbmcgPSBuZXh0U2libGluZy5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgfVxuXG4gICAgaWYgKHNpYmxpbmdfaW5kZXggPiAxIHx8IHNob3VsZEFkZEluZGV4KSB7XG4gICAgICBwcmVmaXggKz0gYFske3NpYmxpbmdfaW5kZXh9XWA7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuaWQpIHtcbiAgICAgIHByZWZpeCArPSBgW0BpZD1cIiR7ZWxlbWVudC5pZH1cIl1gO1xuICAgICAgcGF0aF9wYXJ0cy51bnNoaWZ0KHByZWZpeCk7XG4gICAgICByZXR1cm4gXCIvL1wiICsgcGF0aF9wYXJ0cy5qb2luKFwiL1wiKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuY2xhc3NOYW1lKSB7XG4gICAgICBjb25zdCBjbGFzc0xpc3QgPSBBcnJheS5mcm9tKGVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICAgIGNvbnN0IGNsYXNzX2NvbmRpdGlvbnMgPSBjbGFzc0xpc3RcbiAgICAgICAgLm1hcChcbiAgICAgICAgICAoc2luZ2xlX2NsYXNzKSA9PlxuICAgICAgICAgICAgYGNvbnRhaW5zKGNvbmNhdChcIiBcIiwgbm9ybWFsaXplLXNwYWNlKEBjbGFzcyksIFwiIFwiKSwgXCIgJHtzaW5nbGVfY2xhc3N9IFwiKWAsXG4gICAgICAgIClcbiAgICAgICAgLmpvaW4oXCIgYW5kIFwiKTtcblxuICAgICAgaWYgKGNsYXNzX2NvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBwcmVmaXggKz0gYFske2NsYXNzX2NvbmRpdGlvbnN9XWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGF0aF9wYXJ0cy51bnNoaWZ0KHByZWZpeCk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIGlmcmFtZV9zdHIgKyBcIi8vXCIgKyBwYXRoX3BhcnRzLmpvaW4oXCIvXCIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfdGFnZ2VkX3NwYW4oaWRTdHI6IHN0cmluZykge1xuICBsZXQgaWRTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gIGlkU3Bhbi5pZCA9IFwiX190YXJzaWVyX2lkXCI7XG4gIGlkU3Bhbi5zdHlsZS5hbGwgPSBcImluaGVyaXRcIjtcbiAgaWRTcGFuLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZVwiO1xuICBpZFNwYW4uc3R5bGUuY29sb3IgPSBcIndoaXRlXCI7XG4gIGlkU3Bhbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICBpZFNwYW4udGV4dENvbnRlbnQgPSBpZFN0cjtcbiAgcmV0dXJuIGlkU3Bhbjtcbn1cblxud2luZG93LnRhZ2lmeVdlYnBhZ2UgPSAodGFnTGVhZlRleHRzID0gZmFsc2UpID0+IHtcbiAgd2luZG93LnJlbW92ZVRhZ3MoKTtcblxuICBsZXQgaWROdW0gPSAwO1xuICBsZXQgaWRUb1hwYXRoOiBSZWNvcmQ8bnVtYmVyLCBzdHJpbmc+ID0ge307XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBsZXQgYWxsRWxlbWVudHM6IEhUTUxFbGVtZW50W10gPSBbLi4uZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwiKlwiKV07XG4gIGNvbnN0IGlmcmFtZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlmcmFtZVwiKTtcblxuICAvLyBhZGQgZWxlbWVudHMgaW4gaWZyYW1lcyB0byBhbGxFbGVtZW50c1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGlmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZnJhbWUgPSBpZnJhbWVzW2ldO1xuICAgICAgY29uc29sZS5sb2coXCJpZnJhbWUhXCIsIGlmcmFtZXNbaV0pO1xuICAgICAgY29uc3QgaWZyYW1lRG9jdW1lbnQgPVxuICAgICAgICBmcmFtZS5jb250ZW50RG9jdW1lbnQgfHwgZnJhbWUuY29udGVudFdpbmRvdz8uZG9jdW1lbnQ7XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGlmcmFtZUVsZW1lbnRzID0gWy4uLmlmcmFtZURvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpXTtcbiAgICAgIGlmcmFtZUVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiBlbC5zZXRBdHRyaWJ1dGUoXCJpZnJhbWVfaW5kZXhcIiwgaSkpO1xuICAgICAgYWxsRWxlbWVudHMucHVzaCguLi5pZnJhbWVFbGVtZW50cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gQ3Jvc3Mtb3JpZ2luIGlmcmFtZSBlcnJvclxuICAgICAgY29uc29sZS5lcnJvcihcIkNyb3NzLW9yaWdpbiBpZnJhbWU6XCIsIGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlnbm9yZSBhbGwgY2hpbGRyZW4gb2YgaW50ZXJhY3RhYmxlIGVsZW1lbnRzXG4gIGFsbEVsZW1lbnRzLm1hcCgoZWwpID0+IHtcbiAgICBpZiAoaXNJbnRlcmFjdGFibGUoZWwgYXMgRWxlbWVudCkpIHtcbiAgICAgIGVsLmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBhbGxFbGVtZW50cy5pbmRleE9mKGNoaWxkIGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICBhbGxFbGVtZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGlucHV0VGFncyA9IFtcImlucHV0XCIsIFwidGV4dGFyZWFcIiwgXCJzZWxlY3RcIl07XG5cbiAgZm9yIChsZXQgZWwgb2YgYWxsRWxlbWVudHMpIHtcbiAgICBpZiAoaXNFbXB0eShlbCkgfHwgIWVsSXNDbGVhbihlbCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGludHJhY3RhYmxlID0gaXNJbnRlcmFjdGFibGUoZWwpO1xuICAgIGNvbnN0IGVsVGFnTmFtZSA9IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBpZFN0ciA9IGlucHV0VGFncy5pbmNsdWRlcyhlbFRhZ05hbWUpID8gYHske2lkTnVtfX1gIDogYFske2lkTnVtfV1gO1xuICAgIGlkVG9YcGF0aFtpZE51bV0gPSBnZXRFbGVtZW50WFBhdGgoZWwpO1xuXG4gICAgLy8gY3JlYXRlIHRoZSBzcGFuIGZvciB0aGUgaWQgdGFnXG4gICAgbGV0IGlkU3BhbiA9IGNyZWF0ZV90YWdnZWRfc3BhbihpZFN0cik7XG5cbiAgICBpZiAoaW50cmFjdGFibGUpIHtcbiAgICAgIGlmICghaW5wdXRUYWdzLmluY2x1ZGVzKGVsVGFnTmFtZSkpIHtcbiAgICAgICAgZWwucHJlcGVuZChpZFNwYW4pO1xuICAgICAgfSBlbHNlIGlmIChlbFRhZ05hbWUgPT09IFwidGV4dGFyZWFcIiB8fCBlbFRhZ05hbWUgPT09IFwiaW5wdXRcIikge1xuICAgICAgICBlbC5wcmVwZW5kKGlkU3Bhbik7XG4gICAgICB9IGVsc2UgaWYgKGVsVGFnTmFtZSA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAvLyBsZWF2ZSBzZWxlY3QgYmxhbmsgLSB3ZSdsbCBnaXZlIGEgdGFnIElEIHRvIHRoZSBvcHRpb25zXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGFnTGVhZlRleHRzICYmXG4gICAgICAgIC9cXFMvLnRlc3QoZWwudGV4dENvbnRlbnQgfHwgXCJcIikgJiZcbiAgICAgICAgQXJyYXkuZnJvbShlbC5jaGlsZE5vZGVzKS5ldmVyeShcbiAgICAgICAgICAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUsXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgbGVhZiBlbGVtZW50IHdpdGggbm9uLXdoaXRlc3BhY2UgdGV4dFxuICAgICAgICBlbC5wcmVwZW5kKGlkU3Bhbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWROdW0rKztcbiAgfVxuXG4gIHJldHVybiBpZFRvWHBhdGg7XG59O1xuXG53aW5kb3cucmVtb3ZlVGFncyA9ICgpID0+IHtcbiAgY29uc3QgdGFncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjX190YXJzaWVyX2lkXCIpO1xuICB0YWdzLmZvckVhY2goKHRhZykgPT4gdGFnLnJlbW92ZSgpKTtcbn07XG4iXX0=