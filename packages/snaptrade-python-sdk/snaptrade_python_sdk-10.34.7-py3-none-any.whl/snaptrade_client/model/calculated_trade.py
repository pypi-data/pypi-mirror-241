# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class CalculatedTrade(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Array of trades to make to rebalance portfolio
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
            
            
            class trades(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Trade']:
                        return Trade
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Trade'], typing.List['Trade']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trades':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Trade':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "trades": trades,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trades"]) -> MetaOapg.properties.trades: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["trades"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trades"]) -> typing.Union[MetaOapg.properties.trades, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["trades"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        trades: typing.Union[MetaOapg.properties.trades, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CalculatedTrade':
        return super().__new__(
            cls,
            *args,
            id=id,
            trades=trades,
            _configuration=_configuration,
            **kwargs,
        )

from snaptrade_client.model.account import Account
from snaptrade_client.model.account_balance import AccountBalance
from snaptrade_client.model.account_meta import AccountMeta
from snaptrade_client.model.account_sync_status import AccountSyncStatus
from snaptrade_client.model.brokerage import Brokerage
from snaptrade_client.model.brokerage_authorization import BrokerageAuthorization
from snaptrade_client.model.brokerage_authorization_meta import BrokerageAuthorizationMeta
from snaptrade_client.model.brokerage_exchanges import BrokerageExchanges
from snaptrade_client.model.brokerage_symbol import BrokerageSymbol
from snaptrade_client.model.brokerage_type import BrokerageType
from snaptrade_client.model.cash_restriction import CashRestriction
from snaptrade_client.model.currency import Currency
from snaptrade_client.model.exchange import Exchange
from snaptrade_client.model.options_symbol import OptionsSymbol
from snaptrade_client.model.security_type import SecurityType
from snaptrade_client.model.trade import Trade
from snaptrade_client.model.underlying_symbol import UnderlyingSymbol
from snaptrade_client.model.universal_symbol import UniversalSymbol
from snaptrade_client.model.us_exchange import USExchange
