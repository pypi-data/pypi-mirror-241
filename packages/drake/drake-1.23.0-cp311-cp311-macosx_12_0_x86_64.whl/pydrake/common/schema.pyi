from typing import ClassVar, List, Optional, Union

from typing import overload
import numpy
import pydrake.common
import pydrake.math
import pydrake.symbolic
DeterministicVector: pydrake.common.cpp_template.TemplateClass
GaussianVector: pydrake.common.cpp_template.TemplateClass
UniformVector: pydrake.common.cpp_template.TemplateClass

class Deterministic(Distribution):
    __fields__: ClassVar[tuple] = ...  # read-only
    value: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Deterministic) -> None: ...
    @overload
    def __init__(self, value: float) -> None: ...
    def __copy__(self) -> Deterministic: ...
    def __deepcopy__(self, arg0: dict) -> Deterministic: ...

class DeterministicVectorX(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣None𝓤: ...

class DeterministicVector𝓣1𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[1,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣1𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[1,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣1𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣1𝓤: ...

class DeterministicVector𝓣2𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[2,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣2𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[2,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣2𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣2𝓤: ...

class DeterministicVector𝓣3𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[3,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣3𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣3𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣3𝓤: ...

class DeterministicVector𝓣4𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[4,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣4𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[4,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣4𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣4𝓤: ...

class DeterministicVector𝓣5𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[5,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣5𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[5,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣5𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣5𝓤: ...

class DeterministicVector𝓣6𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[6,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣6𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣6𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣6𝓤: ...

class DeterministicVector𝓣None𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣None𝓤: ...

class Distribution:
    def __init__(self, *args, **kwargs) -> None: ...
    def Mean(self) -> float: ...
    def Sample(self, generator: pydrake.common.RandomGenerator) -> float: ...
    def ToSymbolic(self) -> pydrake.symbolic.Expression: ...

class DistributionVector:
    def __init__(self, *args, **kwargs) -> None: ...
    def Mean(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def Sample(self, generator: pydrake.common.RandomGenerator) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def ToSymbolic(self) -> numpy.ndarray[object[m,1]]: ...

class Gaussian(Distribution):
    __fields__: ClassVar[tuple] = ...  # read-only
    mean: float
    stddev: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Gaussian) -> None: ...
    @overload
    def __init__(self, mean: float, stddev: float) -> None: ...
    def __copy__(self) -> Gaussian: ...
    def __deepcopy__(self, arg0: dict) -> Gaussian: ...

class GaussianVectorX(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[m,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[m,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣None𝓤: ...

class GaussianVector𝓣1𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[1,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣1𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[1,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣1𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣1𝓤: ...

class GaussianVector𝓣2𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[2,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣2𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[2,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣2𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣2𝓤: ...

class GaussianVector𝓣3𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[3,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣3𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[3,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣3𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣3𝓤: ...

class GaussianVector𝓣4𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[4,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣4𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[4,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣4𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣4𝓤: ...

class GaussianVector𝓣5𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[5,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣5𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[5,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣5𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣5𝓤: ...

class GaussianVector𝓣6𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[6,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣6𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[6,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣6𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣6𝓤: ...

class GaussianVector𝓣None𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[m,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[m,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣None𝓤: ...

class Rotation:
    class AngleAxis:
        __fields__: ClassVar[tuple] = ...  # read-only
        angle_deg: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]
        axis: Union[numpy.ndarray[numpy.float64[3,1]],DeterministicVector𝓣3𝓤,GaussianVector𝓣3𝓤,UniformVector𝓣3𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]
        @overload
        def __init__(self, other: Rotation.AngleAxis) -> None: ...
        @overload
        def __init__(self, **kwargs) -> None: ...
        def __copy__(self) -> Rotation.AngleAxis: ...
        def __deepcopy__(self, arg0: dict) -> Rotation.AngleAxis: ...

    class Identity:
        __fields__: ClassVar[tuple] = ...  # read-only
        @overload
        def __init__(self, other: Rotation.Identity) -> None: ...
        @overload
        def __init__(self, **kwargs) -> None: ...
        def __copy__(self) -> Rotation.Identity: ...
        def __deepcopy__(self, arg0: dict) -> Rotation.Identity: ...

    class Rpy:
        __fields__: ClassVar[tuple] = ...  # read-only
        deg: Union[numpy.ndarray[numpy.float64[3,1]],DeterministicVector𝓣3𝓤,GaussianVector𝓣3𝓤,UniformVector𝓣3𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]
        @overload
        def __init__(self, other: Rotation.Rpy) -> None: ...
        @overload
        def __init__(self, **kwargs) -> None: ...
        def __copy__(self) -> Rotation.Rpy: ...
        def __deepcopy__(self, arg0: dict) -> Rotation.Rpy: ...

    class Uniform:
        __fields__: ClassVar[tuple] = ...  # read-only
        @overload
        def __init__(self, other: Rotation.Uniform) -> None: ...
        @overload
        def __init__(self, **kwargs) -> None: ...
        def __copy__(self) -> Rotation.Uniform: ...
        def __deepcopy__(self, arg0: dict) -> Rotation.Uniform: ...
    __fields__: ClassVar[tuple] = ...  # read-only
    value: Union[Rotation.Identity,Rotation.Rpy,Rotation.AngleAxis,Rotation.Uniform]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Rotation) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.math.RotationMatrix) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.math.RollPitchYaw) -> None: ...
    @overload
    def __init__(self, **kwargs) -> None: ...
    def GetDeterministicValue(self) -> pydrake.math.RotationMatrix: ...
    def IsDeterministic(self) -> bool: ...
    def ToSymbolic(self) -> pydrake.math.RotationMatrix_𝓣Expression𝓤: ...
    def set_rpy_deg(self, rpy_deg: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    def __copy__(self) -> Rotation: ...
    def __deepcopy__(self, arg0: dict) -> Rotation: ...
    def __getattr__(self, arg0: str) -> object: ...
    def __setattr__(self, arg0: str, arg1: object) -> None: ...

class Transform:
    __fields__: ClassVar[tuple] = ...  # read-only
    base_frame: Optional[str]
    rotation: Rotation
    translation: Union[numpy.ndarray[numpy.float64[3,1]],DeterministicVector𝓣3𝓤,GaussianVector𝓣3𝓤,UniformVector𝓣3𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Transform) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.math.RigidTransform) -> None: ...
    @overload
    def __init__(self, **kwargs) -> None: ...
    def GetDeterministicValue(self) -> pydrake.math.RigidTransform: ...
    def IsDeterministic(self) -> bool: ...
    def Mean(self) -> pydrake.math.RigidTransform: ...
    def Sample(self, generator: pydrake.common.RandomGenerator) -> pydrake.math.RigidTransform: ...
    def ToSymbolic(self) -> pydrake.math.RigidTransform_𝓣Expression𝓤: ...
    def set_rotation_rpy_deg(self, rpy_deg: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    def __copy__(self) -> Transform: ...
    def __deepcopy__(self, arg0: dict) -> Transform: ...

class Uniform(Distribution):
    __fields__: ClassVar[tuple] = ...  # read-only
    max: float
    min: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Uniform) -> None: ...
    @overload
    def __init__(self, min: float, max: float) -> None: ...
    def __copy__(self) -> Uniform: ...
    def __deepcopy__(self, arg0: dict) -> Uniform: ...

class UniformDiscrete(Distribution):
    __fields__: ClassVar[tuple] = ...  # read-only
    values: List[float]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformDiscrete) -> None: ...
    @overload
    def __init__(self, values: List[float]) -> None: ...
    def __copy__(self) -> UniformDiscrete: ...
    def __deepcopy__(self, arg0: dict) -> UniformDiscrete: ...

class UniformVectorX(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[m,1]]
    min: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[m,1]], max: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣None𝓤: ...

class UniformVector𝓣1𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[1,1]]
    min: numpy.ndarray[numpy.float64[1,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣1𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[1,1]], max: numpy.ndarray[numpy.float64[1,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣1𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣1𝓤: ...

class UniformVector𝓣2𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[2,1]]
    min: numpy.ndarray[numpy.float64[2,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣2𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[2,1]], max: numpy.ndarray[numpy.float64[2,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣2𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣2𝓤: ...

class UniformVector𝓣3𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[3,1]]
    min: numpy.ndarray[numpy.float64[3,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣3𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[3,1]], max: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣3𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣3𝓤: ...

class UniformVector𝓣4𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[4,1]]
    min: numpy.ndarray[numpy.float64[4,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣4𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[4,1]], max: numpy.ndarray[numpy.float64[4,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣4𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣4𝓤: ...

class UniformVector𝓣5𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[5,1]]
    min: numpy.ndarray[numpy.float64[5,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣5𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[5,1]], max: numpy.ndarray[numpy.float64[5,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣5𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣5𝓤: ...

class UniformVector𝓣6𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[6,1]]
    min: numpy.ndarray[numpy.float64[6,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣6𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[6,1]], max: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣6𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣6𝓤: ...

class UniformVector𝓣None𝓤(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[m,1]]
    min: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[m,1]], max: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣None𝓤: ...

class _InvalidVariantSelectionDeterministic:
    def __init__(self, *args, **kwargs) -> None: ...

class _InvalidVariantSelectionGaussian:
    def __init__(self, *args, **kwargs) -> None: ...

class _InvalidVariantSelectionUniform:
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake6schema13UniformVectorILi1EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[1,1]]
    min: numpy.ndarray[numpy.float64[1,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣1𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[1,1]], max: numpy.ndarray[numpy.float64[1,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣1𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣1𝓤: ...

class _TemporaryName_N5drake6schema13UniformVectorILi2EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[2,1]]
    min: numpy.ndarray[numpy.float64[2,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣2𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[2,1]], max: numpy.ndarray[numpy.float64[2,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣2𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣2𝓤: ...

class _TemporaryName_N5drake6schema13UniformVectorILi3EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[3,1]]
    min: numpy.ndarray[numpy.float64[3,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣3𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[3,1]], max: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣3𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣3𝓤: ...

class _TemporaryName_N5drake6schema13UniformVectorILi4EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[4,1]]
    min: numpy.ndarray[numpy.float64[4,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣4𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[4,1]], max: numpy.ndarray[numpy.float64[4,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣4𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣4𝓤: ...

class _TemporaryName_N5drake6schema13UniformVectorILi5EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[5,1]]
    min: numpy.ndarray[numpy.float64[5,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣5𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[5,1]], max: numpy.ndarray[numpy.float64[5,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣5𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣5𝓤: ...

class _TemporaryName_N5drake6schema13UniformVectorILi6EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[6,1]]
    min: numpy.ndarray[numpy.float64[6,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣6𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[6,1]], max: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣6𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣6𝓤: ...

class _TemporaryName_N5drake6schema13UniformVectorILin1EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    max: numpy.ndarray[numpy.float64[m,1]]
    min: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[m,1]], max: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> UniformVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> UniformVector𝓣None𝓤: ...

class _TemporaryName_N5drake6schema14GaussianVectorILi1EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[1,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣1𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[1,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣1𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣1𝓤: ...

class _TemporaryName_N5drake6schema14GaussianVectorILi2EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[2,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣2𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[2,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣2𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣2𝓤: ...

class _TemporaryName_N5drake6schema14GaussianVectorILi3EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[3,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣3𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[3,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣3𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣3𝓤: ...

class _TemporaryName_N5drake6schema14GaussianVectorILi4EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[4,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣4𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[4,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣4𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣4𝓤: ...

class _TemporaryName_N5drake6schema14GaussianVectorILi5EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[5,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣5𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[5,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣5𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣5𝓤: ...

class _TemporaryName_N5drake6schema14GaussianVectorILi6EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[6,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣6𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[6,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣6𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣6𝓤: ...

class _TemporaryName_N5drake6schema14GaussianVectorILin1EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    mean: numpy.ndarray[numpy.float64[m,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[m,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVector𝓣None𝓤: ...

class _TemporaryName_N5drake6schema19DeterministicVectorILi1EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[1,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣1𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[1,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣1𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣1𝓤: ...

class _TemporaryName_N5drake6schema19DeterministicVectorILi2EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[2,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣2𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[2,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣2𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣2𝓤: ...

class _TemporaryName_N5drake6schema19DeterministicVectorILi3EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[3,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣3𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣3𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣3𝓤: ...

class _TemporaryName_N5drake6schema19DeterministicVectorILi4EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[4,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣4𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[4,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣4𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣4𝓤: ...

class _TemporaryName_N5drake6schema19DeterministicVectorILi5EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[5,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣5𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[5,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣5𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣5𝓤: ...

class _TemporaryName_N5drake6schema19DeterministicVectorILi6EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[6,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣6𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣6𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣6𝓤: ...

class _TemporaryName_N5drake6schema19DeterministicVectorILin1EEE(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    value: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVector𝓣None𝓤) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> DeterministicVector𝓣None𝓤: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVector𝓣None𝓤: ...

@overload
def GetDeterministicValue(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> float: ...
@overload
def GetDeterministicValue(vec: Union[numpy.ndarray[numpy.float64[m,1]],DeterministicVector𝓣None𝓤,GaussianVector𝓣None𝓤,UniformVector𝓣None𝓤,Deterministic,Gaussian,Uniform]) -> numpy.ndarray[numpy.float64[m,1]]: ...
@overload
def GetDeterministicValue(vec: Union[numpy.ndarray[numpy.float64[1,1]],DeterministicVector𝓣1𝓤,GaussianVector𝓣1𝓤,UniformVector𝓣1𝓤,Deterministic,Gaussian,Uniform]) -> numpy.ndarray[numpy.float64[m,1]]: ...
@overload
def GetDeterministicValue(vec: Union[numpy.ndarray[numpy.float64[2,1]],DeterministicVector𝓣2𝓤,GaussianVector𝓣2𝓤,UniformVector𝓣2𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> numpy.ndarray[numpy.float64[m,1]]: ...
@overload
def GetDeterministicValue(vec: Union[numpy.ndarray[numpy.float64[3,1]],DeterministicVector𝓣3𝓤,GaussianVector𝓣3𝓤,UniformVector𝓣3𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> numpy.ndarray[numpy.float64[m,1]]: ...
@overload
def GetDeterministicValue(vec: Union[numpy.ndarray[numpy.float64[4,1]],DeterministicVector𝓣4𝓤,GaussianVector𝓣4𝓤,UniformVector𝓣4𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> numpy.ndarray[numpy.float64[m,1]]: ...
@overload
def GetDeterministicValue(vec: Union[numpy.ndarray[numpy.float64[5,1]],DeterministicVector𝓣5𝓤,GaussianVector𝓣5𝓤,UniformVector𝓣5𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> numpy.ndarray[numpy.float64[m,1]]: ...
@overload
def GetDeterministicValue(vec: Union[numpy.ndarray[numpy.float64[6,1]],DeterministicVector𝓣6𝓤,GaussianVector𝓣6𝓤,UniformVector𝓣6𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> numpy.ndarray[numpy.float64[m,1]]: ...
@overload
def IsDeterministic(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> bool: ...
@overload
def IsDeterministic(vec: Union[numpy.ndarray[numpy.float64[m,1]],DeterministicVector𝓣None𝓤,GaussianVector𝓣None𝓤,UniformVector𝓣None𝓤,Deterministic,Gaussian,Uniform]) -> bool: ...
@overload
def IsDeterministic(vec: Union[numpy.ndarray[numpy.float64[1,1]],DeterministicVector𝓣1𝓤,GaussianVector𝓣1𝓤,UniformVector𝓣1𝓤,Deterministic,Gaussian,Uniform]) -> bool: ...
@overload
def IsDeterministic(vec: Union[numpy.ndarray[numpy.float64[2,1]],DeterministicVector𝓣2𝓤,GaussianVector𝓣2𝓤,UniformVector𝓣2𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> bool: ...
@overload
def IsDeterministic(vec: Union[numpy.ndarray[numpy.float64[3,1]],DeterministicVector𝓣3𝓤,GaussianVector𝓣3𝓤,UniformVector𝓣3𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> bool: ...
@overload
def IsDeterministic(vec: Union[numpy.ndarray[numpy.float64[4,1]],DeterministicVector𝓣4𝓤,GaussianVector𝓣4𝓤,UniformVector𝓣4𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> bool: ...
@overload
def IsDeterministic(vec: Union[numpy.ndarray[numpy.float64[5,1]],DeterministicVector𝓣5𝓤,GaussianVector𝓣5𝓤,UniformVector𝓣5𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> bool: ...
@overload
def IsDeterministic(vec: Union[numpy.ndarray[numpy.float64[6,1]],DeterministicVector𝓣6𝓤,GaussianVector𝓣6𝓤,UniformVector𝓣6𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> bool: ...
def Mean(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> float: ...
def Sample(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete], generator: pydrake.common.RandomGenerator) -> float: ...
def ToDistribution(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> Distribution: ...
@overload
def ToDistributionVector(vec: Union[numpy.ndarray[numpy.float64[m,1]],DeterministicVector𝓣None𝓤,GaussianVector𝓣None𝓤,UniformVector𝓣None𝓤,Deterministic,Gaussian,Uniform]) -> DistributionVector: ...
@overload
def ToDistributionVector(vec: Union[numpy.ndarray[numpy.float64[1,1]],DeterministicVector𝓣1𝓤,GaussianVector𝓣1𝓤,UniformVector𝓣1𝓤,Deterministic,Gaussian,Uniform]) -> DistributionVector: ...
@overload
def ToDistributionVector(vec: Union[numpy.ndarray[numpy.float64[2,1]],DeterministicVector𝓣2𝓤,GaussianVector𝓣2𝓤,UniformVector𝓣2𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> DistributionVector: ...
@overload
def ToDistributionVector(vec: Union[numpy.ndarray[numpy.float64[3,1]],DeterministicVector𝓣3𝓤,GaussianVector𝓣3𝓤,UniformVector𝓣3𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> DistributionVector: ...
@overload
def ToDistributionVector(vec: Union[numpy.ndarray[numpy.float64[4,1]],DeterministicVector𝓣4𝓤,GaussianVector𝓣4𝓤,UniformVector𝓣4𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> DistributionVector: ...
@overload
def ToDistributionVector(vec: Union[numpy.ndarray[numpy.float64[5,1]],DeterministicVector𝓣5𝓤,GaussianVector𝓣5𝓤,UniformVector𝓣5𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> DistributionVector: ...
@overload
def ToDistributionVector(vec: Union[numpy.ndarray[numpy.float64[6,1]],DeterministicVector𝓣6𝓤,GaussianVector𝓣6𝓤,UniformVector𝓣6𝓤,_InvalidVariantSelectionDeterministic,_InvalidVariantSelectionGaussian,_InvalidVariantSelectionUniform]) -> DistributionVector: ...
def ToSymbolic(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> pydrake.symbolic.Expression: ...
