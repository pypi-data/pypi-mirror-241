from typing import Any, ClassVar, Optional, Tuple, Union

from typing import overload
import flags
import numpy
import pydrake.common
import pydrake.common.schema
import pydrake.common.value
import pydrake.geometry
import pydrake.math
import pydrake.systems.framework
Image: pydrake.common.cpp_template.TemplateClass
ImageTraits: pydrake.common.cpp_template.TemplateClass

class CameraConfig:
    class FocalLength:
        __fields__: ClassVar[tuple] = ...  # read-only
        x: Optional[float]
        y: Optional[float]
        def __init__(self, **kwargs) -> None: ...
        def __copy__(self) -> CameraConfig.FocalLength: ...
        def __deepcopy__(self, arg0: dict) -> CameraConfig.FocalLength: ...

    class FovDegrees:
        __fields__: ClassVar[tuple] = ...  # read-only
        x: Optional[float]
        y: Optional[float]
        def __init__(self, **kwargs) -> None: ...
        def __copy__(self) -> CameraConfig.FovDegrees: ...
        def __deepcopy__(self, arg0: dict) -> CameraConfig.FovDegrees: ...
    __fields__: ClassVar[tuple] = ...  # read-only
    X_BC: pydrake.common.schema.Transform
    X_BD: pydrake.common.schema.Transform
    X_PB: pydrake.common.schema.Transform
    background: pydrake.geometry.Rgba
    capture_offset: float
    center_x: Optional[float]
    center_y: Optional[float]
    clipping_far: float
    clipping_near: float
    depth: bool
    do_compress: bool
    focal: Union[CameraConfig.FocalLength,CameraConfig.FovDegrees]
    fps: float
    height: Any
    lcm_bus: str
    name: str
    output_delay: float
    renderer_class: Union[str,pydrake.geometry.RenderEngineVtkParams,pydrake.geometry.RenderEngineGlParams,pydrake.geometry.RenderEngineGltfClientParams]
    renderer_name: str
    rgb: bool
    show_rgb: bool
    width: Any
    z_far: float
    z_near: float
    def __init__(self, **kwargs) -> None: ...
    def MakeCameras(self) -> Tuple[pydrake.geometry.ColorRenderCamera,pydrake.geometry.DepthRenderCamera]: ...
    def focal_x(self) -> float: ...
    def focal_y(self) -> float: ...
    def principal_point(self) -> numpy.ndarray[numpy.float64[2,1]]: ...
    def __copy__(self) -> CameraConfig: ...
    def __deepcopy__(self, arg0: dict) -> CameraConfig: ...

class CameraInfo:
    @overload
    def __init__(self, width: int, height: int, fov_y: float) -> None: ...
    @overload
    def __init__(self, width: int, height: int, intrinsic_matrix: numpy.ndarray[numpy.float64[3,3]]) -> None: ...
    @overload
    def __init__(self, width: int, height: int, focal_x: float, focal_y: float, center_x: float, center_y: float) -> None: ...
    def center_x(self) -> float: ...
    def center_y(self) -> float: ...
    def focal_x(self) -> float: ...
    def focal_y(self) -> float: ...
    def fov_x(self) -> float: ...
    def fov_y(self) -> float: ...
    def height(self) -> int: ...
    def intrinsic_matrix(self) -> numpy.ndarray[numpy.float64[3,3]]: ...
    def width(self) -> int: ...
    def __getstate__(self) -> tuple: ...
    def __setstate__(self, arg0: tuple) -> None: ...

class ImageBgr8U:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class ImageBgra8U:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class ImageDepth16U:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint16[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class ImageDepth32F:
    class Traits:
        class ChannelType(numpy.floating):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def is_integer(self) -> bool: ...
            @overload
            def is_integer(self) -> Any: ...
            @overload
            def is_integer(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __int__(self) -> int: ...
            def __le__(self, other) -> bool: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: float) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.float32[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class ImageFileFormat:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kJpeg: ClassVar[ImageFileFormat] = ...
    kPng: ClassVar[ImageFileFormat] = ...
    kTiff: ClassVar[ImageFileFormat] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ImageGrey8U:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class ImageLabel16I:
    class Traits:
        class ChannelType(numpy.signedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.int16[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class ImageRgb8U:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class ImageRgba8U:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class ImageToLcmImageArrayT(pydrake.systems.framework.LeafSystem):
    DeclareImageInputPort: Any
    @overload
    def __init__(self, color_frame_name: str, depth_frame_name: str, label_frame_name: str, do_compress: bool = ...) -> None: ...
    @overload
    def __init__(self, do_compress: bool = ...) -> None: ...
    def DeclareImageInputPort𝓣PixelType𝓹kBgr8U𝓤(self, name: str) -> pydrake.systems.framework.InputPort: ...
    def DeclareImageInputPort𝓣PixelType𝓹kBgra8U𝓤(self, name: str) -> pydrake.systems.framework.InputPort: ...
    def DeclareImageInputPort𝓣PixelType𝓹kDepth16U𝓤(self, name: str) -> pydrake.systems.framework.InputPort: ...
    def DeclareImageInputPort𝓣PixelType𝓹kDepth32F𝓤(self, name: str) -> pydrake.systems.framework.InputPort: ...
    def DeclareImageInputPort𝓣PixelType𝓹kGrey8U𝓤(self, name: str) -> pydrake.systems.framework.InputPort: ...
    def DeclareImageInputPort𝓣PixelType𝓹kLabel16I𝓤(self, name: str) -> pydrake.systems.framework.InputPort: ...
    def DeclareImageInputPort𝓣PixelType𝓹kRgb8U𝓤(self, name: str) -> pydrake.systems.framework.InputPort: ...
    def DeclareImageInputPort𝓣PixelType𝓹kRgba8U𝓤(self, name: str) -> pydrake.systems.framework.InputPort: ...
    def color_image_input_port(self) -> pydrake.systems.framework.InputPort: ...
    def depth_image_input_port(self) -> pydrake.systems.framework.InputPort: ...
    def image_array_t_msg_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def label_image_input_port(self) -> pydrake.systems.framework.InputPort: ...

class ImageTraits𝓣PixelType𝓹kBgr8U𝓤:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ImageTraits𝓣PixelType𝓹kBgra8U𝓤:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ImageTraits𝓣PixelType𝓹kDepth16U𝓤:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ImageTraits𝓣PixelType𝓹kDepth32F𝓤:
    class ChannelType(numpy.floating):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def is_integer(self) -> bool: ...
        @overload
        def is_integer(self) -> Any: ...
        @overload
        def is_integer(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ImageTraits𝓣PixelType𝓹kGrey8U𝓤:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ImageTraits𝓣PixelType𝓹kLabel16I𝓤:
    class ChannelType(numpy.signedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ImageTraits𝓣PixelType𝓹kRgb8U𝓤:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ImageTraits𝓣PixelType𝓹kRgba8U𝓤:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ImageWriter(pydrake.systems.framework.LeafSystem):
    def __init__(self) -> None: ...
    def DeclareImageInputPort(self, pixel_type: PixelType, port_name: str, file_name_format: str, publish_period: float, start_time: float) -> pydrake.systems.framework.InputPort: ...
    def ResetAllImageCounts(self) -> None: ...

class Image𝓣PixelType𝓹kBgr8U𝓤:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class Image𝓣PixelType𝓹kBgra8U𝓤:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class Image𝓣PixelType𝓹kDepth16U𝓤:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint16[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class Image𝓣PixelType𝓹kDepth32F𝓤:
    class Traits:
        class ChannelType(numpy.floating):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def is_integer(self) -> bool: ...
            @overload
            def is_integer(self) -> Any: ...
            @overload
            def is_integer(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __int__(self) -> int: ...
            def __le__(self, other) -> bool: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: float) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.float32[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class Image𝓣PixelType𝓹kGrey8U𝓤:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class Image𝓣PixelType𝓹kLabel16I𝓤:
    class Traits:
        class ChannelType(numpy.signedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.int16[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class Image𝓣PixelType𝓹kRgb8U𝓤:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class Image𝓣PixelType𝓹kRgba8U𝓤:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class LcmImageArrayToImages(pydrake.systems.framework.LeafSystem):
    def __init__(self) -> None: ...
    def color_image_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def depth_image_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def image_array_t_input_port(self) -> pydrake.systems.framework.InputPort: ...

class PixelFormat:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kBgr: ClassVar[PixelFormat] = ...
    kBgra: ClassVar[PixelFormat] = ...
    kDepth: ClassVar[PixelFormat] = ...
    kGrey: ClassVar[PixelFormat] = ...
    kLabel: ClassVar[PixelFormat] = ...
    kRgb: ClassVar[PixelFormat] = ...
    kRgba: ClassVar[PixelFormat] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PixelScalar:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    k16I: ClassVar[PixelScalar] = ...
    k16U: ClassVar[PixelScalar] = ...
    k32F: ClassVar[PixelScalar] = ...
    k8U: ClassVar[PixelScalar] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PixelType:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kBgr8U: ClassVar[PixelType] = ...
    kBgra8U: ClassVar[PixelType] = ...
    kDepth16U: ClassVar[PixelType] = ...
    kDepth32F: ClassVar[PixelType] = ...
    kGrey8U: ClassVar[PixelType] = ...
    kLabel16I: ClassVar[PixelType] = ...
    kRgb8U: ClassVar[PixelType] = ...
    kRgba8U: ClassVar[PixelType] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RgbdSensor(pydrake.systems.framework.LeafSystem):
    @overload
    def __init__(self, parent_id: pydrake.geometry.FrameId, X_PB: pydrake.math.RigidTransform, color_camera: pydrake.geometry.ColorRenderCamera, depth_camera: pydrake.geometry.DepthRenderCamera) -> None: ...
    @overload
    def __init__(self, parent_id: pydrake.geometry.FrameId, X_PB: pydrake.math.RigidTransform, depth_camera: pydrake.geometry.DepthRenderCamera, show_window: bool = ...) -> None: ...
    def X_BC(self) -> pydrake.math.RigidTransform: ...
    def X_BD(self) -> pydrake.math.RigidTransform: ...
    def body_pose_in_world_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def color_camera_info(self) -> CameraInfo: ...
    def color_image_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def depth_camera_info(self) -> CameraInfo: ...
    def depth_image_16U_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def depth_image_32F_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def image_time_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def label_image_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def parent_frame_id(self) -> pydrake.geometry.FrameId: ...
    def query_object_input_port(self) -> pydrake.systems.framework.InputPort: ...

class RgbdSensorAsync(pydrake.systems.framework.LeafSystem):
    def __init__(self, scene_graph: pydrake.geometry.SceneGraph, parent_id: pydrake.geometry.FrameId, X_PB: pydrake.math.RigidTransform, fps: float, capture_offset: float, output_delay: float, color_camera: Optional[pydrake.geometry.ColorRenderCamera], depth_camera: Optional[pydrake.geometry.DepthRenderCamera] = ..., render_label_image: bool = ...) -> None: ...
    def X_PB(self) -> pydrake.math.RigidTransform: ...
    def body_pose_in_world_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def capture_offset(self) -> float: ...
    def color_camera(self) -> Optional[pydrake.geometry.ColorRenderCamera]: ...
    def color_image_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def depth_camera(self) -> Optional[pydrake.geometry.DepthRenderCamera]: ...
    def depth_image_16U_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def depth_image_32F_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def fps(self) -> float: ...
    def image_time_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def label_image_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def output_delay(self) -> float: ...
    def parent_id(self) -> pydrake.geometry.FrameId: ...

class RgbdSensorDiscrete(pydrake.systems.framework.Diagram):
    kDefaultPeriod: ClassVar[float] = ...
    def __init__(self, sensor: RgbdSensor, period: float = ..., render_label_image: bool = ...) -> None: ...
    @overload
    def body_pose_in_world_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    @overload
    def body_pose_in_world_output_port(self) -> Any: ...
    @overload
    def color_image_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    @overload
    def color_image_output_port(self) -> Any: ...
    @overload
    def depth_image_16U_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    @overload
    def depth_image_16U_output_port(self) -> Any: ...
    @overload
    def depth_image_32F_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    @overload
    def depth_image_32F_output_port(self) -> Any: ...
    def image_time_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    @overload
    def label_image_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    @overload
    def label_image_output_port(self) -> Any: ...
    def period(self) -> float: ...
    @overload
    def query_object_input_port(self) -> pydrake.systems.framework.InputPort: ...
    @overload
    def query_object_input_port(self) -> Any: ...
    def sensor(self) -> RgbdSensor: ...

class _TemporaryName_N5drake5ValueINS_7systems7sensors5ImageILNS2_9PixelTypeE0EEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: Image𝓣PixelType𝓹kRgb8U𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> Image𝓣PixelType𝓹kRgb8U𝓤: ...
    def get_value(self) -> Image𝓣PixelType𝓹kRgb8U𝓤: ...
    def set_value(self, arg0: Image𝓣PixelType𝓹kRgb8U𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems7sensors5ImageILNS2_9PixelTypeE1EEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: Image𝓣PixelType𝓹kBgr8U𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> Image𝓣PixelType𝓹kBgr8U𝓤: ...
    def get_value(self) -> Image𝓣PixelType𝓹kBgr8U𝓤: ...
    def set_value(self, arg0: Image𝓣PixelType𝓹kBgr8U𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems7sensors5ImageILNS2_9PixelTypeE2EEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: Image𝓣PixelType𝓹kRgba8U𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> Image𝓣PixelType𝓹kRgba8U𝓤: ...
    def get_value(self) -> Image𝓣PixelType𝓹kRgba8U𝓤: ...
    def set_value(self, arg0: Image𝓣PixelType𝓹kRgba8U𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems7sensors5ImageILNS2_9PixelTypeE3EEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: Image𝓣PixelType𝓹kBgra8U𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> Image𝓣PixelType𝓹kBgra8U𝓤: ...
    def get_value(self) -> Image𝓣PixelType𝓹kBgra8U𝓤: ...
    def set_value(self, arg0: Image𝓣PixelType𝓹kBgra8U𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems7sensors5ImageILNS2_9PixelTypeE4EEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: Image𝓣PixelType𝓹kGrey8U𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> Image𝓣PixelType𝓹kGrey8U𝓤: ...
    def get_value(self) -> Image𝓣PixelType𝓹kGrey8U𝓤: ...
    def set_value(self, arg0: Image𝓣PixelType𝓹kGrey8U𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems7sensors5ImageILNS2_9PixelTypeE5EEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: Image𝓣PixelType𝓹kDepth16U𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> Image𝓣PixelType𝓹kDepth16U𝓤: ...
    def get_value(self) -> Image𝓣PixelType𝓹kDepth16U𝓤: ...
    def set_value(self, arg0: Image𝓣PixelType𝓹kDepth16U𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems7sensors5ImageILNS2_9PixelTypeE6EEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: Image𝓣PixelType𝓹kDepth32F𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> Image𝓣PixelType𝓹kDepth32F𝓤: ...
    def get_value(self) -> Image𝓣PixelType𝓹kDepth32F𝓤: ...
    def set_value(self, arg0: Image𝓣PixelType𝓹kDepth32F𝓤) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems7sensors5ImageILNS2_9PixelTypeE7EEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: Image𝓣PixelType𝓹kLabel16I𝓤) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> Image𝓣PixelType𝓹kLabel16I𝓤: ...
    def get_value(self) -> Image𝓣PixelType𝓹kLabel16I𝓤: ...
    def set_value(self, arg0: Image𝓣PixelType𝓹kLabel16I𝓤) -> None: ...

class _TemporaryName_N5drake7systems7sensors11ImageTraitsILNS1_9PixelTypeE0EEE:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems7sensors11ImageTraitsILNS1_9PixelTypeE1EEE:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems7sensors11ImageTraitsILNS1_9PixelTypeE2EEE:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems7sensors11ImageTraitsILNS1_9PixelTypeE3EEE:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems7sensors11ImageTraitsILNS1_9PixelTypeE4EEE:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems7sensors11ImageTraitsILNS1_9PixelTypeE5EEE:
    class ChannelType(numpy.unsignedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems7sensors11ImageTraitsILNS1_9PixelTypeE6EEE:
    class ChannelType(numpy.floating):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def is_integer(self) -> bool: ...
        @overload
        def is_integer(self) -> Any: ...
        @overload
        def is_integer(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __int__(self) -> int: ...
        def __le__(self, other) -> bool: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems7sensors11ImageTraitsILNS1_9PixelTypeE7EEE:
    class ChannelType(numpy.signedinteger):
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def bit_count(self) -> int: ...
        @overload
        def bit_count(self) -> Any: ...
        @overload
        def bit_count(self) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> bool: ...
        @classmethod
        def __class_getitem__(cls, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> bool: ...
        def __float__(self) -> float: ...
        def __floordiv__(self, other) -> Any: ...
        def __ge__(self, other) -> bool: ...
        def __gt__(self, other) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> bool: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> bool: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> bool: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    kNumChannels: ClassVar[int] = ...
    kPixelFormat: ClassVar[PixelFormat] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems7sensors5ImageILNS1_9PixelTypeE0EEE:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class _TemporaryName_N5drake7systems7sensors5ImageILNS1_9PixelTypeE1EEE:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class _TemporaryName_N5drake7systems7sensors5ImageILNS1_9PixelTypeE2EEE:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class _TemporaryName_N5drake7systems7sensors5ImageILNS1_9PixelTypeE3EEE:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class _TemporaryName_N5drake7systems7sensors5ImageILNS1_9PixelTypeE4EEE:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint8[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class _TemporaryName_N5drake7systems7sensors5ImageILNS1_9PixelTypeE5EEE:
    class Traits:
        class ChannelType(numpy.unsignedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.uint16[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class _TemporaryName_N5drake7systems7sensors5ImageILNS1_9PixelTypeE6EEE:
    class Traits:
        class ChannelType(numpy.floating):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def as_integer_ratio(self) -> Any: ...
            @overload
            def is_integer(self) -> bool: ...
            @overload
            def is_integer(self) -> Any: ...
            @overload
            def is_integer(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __int__(self) -> int: ...
            def __le__(self, other) -> bool: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: float) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.float32[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

class _TemporaryName_N5drake7systems7sensors5ImageILNS1_9PixelTypeE7EEE:
    class Traits:
        class ChannelType(numpy.signedinteger):
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            @overload
            def bit_count(self) -> int: ...
            @overload
            def bit_count(self) -> Any: ...
            @overload
            def bit_count(self) -> Any: ...
            def __abs__(self) -> Any: ...
            def __add__(self, other) -> Any: ...
            def __and__(self, other) -> Any: ...
            def __bool__(self) -> bool: ...
            @classmethod
            def __class_getitem__(cls, *args, **kwargs) -> Any: ...
            def __divmod__(self, other) -> Any: ...
            def __eq__(self, other) -> bool: ...
            def __float__(self) -> float: ...
            def __floordiv__(self, other) -> Any: ...
            def __ge__(self, other) -> bool: ...
            def __gt__(self, other) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> Any: ...
            def __le__(self, other) -> bool: ...
            def __lshift__(self, other) -> Any: ...
            def __lt__(self, other) -> bool: ...
            def __mod__(self, other) -> Any: ...
            def __mul__(self, other) -> Any: ...
            def __ne__(self, other) -> bool: ...
            def __neg__(self) -> Any: ...
            def __or__(self, other) -> Any: ...
            def __pos__(self) -> Any: ...
            def __pow__(self, other) -> Any: ...
            def __radd__(self, other) -> Any: ...
            def __rand__(self, other) -> Any: ...
            def __rdivmod__(self, other) -> Any: ...
            def __rfloordiv__(self, other) -> Any: ...
            def __rlshift__(self, other) -> Any: ...
            def __rmod__(self, other) -> Any: ...
            def __rmul__(self, other) -> Any: ...
            def __ror__(self, other) -> Any: ...
            def __rpow__(self, other) -> Any: ...
            def __rrshift__(self, other) -> Any: ...
            def __rshift__(self, other) -> Any: ...
            def __rsub__(self, other) -> Any: ...
            def __rtruediv__(self, other) -> Any: ...
            def __rxor__(self, other) -> Any: ...
            def __sub__(self, other) -> Any: ...
            def __truediv__(self, other) -> Any: ...
            def __xor__(self, other) -> Any: ...
        _original_name: ClassVar[str] = ...
        _original_qualname: ClassVar[str] = ...
        kNumChannels: ClassVar[int] = ...
        kPixelFormat: ClassVar[PixelFormat] = ...
        def __init__(self, *args, **kwargs) -> None: ...
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, width: int, height: int) -> None: ...
    @overload
    def __init__(self, width: int, height: int, initial_value: int) -> None: ...
    @overload
    def at(self, x: int, y: int) -> numpy.ndarray[numpy.int16[m,1],flags.writeable]: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    @overload
    def at(self, x, y) -> Any: ...
    def height(self) -> int: ...
    def resize(self, arg0: int, arg1: int) -> None: ...
    def size(self) -> int: ...
    def width(self) -> int: ...
    @property
    def data(self) -> object: ...
    @property
    def mutable_data(self) -> object: ...
    @property
    def shape(self) -> tuple: ...

def ApplyCameraConfig(*args, **kwargs) -> Any: ...
def ConvertDepth16UTo32F(input: Image𝓣PixelType𝓹kDepth16U𝓤, output: Image𝓣PixelType𝓹kDepth32F𝓤) -> None: ...
def ConvertDepth32FTo16U(input: Image𝓣PixelType𝓹kDepth32F𝓤, output: Image𝓣PixelType𝓹kDepth16U𝓤) -> None: ...
