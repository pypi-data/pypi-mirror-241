from typing import Any, ClassVar, List, Optional

from typing import overload
import numpy
import pydrake.common
import pydrake.geometry
import pydrake.lcm
import pydrake.math
import pydrake.multibody.plant
import pydrake.systems.framework
import pydrake.systems.lcm
import pydrake.systems.sensors
AddFrameTriadIllustration: function
MeshcatPoseSliders_: pydrake.common.cpp_template.TemplateClass
plot_sublevelset_expression: function
plot_sublevelset_quadratic: function

class ColorizeDepthImage(pydrake.systems.framework.LeafSystem):
    invalid_color: pydrake.geometry.Rgba
    def __init__(self) -> None: ...
    @overload
    def Calc(self, arg0: pydrake.systems.sensors.Image𝓣PixelType𝓹kDepth32F𝓤, arg1: pydrake.systems.sensors.Image𝓣PixelType𝓹kRgba8U𝓤) -> None: ...
    @overload
    def Calc(self, arg0: pydrake.systems.sensors.Image𝓣PixelType𝓹kDepth16U𝓤, arg1: pydrake.systems.sensors.Image𝓣PixelType𝓹kRgba8U𝓤) -> None: ...

class ColorizeLabelImage(pydrake.systems.framework.LeafSystem):
    background_color: pydrake.geometry.Rgba
    def __init__(self) -> None: ...
    def Calc(self, arg0: pydrake.systems.sensors.Image𝓣PixelType𝓹kLabel16I𝓤, arg1: pydrake.systems.sensors.Image𝓣PixelType𝓹kRgba8U𝓤) -> None: ...

class ConcatenateImages(pydrake.systems.framework.LeafSystem):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_input_port(self, *args, **kwargs) -> Any: ...

class Meldis:
    __init__: ClassVar[function] = ...
    _check_for_shutdown: ClassVar[function] = ...
    _invoke_poll: ClassVar[function] = ...
    _invoke_subscriptions: ClassVar[function] = ...
    _poll: ClassVar[function] = ...
    _should_update: ClassVar[function] = ...
    _subscribe: ClassVar[function] = ...
    _subscribe_multichannel: ClassVar[function] = ...
    serve_forever: ClassVar[function] = ...

class MeshcatPoseSliders(pydrake.systems.framework.LeafSystem):
    def __init__(self, meshcat: pydrake.geometry.Meshcat, initial_pose: pydrake.math.RigidTransform = ..., lower_limit: numpy.ndarray[numpy.float64[6,1]] = ..., upper_limit: numpy.ndarray[numpy.float64[6,1]] = ..., step: numpy.ndarray[numpy.float64[6,1]] = ..., decrement_keycodes: List[str] = ..., increment_keycodes: List[str] = ..., prefix: str = ..., visible: numpy.ndarray[bool[6,1]] = ...) -> None: ...
    def Delete(self) -> None: ...
    def Run(self, system: pydrake.systems.framework.System, context: pydrake.systems.framework.Context, timeout: Optional[float] = ..., stop_button_keycode: str = ...) -> pydrake.math.RigidTransform: ...
    def SetPose(self, pose: pydrake.math.RigidTransform) -> None: ...

class MeshcatPoseSliders_𝓣AutoDiffXd𝓤(pydrake.systems.framework.LeafSystem_𝓣AutoDiffXd𝓤):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, initial_pose: pydrake.math.RigidTransform = ..., lower_limit: numpy.ndarray[numpy.float64[6,1]] = ..., upper_limit: numpy.ndarray[numpy.float64[6,1]] = ..., step: numpy.ndarray[numpy.float64[6,1]] = ..., decrement_keycodes: List[str] = ..., increment_keycodes: List[str] = ..., prefix: str = ..., visible: numpy.ndarray[bool[6,1]] = ...) -> None: ...
    def Delete(self) -> None: ...
    def Run(self, system: pydrake.systems.framework.System_𝓣AutoDiffXd𝓤, context: pydrake.systems.framework.Context_𝓣AutoDiffXd𝓤, timeout: Optional[float] = ..., stop_button_keycode: str = ...) -> pydrake.math.RigidTransform: ...
    def SetPose(self, pose: pydrake.math.RigidTransform) -> None: ...

class ModelVisualizer:
    __init__: ClassVar[function] = ...
    AddModels: ClassVar[function] = ...
    Finalize: ClassVar[function] = ...
    Run: ClassVar[function] = ...
    _add_traffic_cone: ClassVar[function] = ...
    _camera_config_to_frustum: ClassVar[function] = ...
    _check_rep: ClassVar[function] = ...
    _get_constructor_defaults: ClassVar[function] = ...
    _get_slider_values: ClassVar[function] = ...
    _raise_if_invalid_positions: ClassVar[function] = ...
    _reload: ClassVar[function] = ...
    _remove_traffic_cone: ClassVar[function] = ...
    _set_slider_values: ClassVar[function] = ...
    meshcat: ClassVar[function] = ...
    package_map: ClassVar[function] = ...
    parser: ClassVar[function] = ...

class VideoWriter(pydrake.systems.framework.LeafSystem):
    __init__: ClassVar[function] = ...
    AddToBuilder: ClassVar[function] = ...
    ConnectRgbdSensor: ClassVar[function] = ...
    Save: ClassVar[function] = ...
    _AddRgbdSensor: ClassVar[function] = ...
    _publish: ClassVar[function] = ...
    _write_cv2: ClassVar[function] = ...
    _write_pil: ClassVar[function] = ...

class VisualizationConfig:
    __fields__: ClassVar[tuple] = ...  # read-only
    default_illustration_color: pydrake.geometry.Rgba
    default_proximity_color: pydrake.geometry.Rgba
    delete_on_initialization_event: bool
    enable_alpha_sliders: bool
    enable_meshcat_creation: bool
    lcm_bus: str
    publish_contacts: bool
    publish_illustration: bool
    publish_inertia: bool
    publish_period: float
    publish_proximity: bool
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> VisualizationConfig: ...
    def __deepcopy__(self, arg0: dict) -> VisualizationConfig: ...

class _TemporaryName_N5drake13visualization18MeshcatPoseSlidersIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(pydrake.systems.framework.LeafSystem_𝓣AutoDiffXd𝓤):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, initial_pose: pydrake.math.RigidTransform = ..., lower_limit: numpy.ndarray[numpy.float64[6,1]] = ..., upper_limit: numpy.ndarray[numpy.float64[6,1]] = ..., step: numpy.ndarray[numpy.float64[6,1]] = ..., decrement_keycodes: List[str] = ..., increment_keycodes: List[str] = ..., prefix: str = ..., visible: numpy.ndarray[bool[6,1]] = ...) -> None: ...
    def Delete(self) -> None: ...
    def Run(self, system: pydrake.systems.framework.System_𝓣AutoDiffXd𝓤, context: pydrake.systems.framework.Context_𝓣AutoDiffXd𝓤, timeout: Optional[float] = ..., stop_button_keycode: str = ...) -> pydrake.math.RigidTransform: ...
    def SetPose(self, pose: pydrake.math.RigidTransform) -> None: ...

def AddDefaultVisualization(builder: pydrake.systems.framework.DiagramBuilder, meshcat: pydrake.geometry.Meshcat = ...) -> None: ...
def ApplyVisualizationConfig(config: VisualizationConfig, builder: pydrake.systems.framework.DiagramBuilder, lcm_buses: pydrake.systems.lcm.LcmBuses = ..., plant: pydrake.multibody.plant.MultibodyPlant = ..., scene_graph: pydrake.geometry.SceneGraph = ..., meshcat: pydrake.geometry.Meshcat = ..., lcm: pydrake.lcm.DrakeLcmInterface = ...) -> None: ...
