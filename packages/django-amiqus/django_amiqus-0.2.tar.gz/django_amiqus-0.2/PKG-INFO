Metadata-Version: 2.1
Name: django-amiqus
Version: 0.2
Summary: Django app for integration with Amiqus.
Home-page: https://github.com/yunojuno/django-amiqus
License: MIT
Author: YunoJuno
Author-email: code@yunojuno.com
Maintainer: YunoJuno
Maintainer-email: code@yunojuno.com
Requires-Python: >=3.10,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 3.2
Classifier: Framework :: Django :: 4.0
Classifier: Framework :: Django :: 4.1
Classifier: Framework :: Django :: 4.2
Classifier: Framework :: Django :: 5.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: django (>=3.2,<6.0)
Requires-Dist: python-dateutil
Requires-Dist: requests
Requires-Dist: simplejson
Project-URL: Documentation, https://github.com/yunojuno/django-amiqus
Project-URL: Repository, https://github.com/yunojuno/django-amiqus
Description-Content-Type: text/plain

# django-amiqus


Django app for integration with the Amiqus API.

The current version supports Django 3.2+ and Python 3.10+.

## Background

Amiqus is an online identity verification service. We use this library
to integrate with it.

## Amiqus workflow

There are three core entities that are modelled in this app: `Client`,
`Records`, and `Check` (pending deprecation, and soon to be renamed
`Step`). At a high level they fit together thus:

1. A `Client` represents someone against whom you wish to carry out an
identity or background check. They are unique within Amiqus, although
it's possible to carry out multiple checks over a period of time against
one user.
1. A `Record` is a suite of checks that will have an overall status that
combines the statuses of all the constituent checks.
1. A `Check` / `Step` is an individual check - it could be an identity
   check, a facial recognition check, etc. See the API for all details.

### `Client`

An


## Installation

The project is available through PyPI as ``django-amiqus``:

```bash
$ pip install django-amiqus
```

## Tests

If you want to run the tests manually, install ``poetry``.

```bash
$ poetry install
$ poetry run pytest
```

If you are hacking on the project, please keep coverage up.

## Contributing

Standard GH rules apply: clone the repo to your own account, make sure you
update the tests, and submit a pull request.

